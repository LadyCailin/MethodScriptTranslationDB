<translations>
<comment></comment>
<translationBlock>
	<id>nl-1715</id>
	<key><![CDATA[Find a bug in this page? %sEdit this page yourself, then submit a pull request.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3560</id>
	<key><![CDATA[Inserts a form feed character]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3561</id>
	<key><![CDATA[(Only in double quoted strings) A literal @ symbol, for when this could be confused with a variable]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3562</id>
	<key><![CDATA[Inserts a backspace character]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3563</id>
	<key><![CDATA[\a]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3564</id>
	<key><![CDATA[If you need a literal single quote inside of a string, you must escape it with the backslash character.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3565</id>
	<key><![CDATA[\b]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3566</id>
	<key><![CDATA[Both double quotes and single quotes may be escaped, though double quote characters aren't necessarily needed to be escaped. Both of the following lines are the same:]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3567</id>
	<key><![CDATA[Bare Strings]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3568</id>
	<key><![CDATA[\f]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3569</id>
	<key><![CDATA[Inserts the %s character]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3570</id>
	<key><![CDATA[Other escape sequences are supported:]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3571</id>
	<key><![CDATA[Inserts an alarm (bell) character]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3572</id>
	<key><![CDATA[Double Quoted Strings]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3573</id>
	<key><![CDATA[\n]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3574</id>
	<key><![CDATA[None of the special symbols, namely the comma and exclamation point are considered operators when quoted in this manner. Some characters in the string are still handled specially, however.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3575</id>
	<key><![CDATA[\r]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3576</id>
	<key><![CDATA[Note that using the \u escape sequence is only supported if you are hardcoding the value, for dynamic inputs, you must use %s, using string concatenation won't work.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3577</id>
	<key><![CDATA[\Uxxxxxxxx]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3578</id>
	<key><![CDATA[Bare strings are unquoted, loose strings in source code. For instance, in the code:]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3579</id>
	<key><![CDATA[\t]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3580</id>
	<key><![CDATA[The following parse rules apply to variables embedded in the string. If an at sign (%s@%s) is encountered, the parser will greedily take as many characters as possible to form a valid variable name, (any letters, lowercase or capital, underscores, and numbers).]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3581</id>
	<key><![CDATA[Inserts a vertical tab character]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3582</id>
	<key><![CDATA[Doubly quoted strings, (referred to as "smart strings") using the %s"%s  symbol, follow all the escape rules of singly quoted strings, but also have  variable interpolation. No features that a smart string provides are impossible to do otherwise, but allow for more concise and readable code. @Variables, and simple array accesses are allowed to be embedded in the string itself, as if they had been concatenated in. ($Variables are not supported.) As a very simple example, consider  the following code, of which both examples are equivalent:]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3583</id>
	<key><![CDATA[\\&nbsp;]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3584</id>
	<key><![CDATA[The backslash is itself a special character, and cannot be used except when followed by a pre-defined special character, as defined below. To use a literal backslash, use two backslashes.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3585</id>
	<key><![CDATA[\v]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3586</id>
	<key><![CDATA[Inserts a literal single quote character]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3587</id>
	<key><![CDATA[Double strings with variables in them are considered dynamic values, and cannot be used in cases where a static value is required, for instance, array labels. If the string does not contain any variables, it works the same as a singly quoted string.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3588</id>
	<key><![CDATA[Insert a carriage return character]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3589</id>
	<key><![CDATA[A string is a primitive data type that allows for arbitrary characters. Strings may come from several sources, but string literals directly in source code must follow a few particular rules.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3590</id>
	<key><![CDATA[Inserts the specified UTF-16 character]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3591</id>
	<key><![CDATA[The words "This is a string" are considered bare strings. Each word is technically a separate string, but due to MethodScript's language feature of auto-concatenation, they form a single string, with spaces separating the words.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3592</id>
	<key><![CDATA[Insert a newline character]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3593</id>
	<key><![CDATA[Strings quoted using single quotes are "normal" strings. Only a small amount of escaping is required in these strings, most all characters are taken as literal UTF-8 characters.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3594</id>
	<key><![CDATA[If the end of the variable name may be confused with the next character in the string, you may "escape" the whole sequence using braces. The second example in the above code can be written as follows, to produce the desired results:]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3595</id>
	<key><![CDATA[Quoted Strings]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3596</id>
	<key><![CDATA[Insert a tab character]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3597</id>
	<key><![CDATA[An arbitrary unicode character may be inserted directly via the \u escape sequence. It should be \u, followed by the four hex digit code for that symbol. Since UTF-8 is supported directly, however, you can add the symbol directly. All the following are equivalent:]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3598</id>
	<key><![CDATA[All other escapes are invalid, and will cause a compile error.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3599</id>
	<key><![CDATA[Inserts the specified UTF-8 character]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3600</id>
	<key><![CDATA[Inserts a literal backslash character]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3601</id>
	<key><![CDATA[Inserts a literal double quote character]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3602</id>
	<key><![CDATA[As you can see, the second example is much more concise, and is generally easier to read. The two examples are exactly equivalent however, in fact, double quotes are internally converted to the non-double quote equivalent during compilation.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3603</id>
	<key><![CDATA[In double quoted strings only, if you need a literal at sign, you must escape it, using a backslash:]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-3604</id>
	<key><![CDATA[\uxxxx]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-5152</id>
	<key><![CDATA[About]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-5153</id>
	<key><![CDATA[Home]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-5154</id>
	<key><![CDATA[Privacy Policy]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-5155</id>
	<key><![CDATA[Sponsors]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-5156</id>
	<key><![CDATA[Help]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-5157</id>
	<key><![CDATA[Team. All rights reserved.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nl-5158</id>
	<key><![CDATA[Docs]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
</translations>
