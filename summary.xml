<summary><translationEntry>
	<id>1</id>
	<key><![CDATA[Returns true if the given entity has AI.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2</id>
	<key><![CDATA[Implodes an associative array. The innerGlue is used to glue the key to the value, and then the outerGlue is used to glue those elements together. This only works with associative arrays, and will throw CastException if the array passed in isa  normal array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3</id>
	<key><![CDATA[Returns an arbitrary number based on the most accurate clock available on this system. Only useful when compared to other calls to nano_time(). The return is in nano seconds. See the Java API on System.nanoTime() for more information on the usage of this function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4</id>
	<key><![CDATA[Sends a resourcepack URL to the player&apos;s client. If the client has not been requested to change resources in the past, they will receive a confirmation dialog before downloading and switching to the new pack. Clients that ignore server resources will not receive the request, so this function will not affect them.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5</id>
	<key><![CDATA[Reduces an array to a single value. This is useful for, for instance, summing the values of an array. The previously calculated value, then the next value of the array are sent to the closure, which is expected to return a value, based on the two values, which will be sent again to the closure as the new calculated value. If the array is empty, %s is returned, and if the array has exactly one value in it, only that value is returned. Associative arrays are supported, but the order is based on the key order, which may not be as expected. The keys of the array are ignored.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>6</id>
	<key><![CDATA[Returns an array of potion effect arrays showing the effects on this mob.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>7</id>
	<key><![CDATA[Sets the total experience of a player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>8</id>
	<key><![CDATA[An array of players whitelisted on the server.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>9</id>
	<key><![CDATA[Returns the block location, entity UUID, or virtual id of the inventory the player is currently viewing. If the player is viewing their own inventory or no inventory, the player&apos;s UUID is returned. When the inventory is virtual but has no id, it will return %s. The returned value can be used in other inventory functions unless it is %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>10</id>
	<key><![CDATA[Gets the entity UUID that a spectator is viewing. If the player isn&apos;t spectating from an entity, %s is returned. If the player isn&apos;t in spectator mode, an IllegalArgumentException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>11</id>
	<key><![CDATA[Returns an array of arrays of the enchantments and their levels on the given item. For example: array(array(DAMAGE_ALL, DAMAGE_UNDEAD), array(1, 2))]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>12</id>
	<key><![CDATA[Deletes a virtual inventory. The inventory will be closed for all viewers. Returns whether or not an inventory with that id existed and was removed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>13</id>
	<key><![CDATA[byte_array, %s[%spos%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>14</id>
	<key><![CDATA[Returns the levenshtein distance of two character sequences. For instance, &quot;123&quot; and &quot;133&quot; would have a string distance of 1, while &quot;123&quot; and &quot;123&quot; would be 0, since they are the same string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>15</id>
	<key><![CDATA[Returns the mode across all the numbers in the set. The input may be an array of numbers, or individual numbers as arguments. The mode of a set of numbers is the values that occur most in the set. This function supports bimodal (and generally n-modal sets), as well as fully unique sets, by returning an array. If the set is fully unique, i.e. [1, 2, 3], then the original set will be returned all values occur once). If there are more than one modes, i.e. [1, 1, 2, 3, 3], then an array of both 1 and 3 will be returned. The values will not necessarily be returned in any particular order.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>16</id>
	<key><![CDATA[[%splayer,%s]%s inventorySlot, ItemMetaArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>17</id>
	<key><![CDATA[array, item, index]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>18</id>
	<key><![CDATA[This class is used to manage various tasks throughout MethodScript. It is a task manager of sorts.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>19</id>
	<key><![CDATA[player, label, %s[%svalues...%s]%s, closure]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>20</id>
	<key><![CDATA[Sets a player&apos;s display name. If the first name isn&apos;t provided, it sets the display name of the player running the command. See reset_display_name() also. All player functions expect the player&apos;s real name, not their display name.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>21</id>
	<key><![CDATA[Stops tracking the given scoreboard, unless it is &apos;main&apos;, because that never goes away. If %sify is true (defaults to true), all scores, teams, and objectives will be cleared, and all tracked players currently online will be switched to the main scoreboard, essentially removing all references to the board so it can be garbage-collected.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>22</id>
	<key><![CDATA[Returns true if entity exists, otherwise false.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>23</id>
	<key><![CDATA[&quot;Super Cancels&quot; an event. This only will work if play-dirty is set to true. If an event is super cancelled, not only is the cancelled flag set to true, the event stops propagating down, so no other plugins (as in other server plugins, not just CH scripts) will receive the event at all  (other than monitor level plugins). This is useful for overridding event handlers for plugins that don&apos;t respect the cancelled flag. This function hooks into the play-dirty framework that injects custom event handlers into bukkit.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>24</id>
	<key><![CDATA[Gets the compass target location for the specified player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>25</id>
	<key><![CDATA[[%splayer%s]%s, slot]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>26</id>
	<key><![CDATA[[%splayer, [index%s]%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>27</id>
	<key><![CDATA[Clears a player&apos;s entire inventory (including armor).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>28</id>
	<key><![CDATA[Sets a max speed for given entity. Make sure that the entity is a minecart.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>29</id>
	<key><![CDATA[@b]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>30</id>
	<key><![CDATA[Returns an array of command arrays in the format register_command expects or %s if no commands could be found. This does not include MethodScript aliases, as they are not registered commands.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>31</id>
	<key><![CDATA[Sets the value of a particular runtime setting. Various system components can define these differently, so see the documentation for a particular component to see if it has a runtime setting that can be changed, and what the name and setting should be. Note that there is intentionally no mechanism provided to get the value of a setting, as this is not meant to be used for user settings, just system level settings. To set your own user based settings, use %s/%s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>32</id>
	<key><![CDATA[start, finish, %s[%sincrement%s]%s %s finish]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>33</id>
	<key><![CDATA[Gets the player&apos;s health.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>34</id>
	<key><![CDATA[Runs a command as the current player. Useful for running commands in a loop. Note that this accepts commands like from the chat; with a forward slash in front.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>35</id>
	<key><![CDATA[Returns the hyperbolic tangent of the number]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>36</id>
	<key><![CDATA[value, %s[%sequals, code%s]%s..., %s[%sdefaultCode%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>37</id>
	<key><![CDATA[Shows an enchanting to the current player,  or a specified player. Note that power is defined by how many bookcases are near.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>38</id>
	<key><![CDATA[Works in reverse of add_to_inventory(), but returns the number of items actually taken, which will be from 0 to qty. Target must be a location array or entity UUID. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>39</id>
	<key><![CDATA[Parses a date string, and returns an integer timestamp representing that time. This essentially works in reverse of %s. The dateFormat string is the same as simple_date, see the documentation for that function to see full details on that. The dateString is the actual date to be parsed. The dateFormat should be the equivalent format that was used to generate the dateString. In general, this function is fairly lenient, and will still try to parse a dateString that doesn&apos;t necessarily conform to the given format, but it shouldn&apos;t be relied on to work with malformed data. Various portions of the date may be left off, in which case the missing portions will be assumed, for instance, if the time is left off completely, it is assumed to be midnight, and if the minutes are left off,  it is assumed to be on the hour, if the date is left off, it is assumed to be today, etc.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>40</id>
	<key><![CDATA[xml, xpath]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>41</id>
	<key><![CDATA[Runs a command as a particular user. The special user &apos;~console&apos; can be used to run it as a console user. Using &apos;~op&apos; is deprecated, and will be removed after the next release, use sudo() instead. Commands cannot be run as an offline player. If the first argument is an array of usernames, the command will be run in the context of each user in the array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>42</id>
	<key><![CDATA[Executes arbitrary MethodScript. Note that this function is very experimental, and is subject to changing or removal. To globally disable use of eval, set the runtime setting &quot;function.eval.disable&quot; to true, which will cause use of the function to throw an exception.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>43</id>
	<key><![CDATA[Returns the command string in the Command Block at the given location.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>44</id>
	<key><![CDATA[Returns whether or not the given item is %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>45</id>
	<key><![CDATA[Clears all recipes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>46</id>
	<key><![CDATA[Sets the block at the location from a blockdata object.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>47</id>
	<key><![CDATA[Divides the arguments from left to right, and returns either a double or an integer. If you divide by zero, a RangeException is thrown. Operator syntax is also supported: 2 / 2]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>48</id>
	<key><![CDATA[val1, val2%s[%s, valX...%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>49</id>
	<key><![CDATA[timeInMS, %s[%sinitialDelayInMS,%s]%s closure]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>50</id>
	<key><![CDATA[This class contains all the methods needed to manipulate a byte array primitive. Since byte arrays would be very inefficient to implement using a normal array, this data type allows for more efficient operations, while still allowing for low level data access. Most data transferred within scripts is higher level, and does not require access to a byte array, however, code that interacts with external processes may require use of these functions to properly manipulate the data. Note that all the methods deal with low level types, so the following definitions apply: a byte is 8 bits, a short is 16 bits, an int is 32 bits, a long is 64 bits. UTF-8 strings are supported directly. The byte array is automatically resized as needed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>51</id>
	<key><![CDATA[associativeArray, innerGlue, outerGlue]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>52</id>
	<key><![CDATA[horse, rider]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>53</id>
	<key><![CDATA[These class provides functions that allow strings to be manipulated]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>54</id>
	<key><![CDATA[Returns the path to the current working directory. This is available outside cmdline mode, but is probably only useful for debugging, meta, or informational purposes when not in cmdline interpreter mode, as the current working directory is known simply by knowing what file this is running from. When run from a context where there is no working directory, a ShellException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>55</id>
	<key><![CDATA[Returns whether or not the given item is an integer. Note that numeric strings can usually be used as integers, however this function checks the actual datatype of the item. If you just want to see if an item can be used as a number, use is_integral() or is_numeric() instead.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>56</id>
	<key><![CDATA[world_name]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>57</id>
	<key><![CDATA[Gets the block data as an array at the location.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>58</id>
	<key><![CDATA[EntityManagement]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>59</id>
	<key><![CDATA[T]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>60</id>
	<key><![CDATA[Returns an all caps version of str]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>61</id>
	<key><![CDATA[If banned is true, address is added to banned-ips.txt, if false, the address is removed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>62</id>
	<key><![CDATA[[%splayer%s]%s, slot, type, level]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>63</id>
	<key><![CDATA[val1, %s[%sval2...%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>64</id>
	<key><![CDATA[Works like %s, but only if debug-mode is enabled in the preferences. See %s for details of the output.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>65</id>
	<key><![CDATA[Asyncronously reads in a file. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>66</id>
	<key><![CDATA[If propertyName is set, that single property is returned, or %s if that property doesn&apos;t exist. If propertyName is not set, an associative array with all the system properties is returned. This mechanism hooks into Java&apos;s system property mechanism, and is just a wrapper for that. System properties are more reliable than environmental variables, and so are preferred in cases where they exist. For more information about system properties, see %s. In addition, known preferences listed in preferences.ini are also included, starting with the prefix &quot;methodscript.preference.&quot;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>67</id>
	<key><![CDATA[Given two sides of a right triangle, returns the length of the hypotenuse, using the equation a² + b² = c², where a and b are the arguments provided.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>68</id>
	<key><![CDATA[Sets the cmdline prompt. This is only usable or useful in cmdline interpreter mode. The closure should return a string, that string will be used as the prompt. The closure is called each time a prompt needs generating, thereby allowing for dynamic prompts. A boolean is sent to the closure, if true, the shell is in shellMode, meaning the command is interpreted as a shell command. If false, it is in normal mscript mode.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>69</id>
	<key><![CDATA[Sets the time of a given player. Relative defaults to false, but if true, the time will be an offset and the player&apos;s time will still progress. Otherwise it will be locked and should be a number from 0 to 24000, else it is modulo scaled. Alternatively, common time notation (9:30pm, 4:00 am) is acceptable, and convenient english mappings also exist:&lt;ul&gt;&lt;li&gt;afternoon = 8000&lt;/li&gt;&lt;li&gt;dawn = 22500&lt;/li&gt;&lt;li&gt;day = 2000&lt;/li&gt;&lt;li&gt;dusk = 13500&lt;/li&gt;&lt;li&gt;earlymorning = 20000&lt;/li&gt;&lt;li&gt;evening = 12000&lt;/li&gt;&lt;li&gt;midday = 6000&lt;/li&gt;&lt;li&gt;midnight = 18000&lt;/li&gt;&lt;li&gt;morning = 0&lt;/li&gt;&lt;li&gt;night = 14000&lt;/li&gt;&lt;li&gt;noon = 6000&lt;/li&gt;&lt;li&gt;sunrise = 23000&lt;/li&gt;&lt;li&gt;sunset = 13000&lt;/li&gt;&lt;/ul&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>70</id>
	<key><![CDATA[Returns an array of info about the material. If a trait is specified, it returns only that trait. Available traits: hasGravity, isBlock, isBurnable, isEdible, isFlammable, isOccluding, isRecord, isSolid, isTransparent, isInteractable, maxDurability, hardness (for block materials only), blastResistance (for block materials only), and maxStacksize. The accuracy of these values depend on the server implementation.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>71</id>
	<key><![CDATA[path, content, %s[%smode%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>72</id>
	<key><![CDATA[Sets whether or not the weather can have thunder. The third argument can specify how long the thunder should last in server ticks.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>73</id>
	<key><![CDATA[Prompts the user for a password. This only works in cmdline mode. If mask is true (default), then the password displays * characters for each password character they type. If mask is false, the field stays blank as they type. What they type is returned once they hit enter. The value returned is a secure_string, so to get the actual password, you must use decrypt_secure_string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>74</id>
	<key><![CDATA[Counts the number of occurances in the subject.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>75</id>
	<key><![CDATA[Returns the sin of the number]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>76</id>
	<key><![CDATA[location_from, location_to]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>77</id>
	<key><![CDATA[Gets the total experience of a player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>78</id>
	<key><![CDATA[Calculate yaw from one location to another on the X-Z plane. The rotation is measured in degrees (0-359.99...) relative to the (x=0,z=1) vector, which points south. Throws a FormatException if locations have differing worlds.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>79</id>
	<key><![CDATA[cookieJar]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>80</id>
	<key><![CDATA[Returns true or false if the specified entity is tameable]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>81</id>
	<key><![CDATA[component]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>82</id>
	<key><![CDATA[s]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>83</id>
	<key><![CDATA[Works like a foreach, except if the array is empty, the else code runs instead. That is, if the code would not run at all, the else condition would. In general, brace syntax and use of foreach(){ } else { } syntax is preferred, instead of using foreachelse directly.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>84</id>
	<key><![CDATA[byteData]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>85</id>
	<key><![CDATA[[%splayer%s]%s, speed]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>86</id>
	<key><![CDATA[StringHandling]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>87</id>
	<key><![CDATA[array, value, %s[%svalue2...%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>88</id>
	<key><![CDATA[Adds a tag to the entity. Returns whether or not it was successful.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>89</id>
	<key><![CDATA[These functions provide a hook into game functionality.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>90</id>
	<key><![CDATA[[%snamespace, ...,%s]%s key]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>91</id>
	<key><![CDATA[locationArray %s %s[%sworld%s]%s, x, y, z]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>92</id>
	<key><![CDATA[Returns a new rand value. If the seed used to create the resource is the same, each resulting series of numbers will be the same.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>93</id>
	<key><![CDATA[[%splayer%s]%s, saturation]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>94</id>
	<key><![CDATA[Writes a file to the file system. This method only works from the cmdline, if not in cmdline, a SecurityExcpetion is thrown. Because of this, there is no check against the base-dir path. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>95</id>
	<key><![CDATA[Returns true if the runtime setting is set. This will also return true if the value of the setting is %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>96</id>
	<key><![CDATA[Returns the xor of the two values.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>97</id>
	<key><![CDATA[Manually logs a timestamped message to the debug log and the console, if debug-mode is set to true in the preferences]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>98</id>
	<key><![CDATA[Returns an array of arrays about the objectives on the given scoreboard, which defaults to &apos;main&apos; if not given. If criteria is given, only objectives with that criteria will be returned. The arrays contain the keys name, displayname, slot, modifiable, and criteria.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>99</id>
	<key><![CDATA[split, string, %s[%slimit%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>100</id>
	<key><![CDATA[value, min, max]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>101</id>
	<key><![CDATA[player, %s[%sscoreboard%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>102</id>
	<key><![CDATA[Gets the id of the block at the coordinates. The format of the return will be x:y where x is the id of the block, and y is the meta data for the block. All blocks will return in this format, but blocks that don&apos;t have meta data will return 0 in y (eg. air is &quot;0:0&quot;). If a world isn&apos;t provided in the location array or as an argument, the current player&apos;s world is used. (deprecated for get_block())]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>103</id>
	<key><![CDATA[[%sprofile%s]%s, options]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>104</id>
	<key><![CDATA[[%splayerName%s]%s, %s[%smessage%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>105</id>
	<key><![CDATA[Returns the result of a greater than operation. Operator syntax is also supported: @a &amp;gt; @b]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>106</id>
	<key><![CDATA[Registers a plugin channel for CommandHelper to listen on. Channel name should be a string that is all lower-case, no longer than 32 characters, and contain a colon, or it will throw an IllegalArgumentException. Incoming messages can be inspected by binding to &apos;plugin_message_received&apos;.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>107</id>
	<key><![CDATA[This class contains functions related to Exception handling in MethodScript]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>108</id>
	<key><![CDATA[Removes the last task at the end of the queue from the queue.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>109</id>
	<key><![CDATA[Performs a shallow clone on an array (as opposed to a deep clone). See the examples for more info.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>110</id>
	<key><![CDATA[marqueeName]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>111</id>
	<key><![CDATA[[%slocationArray%s]%s, distance]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>112</id>
	<key><![CDATA[Allows you to manipulate the environment around the player]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>113</id>
	<key><![CDATA[Returns the sum across all the numbers in the set. The input may be an array of numbers, or individual numbers as arguments. The sum is the result of adding all the numbers in the set together.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>114</id>
	<key><![CDATA[Returns the rot13 version of val. Note that rot13(rot13(val)) returns val]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>115</id>
	<key><![CDATA[Returns the sha512 hash of the specified string. Note that sha512 is considered more secure than sha1 and md5 (and sha256, because it takes longer to calculate), and is typically used when storing sensitive data. It is a one way hashing algorithm. This function is aware of and compatible with secure_string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>116</id>
	<key><![CDATA[string, %s[%suseAdvanced%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>117</id>
	<key><![CDATA[entityUUID, player]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>118</id>
	<key><![CDATA[Compiler]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>119</id>
	<key><![CDATA[Subtracts the arguments from left to right, and returns either a double or an integer. Operator syntax is also supported: @a - @b]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>120</id>
	<key><![CDATA[Stores a value in the global storage register. An arbitrary value is stored with the given key, and can be retreived using import. If the value is already stored, it is overwritten. See %s. The reference to the value is stored, not a copy of the value, so in the case of arrays, manipulating the contents of the array will manipulate the stored value. An array may be used as a key. It is converted into a string with the array values separated by dots. export() is threadsafe.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>121</id>
	<key><![CDATA[Sets the difficulty of the world with the given name, or all worlds if the name is not given. The difficulty can be PEACEFUL, EASY, NORMAL, or HARD.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>122</id>
	<key><![CDATA[Right shifts value bitsToShift times, pushing a 0, making this an unsigned right shift.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>123</id>
	<key><![CDATA[Attempts to kill the specified task. The taskType and id will be listed with the task in the task manager. If the task is already finished, doesn&apos;t exist, or already in the process of finishing, nothing happens.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>124</id>
	<key><![CDATA[Returns an associative array of known ItemMeta for the slot given, or %s if there isn&apos;t any. All items can have a display(name), lore, and/or enchants,  and more info will be available for the items that have it. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>125</id>
	<key><![CDATA[value, type]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>126</id>
	<key><![CDATA[Returns a string formatted to the given formatString specification, using the parameters passed in. The formatString should be formatted according to [%s this standard], with the caveat that the parameter types are automatically cast to the appropriate type, if possible. Calendar/time specifiers, (t and T) expect an integer which represents unix time, but are otherwise valid. All format specifiers in the documentation are valid. This works the same as lsprintf with the locale set to &quot;DEFAULT&quot;.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>127</id>
	<key><![CDATA[Returns the first true value. The arguments to this function are lazily evaluated, so if the first value evaluates to true, the rest of the arguments will not be evaluated. If none of the values are true, the last value is returned (which will be falsy). Usage of the operator is preferred:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>128</id>
	<key><![CDATA[Returns whether or not the item is an array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>129</id>
	<key><![CDATA[Saves current players to disk.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>130</id>
	<key><![CDATA[player, sound, %s[%scategory%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>131</id>
	<key><![CDATA[[%sscoreboard%s]%s, %s[%scriteria%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>132</id>
	<key><![CDATA[Unloads a chunk for a world using the x and z coordinates. The current player&apos;s world is used if one is not provided.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>133</id>
	<key><![CDATA[Returns a location array of the space that the player is currently looking at. This is the space where if they placed a block (and were close enough), it would end up going.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>134</id>
	<key><![CDATA[Returns the name of the given mob.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>135</id>
	<key><![CDATA[prompt, %s[%smask%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>136</id>
	<key><![CDATA[script_string]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>137</id>
	<key><![CDATA[This function works similar to a try-catch block in most languages. If the code in tryCode throws an exception, instead of killing the whole script, it stops running, and begins running the catchCode. var should be an ivariable, and it is set to an array containing information about the exception. Consider using try/catch blocks instead of the try function. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>138</id>
	<key><![CDATA[key, val]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>139</id>
	<key><![CDATA[Sets the display name and/or slot of the given objective. If arg 2 is not an array, it is assumed to be the displayname, otherwise arg 2 should be an array with keys &apos;displayname&apos; and/or &apos;slot&apos;, affecting their respective properties. A %s name resets it to the actual name, and %s slot removes it from all displays. Slot can be one of: BELOW_NAME, PLAYER_LIST, or SIDEBAR If the displayname is too long, a LengthException will be thrown. The max length may differ based on server implementation, but will probably be 128.. Scoreboard defaults to &apos;main&apos; if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>140</id>
	<key><![CDATA[Returns the string s with trailing whitespace cut off]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>141</id>
	<key><![CDATA[Returns a UTF-8 encoded string, from the given position, or wherever the marker is currently at by default. The string is assumed to have encoded the length of the string with a 32 bit integer, then the string bytes. (This will be the case is the byte_array was encoded with ba_set_string.) The encoding of the string may be set, but defaults to UTF-8.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>142</id>
	<key><![CDATA[Provides functions for creating and using objects. None of these methods should normally be used, all of them provide easier to use compiler support.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>143</id>
	<key><![CDATA[string, %s[%sencoding%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>144</id>
	<key><![CDATA[Returns true if any value in the array meets some test, which the closure should return true or false about. Not all values will necessarily be checked, once a value is determined to pass the check, execution is stopped, and true is returned. The closure will be passed each value in the array, one at a time, and must return a boolean.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>145</id>
	<key><![CDATA[Returns a location array of the bed block the player last slept in. The player will normally respawn next to this bed if they die. However, this respawn location can be forcibly be set by plugins or commands to any location, like when using set_pbed_location().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>146</id>
	<key><![CDATA[Forces a player to leave their vehicile. This returns false if the player is not riding a vehicle.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>147</id>
	<key><![CDATA[This class provides various functions to manage control flow.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>148</id>
	<key><![CDATA[If possible, makes the entity glide.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>149</id>
	<key><![CDATA[BukkitMetadata]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>150</id>
	<key><![CDATA[[%splayer%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>151</id>
	<key><![CDATA[[%splayer%s]%s, slotNumber]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>152</id>
	<key><![CDATA[[%splayer%s]%s, invArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>153</id>
	<key><![CDATA[eventName, eventObject, %s[%sserverWide%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>154</id>
	<key><![CDATA[Makes an HTTP request to the given url. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>155</id>
	<key><![CDATA[Dynamically calls a user defined procedure. call_proc(_myProc, &apos;var1&apos;) is the equivalent of _myProc(&apos;var1&apos;), except you could dynamically build the procedure name if need be. This is useful for dynamic coding, however, closures work best for callbacks. Throws an InvalidProcedureException if the procedure isn&apos;t defined. If you are hardcoding the first parameter, a warning will be issued, because it is much more efficient and safe to directly use a procedure if you know what its name is beforehand.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>156</id>
	<key><![CDATA[Works like array_sort, but does the sort on another thread, then calls the closure and sends it the sorted array. This is useful if the array is large enough to actually &quot;stall&quot; the server when doing the sort. Sort type should be one of REGULAR, NUMERIC, STRING or STRING_IC]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>157</id>
	<key><![CDATA[Creates a new resource, which is stored in memory. Various functions require resources of certain types, which are created with this function. Barring resources that you intend on keeping around indefinitely, each call to res_create_resource should be paired with a res_free_resource, being careful to catch any exceptions and still calling res_free_resource anyways. Each resource has its own data to create the resource. Type may be one of: XML_DOCUMENT, STRING_BUILDER, or RANDOM]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>158</id>
	<key><![CDATA[locationArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>159</id>
	<key><![CDATA[There may be other exception types as well, refer to the documentation of any extensions you have installed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>160</id>
	<key><![CDATA[var1, var2]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>161</id>
	<key><![CDATA[locationArray, %s[%smagnitude%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>162</id>
	<key><![CDATA[name, item]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>163</id>
	<key><![CDATA[Returns the first false value. The arguments to this function are lazily evaluated, so if the first value evaluates to false, the rest of the arguments will not be evaluated. If none of the values are false, true is returned. Usage of the operator is preferred: &amp;&amp;&amp;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>164</id>
	<key><![CDATA[recipeArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>165</id>
	<key><![CDATA[message]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>166</id>
	<key><![CDATA[locationArray, blockName, %s[%svectorArray%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>167</id>
	<key><![CDATA[sets the age of the mob to the specified int, and locks it at that age if lockAge is true, but by default it will not. Throws a UnageableMobException if the mob does not age naturally.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>168</id>
	<key><![CDATA[Splits a string into parts, using the split as the index. Though it can be used in every single case you would use reg_split, this does not use regex, and therefore can take a literal split expression instead of needing an escaped regex, and *may* perform better than the regex versions, as it uses an optimized tokenizer split, instead of Java regex. Limit defaults to infinity, but if set, only that number of splits will occur.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>169</id>
	<key><![CDATA[Gets the player&apos;s level.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>170</id>
	<key><![CDATA[Creates a new user defined procedure (also known as &quot;function&quot;), with the given name and parameters, that can be called later in code. The name of the procedure must be a constant and its parameters must be variables. Please see the more detailed documentation on procedures for more information. In general, brace syntax and keyword usage is preferred: proc _myProc(@a, @b){ procCode(@a, @b); }]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>171</id>
	<key><![CDATA[Returns the specified value from this procedure. It cannot be called outside a procedure.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>172</id>
	<key><![CDATA[[%sclientId%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>173</id>
	<key><![CDATA[Stops the specified sound for the given player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>174</id>
	<key><![CDATA[Encodes the given byte_array data into a base 64 byte_array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>175</id>
	<key><![CDATA[Add to inventory the specified item. The specifier must be a location array, entity UUID, or virtual inventory id. The items are distributed in the inventory, first filling up slots that have the same item type, up to the max stack size, then fills up empty slots, until either the entire inventory is filled, or the entire amount has been given. If the inventory is full, number of items that were not added is returned, which will be less than or equal to the quantity provided. Otherwise, returns 0.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>176</id>
	<key><![CDATA[[%splayer%s]%s, %s[%slistName%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>177</id>
	<key><![CDATA[subject, search, replacement]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>178</id>
	<key><![CDATA[Registers a command to the server&apos;s command list, or updates an existing one. Options is an associative array that can have the following keys: description, usage, permission, noPermMsg, aliases, tabcompleter, and/or executor. Everything is optional and can be modified later, except for &apos;aliases&apos; which can only be changed by first unregistering the command. &apos;noPermMsg&apos; is the message displayed when the user doesn&apos;t have the permission specified in &apos;permission&apos;. &apos;Usage&apos; is the message shown when the &apos;executor&apos; returns false. &apos;Executor&apos; is the closure run when the command is executed, and can return true or false (by default is treated as true). &apos;tabcompleter&apos; is the closure run when a user hits tab while the command is entered and ready for args. It is meant to return an array of completions, but if not the tab_complete_command event will be fired, and the completions of that event will be sent to the user. Both executor and tabcompleter closures are passed the following information in this order: alias used, name of the sender, array of arguments used, array of command info.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>179</id>
	<key><![CDATA[val, %s[%sbase%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>180</id>
	<key><![CDATA[[%splayer [, player%s]%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>181</id>
	<key><![CDATA[channel]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>182</id>
	<key><![CDATA[proc_name, %s[%svar1...%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>183</id>
	<key><![CDATA[Sets the visibility of the current player (or the one specified) to visible or invisible (based on the value of isVanished) from the view of the otherPlayer. This is the raw access function, you probably shouldn&apos;t use this, as the CommandHelper vanish api functions will probably be easier to use.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>184</id>
	<key><![CDATA[player, msg]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>185</id>
	<key><![CDATA[locationArray, %s[%scheckMode%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>186</id>
	<key><![CDATA[Clears out all tasks that are on the queue. If no tasks were on the queue, nothing happens.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>187</id>
	<key><![CDATA[ByteArrays]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>188</id>
	<key><![CDATA[byte_array, %s[%sencoding%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>189</id>
	<key><![CDATA[number]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>190</id>
	<key><![CDATA[Constructs a secure_string from a given char array or string. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>191</id>
	<key><![CDATA[array, value]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>192</id>
	<key><![CDATA[byte_array, setLittleEndian]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>193</id>
	<key><![CDATA[Multiplies the arguments together, and returns either a double or an integer. Operator syntax is also supported: 2 * 2]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>194</id>
	<key><![CDATA[value, %s[%sflavor%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>195</id>
	<key><![CDATA[Reads in a file from the file system at location var1 and returns it as a string. The path is relative to the file that is being run, not CommandHelper. If the file is not found, or otherwise can&apos;t be read in, an IOException is thrown. If the file specified is not within base-dir (as specified in the preferences file), a SecurityException is thrown. The line endings for the string returned will always be \n, even if they originally were \r\n.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>196</id>
	<key><![CDATA[locationArray, soundArray%s[%s, players%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>197</id>
	<key><![CDATA[Returns the combined light level at a block, taking into account all sources.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>198</id>
	<key><![CDATA[x, y, z, %s[%sworld%s]%s %s locationArray, %s[%sworld%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>199</id>
	<key><![CDATA[Reads in a file, and returns a byte_array for it. The file is returned exactly as is on disk, no conversions are done. base-dir restrictions are enforced for the path, the same as read(). If file is relative, it is assumed to be relative to this file. This is useful for managing binary files.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>200</id>
	<key><![CDATA[Sets a task to occur at a regular interval, given a cron style interval. This allows for an easier way to specify that a task should happen, for instance, every hour on the hour. Unlike set_interval, this uses absolute wall clock time, not relative times. The task id is returned, so it can be cleared later with clear_cron if needed. If clear_cron is run from within the task itself, the id is optional. See more information for a detailed description of cron format. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>201</id>
	<key><![CDATA[nothing]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>202</id>
	<key><![CDATA[Negates a number, essentially multiplying the number by -1]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>203</id>
	<key><![CDATA[Gets all recipes on the server.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>204</id>
	<key><![CDATA[ControlFlow]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>205</id>
	<key><![CDATA[BasicLogic]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>206</id>
	<key><![CDATA[Sends an email. See the extended description for more information. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>207</id>
	<key><![CDATA[This class of functions provide methods to hook deep into the server's event architecture]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>208</id>
	<key><![CDATA[Escapes arg so that it may be used directly in a regular expression, without fear that it will have special meaning; that is, it escapes all special characters. Use this if you need to use user input or similar as a literal search index.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>209</id>
	<key><![CDATA[cmd]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>210</id>
	<key><![CDATA[Returns the biome type of this block column. The location array&apos;s y value is ignored. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>211</id>
	<key><![CDATA[num1, %s[%snum2...%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>212</id>
	<key><![CDATA[Decodes the base 64 encoded byte_array data back into the original byte_array data.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>213</id>
	<key><![CDATA[a, b]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>214</id>
	<key><![CDATA[Skips the rest of the code in this loop, and starts the loop over, with it continuing at the next index. If this function is called outside of a loop, the command will fail. If int is set, it will skip &apos;int&apos; repetitions. If no argument is specified, 1 is used.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>215</id>
	<key><![CDATA[entityUUID, %s[%stransparents, [maxDistance%s]%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>216</id>
	<key><![CDATA[Sets the tameable mob to the specified player. Offline players are supported, but this means that partial matches are NOT supported. You must type the player&apos;s name exactly. Setting the player to %s will untame the mob.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>217</id>
	<key><![CDATA[Return the equivalent of not(and())]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>218</id>
	<key><![CDATA[These functions manage specifically living entities. If the entity specified is not living, a BadEntityTypeException will be thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>219</id>
	<key><![CDATA[This class provides methods for interfacing with OAuth providers.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>220</id>
	<key><![CDATA[condition, %s[%scode%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>221</id>
	<key><![CDATA[Runs the closure on the main thread now, blocking the current thread until it is finished. If the function call is itself being run from the main thread, then the function still will block as expected; it is not an error to call this from the main thread. Unlike running on the main thread later, if the underlying code throws an exception, it is thrown as a normal part of the execution. If the closure returns a value, it is returned by x_run_on_main_thread_now.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>222</id>
	<key><![CDATA[entityUUID, array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>223</id>
	<key><![CDATA[Sets the flying state for the player.Requires player to have the ability to fly, which is set with set_pflight().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>224</id>
	<key><![CDATA[Sleeps the script for the specified number of seconds, up to the maximum time limit defined in the preferences file. Seconds may be a double value, so 0.5 would be half a second. PLEASE NOTE: Sleep times are NOT very accurate, and should not be relied on for preciseness.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>225</id>
	<key><![CDATA[These functions manipulate an item's meta data. The items are modified in a player's inventory.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>226</id>
	<key><![CDATA[Sets the visibility of a mob&apos;s custom name. True means it will be visible from a distance, like a playername. False means it will only be visible when near the mob.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>227</id>
	<key><![CDATA[dateFormat, dateString, %s[%slocale%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>228</id>
	<key><![CDATA[Includes external code at the specified path.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>229</id>
	<key><![CDATA[Commands]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>230</id>
	<key><![CDATA[boolean, %s[%sworld%s]%s, %s[%sint%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>231</id>
	<key><![CDATA[Clamps a value between a certain range, inclusive. If the value is less than the min, the min is returned, if it is greater than the max, the max is returned, and if it is between the two values, the original value is returned. Alternatively, if min &gt; max, clamp works in reverse mode. In that case, the value must be less than max (actually the minimum) and greater than min (actually the maximum). If the value is between the two, it is determined which of the two values it is closer to, and then that value is returned. If the value is exactly between both min and max, the minimum (actually the max) is returned. If min]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>232</id>
	<key><![CDATA[Sets the weather for the given player only. If downFall is true, the player will experience a storm. If downFall is %s, it will reset the player&apos;s visible weather to that which the player&apos;s world is experiencing.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>233</id>
	<key><![CDATA[randomResource]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>234</id>
	<key><![CDATA[Plays a sound at the given location. SoundArray is in an associative array with keys &apos;sound&apos;, &apos;category&apos;, &apos;volume&apos;, &apos;pitch&apos;, where all are optional except sound. Volume, if greater than 1.0 (default), is the distance in chunks players can hear the sound. Pitch has a range of 0.5 - 2.0, where where 1.0 is the middle pitch and default. Players can be a single player or an array of players to play the sound to, if not given, all players can potentially hear it. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>235</id>
	<key><![CDATA[array, closure]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>236</id>
	<key><![CDATA[Gets the player list header for a player. This is the text that appears above the player list that appears when hitting the tab key.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>237</id>
	<key><![CDATA[locationArray, %s[%ssafe%s]%s %s x, y, z, %s[%ssafe%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>238</id>
	<key><![CDATA[Returns an array of players that can see this boss bar.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>239</id>
	<key><![CDATA[Given an enchantment name and an item array, returns whether or not that item can be enchanted with that enchantment. Throws an EnchantmentException if the name is not a valid enchantment type.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>240</id>
	<key><![CDATA[player, msg, %s[%s...%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>241</id>
	<key><![CDATA[Minecraft]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>242</id>
	<key><![CDATA[entityUUID, locationArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>243</id>
	<key><![CDATA[Returns the sha1 HMAC of the specified string using the provided key. This function is aware of and compatible with secure_string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>244</id>
	<key><![CDATA[Returns the canonical, absolute path of the given path. This provides a context independent and unique path which always points to the specified path, and removes any duplicate . or .. parts.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>245</id>
	<key><![CDATA[x, z, %s[%sworld%s]%s %s locationArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>246</id>
	<key><![CDATA[Returns an array that is the intersection of the two provided arrays. If either array is associative, it puts the function in associative mode. For normal arrays, the values are compared, and for associative arrays, the keys are compared, but the values are taken from the left array. comparisonMode is only applicable for normal arrays, and defaults to HASH, but determines the mode in which the system decides if two values are equal or not. A closure may be sent instead, which should return true if the two values are considered equals or not. Using the HASH mode is fastest, as this puts the function in an optimizing mode, and it can run at O(n log n). Otherwise, the runtime is O(n**2). The results between HASH and STRICT_EQUALS should almost never be different, and so in that case using STRICT_EQUALS has a lower performance for no gain, but there may be some cases where using the hash code is not desirable. EQUALS is necessary if you wish to disregard typing, so that array(1, 2, 3) and array(&apos;1&apos;, &apos;2&apos;, &apos;3&apos;) are considered equal. Duplicate values in the left array are duplicated, but duplicates in the right are not.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>247</id>
	<key><![CDATA[Decodes a previously url encoded string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>248</id>
	<key><![CDATA[[%splayer%s]%s, exp]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>249</id>
	<key><![CDATA[[%sworld%s]%s, difficulty]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>250</id>
	<key><![CDATA[Given an item array, returns the slot numbers that the matching item has at least one item in. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>251</id>
	<key><![CDATA[byte_array, length, %s[%spos%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>252</id>
	<key><![CDATA[Writes the length of the string to the byte array, as a short, (interpreted as UTF-8), then writes the UTF-8 string itself. If an external application requires the string to be serialized in a different manner, then use the string-byte_array conversion methods in StringHandling, however strings written in this manner are compatible with ba_get_string. The encoding may be set, but defaults to UTF-8.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>253</id>
	<key><![CDATA[location, particle%s[%s, players%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>254</id>
	<key><![CDATA[[%splayer%s]%s, slot, colorArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>255</id>
	<key><![CDATA[id, closure]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>256</id>
	<key><![CDATA[entityUUID]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>257</id>
	<key><![CDATA[Returns the environment variable specified, if variableName is set. Otherwise, returns an associative array of all the environment variables.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>258</id>
	<key><![CDATA[Returns an associative array with various information about a block. If an index is specified, it will return a boolean. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>259</id>
	<key><![CDATA[Given an enchantment name, returns the max level it can be. If name is not a valid enchantment, an EnchantException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>260</id>
	<key><![CDATA[Returns an array of all the events currently registered on the server. Mostly meant for debugging, however it would be possible to parse this response to cherry pick events to unregister.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>261</id>
	<key><![CDATA[An operation that does nothing. Any arguments passed in are ignored entirely, though they will be evaluated first.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>262</id>
	<key><![CDATA[Returns whether or not the item is actually a string datatype. If you just care if some data can be used as a string, use is_stringable().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>263</id>
	<key><![CDATA[Returns whether the world (defaults to player&apos;s world) has thunder.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>264</id>
	<key><![CDATA[[%sworld%s]%s, boolean]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>265</id>
	<key><![CDATA[locationArray, %s[%ssize%s]%s, %s[%ssafe%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>266</id>
	<key><![CDATA[array, %s[%scompareTypes%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>267</id>
	<key><![CDATA[[%splayer%s]%s, %s[%svalue%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>268</id>
	<key><![CDATA[Returns true if the entity is glowing]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>269</id>
	<key><![CDATA[Shows a title and/or subtitle to a player. The title and subtitle parameters can be %s. The integers fadein, stay, and fadeout define the time in ticks that the title will be displayed. The defaults are 10, 70, and 20 respectively.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>270</id>
	<key><![CDATA[Provides mathematical functions to scripts]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>271</id>
	<key><![CDATA[Returns a list of time zones registered on this system.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>272</id>
	<key><![CDATA[Broadcasts a message to all or some players and/or console. If permission is given, only players with that permission and console will see the broadcast. If an array of recipients is given, only online players in the list will see the broadcast. Console will receive the broadcast only when the array contains case-insensitive &apos;~console&apos;. Offline players and duplicate recipients in the list will be ignored. If permission/recipients is %s, all players and console will see the broadcast. Throws FormatException when the given recipients array is associative.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>273</id>
	<key><![CDATA[Completely removes a value from storage. Calling has_value(key) after this call will return false.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>274</id>
	<key><![CDATA[Returns true if the two values are NOT equal to each other, while ignoring case.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>275</id>
	<key><![CDATA[Returns a location array that is the specified distance from the origin location along a vector. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>276</id>
	<key><![CDATA[Given an item array, returns the enchantments that can be validly added to this item. This may return an empty array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>277</id>
	<key><![CDATA[Returns an array containing all blocks along the living entity&apos;s line of sight. transparents is an array of block IDs, only air by default. maxDistance represents the maximum distance to scan. The server may cap the scan distance, but probably by not any less than 100 meters.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>278</id>
	<key><![CDATA[Returns whether or not the player is op.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>279</id>
	<key><![CDATA[origin, target, %s[%sdistance%s]%s %s origin, direction, %s[%sdistance%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>280</id>
	<key><![CDATA[var1, %s[%svar2...%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>281</id>
	<key><![CDATA[SQL]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>282</id>
	<key><![CDATA[entityUUID, name]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>283</id>
	<key><![CDATA[[%s]%s %s min/max, %s[%smax%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>284</id>
	<key><![CDATA[Set&apos;s the player&apos;s food saturation level. If this is above 0.0 and the player&apos;s health is below max, the player will experience fast health regeneration.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>285</id>
	<key><![CDATA[Sets whether or not other entities will collide with this mob.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>286</id>
	<key><![CDATA[Returns the distance the entity has fallen.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>287</id>
	<key><![CDATA[The first argument is the entity to be held on a leash, and must be living. The second is the holder of the leash. This does not have to be living, but the only non-living entity that will persist as a holder across restarts is the leash hitch. Players, bats, enderdragons, withers and certain other entities can not be held by leashes due to minecraft limitations.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>288</id>
	<key><![CDATA[Given an item array, returns the maximum allowed stack size. This method will accept an item array like is returned from pinv().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>289</id>
	<key><![CDATA[Returns true if and only if the two values are actually the same reference. Primitives that are equal will always be the same reference, this method is only useful for object/array comparisons.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>290</id>
	<key><![CDATA[Returns the sha256 hash of the specified string. Note that sha256 is considered more secure than sha1 and md5, and is typically used when storing sensitive data. It is a one way hashing algorithm. This function is aware of and compatible with secure_string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>291</id>
	<key><![CDATA[Sets the time of a given world. Should be a number from 0 to 24000, if not, it is modulo scaled. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>292</id>
	<key><![CDATA[These functions provide a way to run other commands, and otherwise interact with the system in a meta way.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>293</id>
	<key><![CDATA[Splits a string on the given regex, and returns an array of the parts. If nothing matched, an array with one element, namely the original subject, is returned. Limit defaults to infinity, but if set, only that number of splits will occur.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>294</id>
	<key><![CDATA[Tames any tameable mob to the specified player. Offline players are supported, but this means that partial matches are NOT supported. You must type the players name exactly. Setting the player to %s will untame the mob. If the entity doesn&apos;t exist, nothing happens.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>295</id>
	<key><![CDATA[Gets an array of the specified inventory. If the block or entity can&apos;t have an inventory, a FormatException is thrown. If the index is specified, only the slot given will be returned. The max index of the array in the array is different for different types of inventories. If there is no item at the slot specified, %s is returned. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>296</id>
	<key><![CDATA[Pushes the specified value(s) onto the end of the array. Unlike calling array_set(@array, array_size(@array), @value) on a normal array, the size of the array is increased first. The special operator syntax @array[] = &apos;value&apos; is also supported, as shorthand for array_push().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>297</id>
	<key><![CDATA[Drops the specified item stack at the specified player&apos;s feet (or at an arbitrary Location, if an array is given), and returns its entity UUID. spawnNaturally takes a boolean, which forces the way the item will be spawned. If true, the item will be dropped with a random velocity.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>298</id>
	<key><![CDATA[array, values]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>299</id>
	<key><![CDATA[Removes a tag from the entity. Returns whether or not it was successful.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>300</id>
	<key><![CDATA[Returns true if the block at this location is a sign.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>301</id>
	<key><![CDATA[Turns verbose debug output on or off. This should generally never be on in a production server, but can be useful to quickly trace what a script is doing when it runs in a test environment. When on, every single function call will be printed out, along with the parameters passed in to it. To reduce impact on scripts when this is disabled, this has been implemented as a system wide setting, and applies to all scripts running in the same system.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>302</id>
	<key><![CDATA[[%sid%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>303</id>
	<key><![CDATA[Multiplies a string the given number of times. For instance, string_multiply(&apos;a&apos;, 3) returns &apos;aaa&apos;. If the string is empty, an empty string is returned. If the string is %s, %s is returned. If times is 0, an empty string is returned. All other string values are multiplied accordingly. Providing a value less than 0 for times results in a RangeException.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>304</id>
	<key><![CDATA[[%splayer%s]%s, status]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>305</id>
	<key><![CDATA[[%splayer%s]%s, itemArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>306</id>
	<key><![CDATA[teamName, array, %s[%sscoreboard%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>307</id>
	<key><![CDATA[Provides a more convenient method for running if/else chains. If none of the conditions are true, and there is no &apos;else&apos; condition, %s is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>308</id>
	<key><![CDATA[Gets the experience of a player within this level, as a percentage, from 0 to 99. (100 would be next level, therefore, 0.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>309</id>
	<key><![CDATA[Returns whether the world (defaults to player&apos;s world) has a storm.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>310</id>
	<key><![CDATA[Sets whether or not gravity applies to the entity.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>311</id>
	<key><![CDATA[No]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>312</id>
	<key><![CDATA[Returns false if the item would fail if it were used as a numeric value. If it can be parsed or otherwise converted into a numeric value, true is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>313</id>
	<key><![CDATA[Prompts the user for a line. The line typed is returned once the user presses enter. This only works in cmdline mode.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>314</id>
	<key><![CDATA[Scoreboards]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>315</id>
	<key><![CDATA[Returns the arc tan of the number]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>316</id>
	<key><![CDATA[Sets the code that will be run when a user attempts to tabcomplete a command. The closure is expected to return an array of completions, otherwise the tab_complete_command event will be fired and used to send completions. The closure is passed the following information in this order: alias used, name of the sender, array of arguments used, array of command info.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>317</id>
	<key><![CDATA[entityUUID, otherEntityUUID]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>318</id>
	<key><![CDATA[[%splayer%s]%s, mode]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>319</id>
	<key><![CDATA[Sets a block or entity inventory to the specified inventory object. The specifier can be an entity UUID, location array, or virtual inventory ID. If the block or entity can&apos;t have an inventory, a FormatException is thrown. An inventory object invArray is one that matches what is returned by get_inventory(), so set_inventory(123, get_inventory(123)) while pointless, would be a correct call. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>320</id>
	<key><![CDATA[entityUUID, shooter]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>321</id>
	<key><![CDATA[Sets if the given projectile should bounce when it hits something.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>322</id>
	<key><![CDATA[Runs the specified script in the context of a given player or ~console. A script that runs player(), for instance, would return the specified player&apos;s name, not the player running the command. Setting the label allows you to dynamically set the label this script is run under as well (in regards to permission checking)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>323</id>
	<key><![CDATA[Provides methods for managing inventory related tasks.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>324</id>
	<key><![CDATA[Adds x to var, and stores the new value. Equivalent to ++var in other languages. Expects ivar to be a variable, then returns the ivar, or, if var is a constant number, simply adds x to it, and returns the new number. Operator syntax is also supported: ++@var]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>325</id>
	<key><![CDATA[Left shifts the value bitsToShift times]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>326</id>
	<key><![CDATA[Regenerate the chunk for a world. The current player&apos;s world is used if one is not provided. Beware that this is destructive| %sYes]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>327</id>
	<key><![CDATA[Spawns particles at the specified location. The players parameter can be one player or an array of players. If none is given, all players within 32 meters will see the particle. The particle parameter can be a particle name or an associative array defining the characteristics of the particle to be spawned. The array requires the particle name under the key &quot;particle&quot;. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>328</id>
	<key><![CDATA[Meta]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>329</id>
	<key><![CDATA[Damage an entity. If given, the source entity will be attributed as the damager.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>330</id>
	<key><![CDATA[Saves the specified world.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>331</id>
	<key><![CDATA[[%splayer%s]%s, flying]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>332</id>
	<key><![CDATA[Adds x to var, and stores the new value. Equivalent to var++ in other languages. Expects ivar to be a variable, then returns a copy of the old ivar, or, if var is a constant number, simply adds x to it, and returns the new number. Operator notation is also supported: @var++]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>333</id>
	<key><![CDATA[BossBar]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>334</id>
	<key><![CDATA[A thin wrapper around the /tellraw command, this simply passesthe input ot the Minecraft tellraw command. The raw is passed in as a normal (possibly associative) array, and json encoded. No validation is done on the input, so the command may fail. The specification of the array may change from version to version of Minecraft, but is documented here %s. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>335</id>
	<key><![CDATA[Removes all instances of value from the specified array. For instance, array_remove_values(array(1, 2, 2, 3), 2) would produce the array(1, 3). Note that it returns %s however, so it will simply in place modify the array passed in, much like array_remove.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>336</id>
	<key><![CDATA[player, isBanned, %s[%sreason%s]%s, %s[%ssource%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>337</id>
	<key><![CDATA[Creates a new scoreboard identified by the given name, and stores it internally for later use. Throws a ScoreboardException if the name is already in use.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>338</id>
	<key><![CDATA[cronFormat, closure]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>339</id>
	<key><![CDATA[world, boolean]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>340</id>
	<key><![CDATA[[%sint%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>341</id>
	<key><![CDATA[Returns an associative array of all the info needed to duplicate the world. The keys are name, seed, environment, generator, worldtype, sealevel and maxheight.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>342</id>
	<key><![CDATA[Returns an associative array showing the equipment this mob is wearing. This does not work on most &quot;dumb&quot; entities, only mobs (entities with AI).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>343</id>
	<key><![CDATA[message, %s[%sprefix%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>344</id>
	<key><![CDATA[Sets the max health of a living entity, players included. This value is persistent, and will not reset even after server restarts.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>345</id>
	<key><![CDATA[[%splayer%s]%s, material]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>346</id>
	<key><![CDATA[This class contains methods that help manage files on the file system. Most are restricted with the base-dir setting in your preferences.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>347</id>
	<key><![CDATA[Returns a location array for the specified world, or the current player&apos;s world if one is not specified.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>348</id>
	<key><![CDATA[Returns the maximum amount of air the specified living entity can have.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>349</id>
	<key><![CDATA[Returns whether or not the specified player is online. Note that the name must match exactly, but it will not throw a PlayerOfflineException if the player is not online, or if the player doesn&apos;t even exist.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>350</id>
	<key><![CDATA[Creates a new boss bar with a reference id. An optional array can be given with the keys: title, color, style, visible, percent. Title displays above the boss bar. Color can be one of PINK, BLUE, RED, GREEN, YELLOW, PURPLE, or WHITE. Style can be one of SOLID, SEGMENTED_6, SEGMENTED_10, SEGMENTED_12, or SEGMENTED_20. Visible is a boolean for whether the bar is visible or not. Percent is a double from 0.0 to 1.0 representing the how much the bar is filled from left to right. Defaults to an empty title with a WHITE, SOLID, visible, full bar.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>351</id>
	<key><![CDATA[ Returns the name of the current OS. Will be one of WINDOWS, MAC, LINUX, SOLARIS, or UNKNOWN.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>352</id>
	<key><![CDATA[charArray%sstring]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>353</id>
	<key><![CDATA[char_from_unicode(parse_int(&apos;1234&apos;, 16))]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>354</id>
	<key><![CDATA[specifier, array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>355</id>
	<key><![CDATA[Returns an array of all thread names that are currently running in the JVM. This is a debugging tool for your server, and less of a CommandHelper specific thing.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>356</id>
	<key><![CDATA[Back to top]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>357</id>
	<key><![CDATA[ivar]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>358</id>
	<key><![CDATA[material, %s[%strait%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>359</id>
	<key><![CDATA[string, times]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>360</id>
	<key><![CDATA[Returns true if the environment is in cmdline mode. False otherwise.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>361</id>
	<key><![CDATA[Returns true if the event is known to MethodScript. Like function_exists(), this function is resolved at compile time, and allows for conditional uses of events that may or may not exist.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>362</id>
	<key><![CDATA[Writes an int, interpreted as a 64 bit, starting from the given position, or wherever the marker is currently at by default.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>363</id>
	<key><![CDATA[Kicks the specified player with an optional message. If no message is specified, &quot;You have been kicked&quot; is used. If no player is specified, the current player is used with the default message.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>364</id>
	<key><![CDATA[locationA, locationB]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>365</id>
	<key><![CDATA[Converts the number to radians (which is assumed to have been in degrees)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>366</id>
	<key><![CDATA[Returns a max speed for given entity. Make sure that the entity is a minecart.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>367</id>
	<key><![CDATA[event_name, options, prefilter, event_obj, %s[%scustom_params%s]%s, &lt;code&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>368</id>
	<key><![CDATA[byte_array, string, %s[%spos%s]%s, %s[%sencoding%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>369</id>
	<key><![CDATA[[%splayer/LocationArray%s]%s, itemArray, %s[%sspawnNaturally%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>370</id>
	<key><![CDATA[Returns whether or not the given item is an integer or a double. Note that numeric strings can usually be used as integers and doubles, however this function checks the actual datatype of the item. If you just want to see if an item can be used as a number, use is_integral() or is_numeric() instead.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>371</id>
	<key><![CDATA[Returns a date of the current time (or the time specified) in the format you give. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>372</id>
	<key><![CDATA[player, command]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>373</id>
	<key><![CDATA[This experimental and private API is subject to removal, or incompatible changes, and should not be yet heavily relied on in normal development.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>374</id>
	<key><![CDATA[[%splayer%s]%s, instrument, note, %s[%slocationArray%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>375</id>
	<key><![CDATA[Spawns a falling block entity of the specified block type at the specified location, applying the vector array as a velocity if given. Values for the vector array are doubles, and 1.0 seems to imply about 3 times walking speed. Gravity applies for y.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>376</id>
	<key><![CDATA[Adds a player to the specified boss bar.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>377</id>
	<key><![CDATA[Sets if PVP is allowed in the world with the given name, or all worlds if the name is not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>378</id>
	<key><![CDATA[This class of functions allows scripts to hook deep into the interpreter itself, and get meta information about the operations of a script. This is useful for debugging, testing, and ultra dynamic scripting. See the [[%s|guide to reflection]] on the wiki for more details. In order to make the most of these functions, you should familiarize yourself with the general workings of the language. These functions explore extremely advanced concepts, and should normally not be used; especially if you are not familiar with the language.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>379</id>
	<key><![CDATA[[%splayer%s]%s, locationArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>380</id>
	<key><![CDATA[Back to top%s %sShow hidden]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>381</id>
	<key><![CDATA[[%splayer%s]%s, title, subtitle, %s[%sfadein, stay, fadeout%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>382</id>
	<key><![CDATA[Returns an array of arrays about the teams on the given scoreboard, which defaults to &apos;main&apos; if not given. The array keys are the team names, and each value is a team array containing the keys: name, displayname, prefix, suffix, size, color, options, and players.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>383</id>
	<key><![CDATA[[%sboolean1, code%s]%s..., %s[%selseCode%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>384</id>
	<key><![CDATA[arg]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>385</id>
	<key><![CDATA[array1, array2, %s[%scomparisonMode%s]%sarray1, array2, comparisonClosure]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>386</id>
	<key><![CDATA[Works like call_proc, but allows for variable or unknown number of arguments to be passed to a proc. The array parameter is &quot;flattened&quot;, and call_proc is essentially called. If the array is associative, an exception is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>387</id>
	<key><![CDATA[Returns an int, read in as a 16 bit short, from the given position, or wherever the marker is currently at by default.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>388</id>
	<key><![CDATA[Stops a named marquee.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>389</id>
	<key><![CDATA[y, x]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>390</id>
	<key><![CDATA[Returns a list of all known classes. This may not be completely exhaustive, but will at least contain all system defined classes. The returned value is an array of ClassType objects.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>391</id>
	<key><![CDATA[Returns the result of a less than or equal to operation. Operator syntax is also supported: @a &amp;lt;= @b]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>392</id>
	<key><![CDATA[This class provides methods for making a text "marquee", like a stock ticker. Because this is a threading operation, and could be potentially resource intensive, the heavy lifting has been implemented natively.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>393</id>
	<key><![CDATA[Returns the entity&apos;s health as a percentage of its maximum health. If the specified entity doesn&apos;t exist, or is not a LivingEntity, a format exception is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>394</id>
	<key><![CDATA[Like while, but always runs the code at least once. The condition is checked after each run of the code, and if it is true, the code is run again. break and continue work inside a dowhile, but continuing more than once is pointless, since the loop isn&apos;t inherently keeping track of any counters anyways. Breaking multiple times still works however. In general, using brace syntax is preferred: do { code(); } while(@condition); instead of using dowhile() directly.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>395</id>
	<key><![CDATA[Plays a sound at the given location. SoundArray is in an associative array with keys &apos;sound&apos;, &apos;category&apos;, &apos;volume&apos;, &apos;pitch&apos;, where all are optional except sound. Volume, if greater than 1.0 (default), is the distance in chunks players can hear the sound. Pitch has a range of 0.5 - 2.0, where where 1.0 is the middle pitch and default. Players can be a single player or an array of players to play the sound to, if not given, all players can potentially hear it. Sound is a sound path, separated by periods. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>396</id>
	<key><![CDATA[Trades]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>397</id>
	<key><![CDATA[Sets whether or not the spawn chunks in the given world should stay loaded.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>398</id>
	<key><![CDATA[Returns the location array for this entity, if it exists. This array will be compatible with any function that expects a location.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>399</id>
	<key><![CDATA[Rounds value to the 15th place. This is useful when doing math using approximations. For instance, sin(math_const(&apos;PI&apos;)) returns 1.2246467991473532E-16, but sin of pi is actually 0. This happens because pi cannot be accurately represented on a computer, it is an approximation. Using round15, you can round to the next nearest value, which often time should give a more useful answer to display. For instance, round15(sin(math_const(&apos;PI&apos;))) is 0. This functionality is not provided by default in methods like sin(), because it technically makes the result less accurate, given the inputs. In general, you should only use this function just before displaying the value to the user. Internally, you should keep the value returned by the input functions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>400</id>
	<key><![CDATA[Sets the scoreboard to be used by a player. The scoreboard argument is the id of a registered scoreboard. Scoreboard defaults to &apos;main&apos; if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>401</id>
	<key><![CDATA[Returns the value of various math constants. The constant argument must be one of the following: NaN, NEGATIVE_INFINITY, INFINITY, DOUBLE_MAX, DOUBLE_MIN, LONG_MAX, LONG_MIN, SHORT_MAX, SHORT_MIN, INTEGER_MAX, INTEGER_MIN, FLOAT_MAX, FLOAT_MIN, BYTE_MAX, BYTE_MIN, E, PI, PHI, C, or EULER [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>402</id>
	<key><![CDATA[Returns the source file that this key will store a value to in the Persistence Network. For instance, in your persistence.ini file, if you have the entry &quot;storage.test.**=json:///path/to/file.json&quot;, then reflect_value_source(&apos;storage.test.testing&apos;) would return &apos;json:///path/to/file.json&apos;. This is useful for debugging, as it will definitively trace back the source/destination of a value.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>403</id>
	<key><![CDATA[Returns true if the entity produces sounds]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>404</id>
	<key><![CDATA[Returns the current temperature at the location given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>405</id>
	<key><![CDATA[Given an int and a radix, returns a string representation of the integer value in the given base. A common use would be to output a hex or binary representation of a number, for instance. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>406</id>
	<key><![CDATA[Returns a color array for the color of the leather armor at the given slot. A CastException is thrown if this is not leather armor at that slot. The color array returned will look like: array(r: 0, g: 0, b: 0)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>407</id>
	<key><![CDATA[Returns the boolean value of a logical NOT for this argument. Operator syntax is also supported:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>408</id>
	<key><![CDATA[teamName, player, %s[%sscoreboard%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>409</id>
	<key><![CDATA[Sets the amount of air the specified living entity has remaining.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>410</id>
	<key><![CDATA[teamname, %s[%sscoreboard%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>411</id>
	<key><![CDATA[text, %s[%ssymbol%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>412</id>
	<key><![CDATA[Gets the mob&apos;s target if it has one, and returns the target&apos;s entityUUID. If there is no target, %s is returned instead. Not all mobs will have a returnable target.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>413</id>
	<key><![CDATA[Returns the arc cos of the number]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>414</id>
	<key><![CDATA[[%sworld%s]%s, x, z %s %s[%sworld%s]%s, locationArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>415</id>
	<key><![CDATA[Returns an array of strings containing the channels CommandHelper is listening on.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>416</id>
	<key><![CDATA[Enchantments]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>417</id>
	<key><![CDATA[Returns an array of the defined alias signatures (The part left of the = sign).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>418</id>
	<key><![CDATA[Sets the respawn location of a player. If player is omitted, the current player is used. The specified location should be the block below the respawn location. If forced is false, it will respawn the player next to that location only if a bed found is found there. (forced defaults to true)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>419</id>
	<key><![CDATA[Functions related to the management of trades and merchants. A trade is a special kind of recipe accessed through the merchant interface. A merchant is a provider of trades, which may or may not be attached to a Villager or Wandering Trader.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>420</id>
	<key><![CDATA[Returns the player&apos;s score for the given objective. A LengthException is thrown if the name is longer than 40 characters.Scoreboard defaults to &apos;main&apos; if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>421</id>
	<key><![CDATA[entityID]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>422</id>
	<key><![CDATA[Enables performance logging. The allow-profiling option must be set to true in your preferences file, and play-dirty mode must be active. If allow-profiling is set to false, a SecurityException is thrown. The debug filters are used by the performance logger, if you choose to filter through the events. See the documenation for more details on performance logging.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>423</id>
	<key><![CDATA[Adds a new objective to the scoreboard, throwing a CREScoreboardException if the name is already in use. The vanilla criteria names are DEATHCOUNT, HEALTH, PLAYERKILLCOUNT, TOTALKILLCOUNT, and DUMMY. You can put anything, but if none of the other values match, &apos;dummy&apos; will be used. Those values which are not &apos;dummy&apos; are server-managed. Throws a LengthException if the name is more than 16 characters. Scoreboard defaults to &apos;main&apos; if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>424</id>
	<key><![CDATA[Gives a player the specified item. Unlike set_pinv(), this does not specify a slot. The qty is distributed in the player&apos;s inventory, first filling up slots that have the same item type, up to the max stack size, then fills up empty slots, until either the entire inventory is filled, or the entire amount has been given. If the player&apos;s inv is full, the number of items that were not added is returned, which will be less than or equal to the quantity provided. Otherwise, returns 0. This function will not touch the player&apos;s armor slots however.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>425</id>
	<key><![CDATA[Permissions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>426</id>
	<key><![CDATA[Returns the time of the specified player, as an integer from 0 to 24000-1]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>427</id>
	<key><![CDATA[[%splayer%s]%s, permissionName]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>428</id>
	<key><![CDATA[regex, %s[%sstartFrom%s]%s, %s[%stype%s]%s %s regex, %s[%sstartFrom%s]%s, types]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>429</id>
	<key><![CDATA[Stops the current loop. If int is specified, and is greater than 1, the break travels that many loops up. So, if you had a loop embedded in a loop, and you wanted to break in both loops, you would call break(2). If this function is called outside a loop (or the number specified would cause the break to travel up further than any loops are defined), the function will fail. If no argument is specified, it is the same as calling break(1). This function has special compilation rules. The break number must not be dynamic, or a compile error will occur. An integer must be hard coded into the function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>430</id>
	<key><![CDATA[Sets up a location to be monitored for redstone changes. If a location is monitored, it will cause redstone_changed events to be triggered. By default, isMonitored is true, however, setting it to false will remove the previously monitored location from the list of monitors.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>431</id>
	<key><![CDATA[Appends any number of values to the underlying string builder. This is much more efficient than doing normal concatenation with a string when building a string in a loop. The underlying resource may be converted to a string via a cast, string(@res).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>432</id>
	<key><![CDATA[[%sworld%s]%s, gameRule, value]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>433</id>
	<key><![CDATA[var, %s[%svalue%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>434</id>
	<key><![CDATA[player, potionEffect, %s[%sstrength%s]%s, %s[%sseconds%s]%s, %s[%sambient%s]%s, %s[%sparticles%s]%s, %s[%sicon%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>435</id>
	<key><![CDATA[Opens a player&apos;s inventory, shown to the player specified&apos;s screen.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>436</id>
	<key><![CDATA[Sets a player&apos;s velocity. vector must be an associative array with x, y, and z keys defined (if magnitude is set, it is ignored). If the vector&apos;s magnitude is greater than 10, the command is cancelled, because the server won&apos;t allow the player to move faster than that. A warning is issued, and false is returned if this happens, otherwise, true is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>437</id>
	<key><![CDATA[[%sdirectory%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>438</id>
	<key><![CDATA[Spawns qty mob of one of the following types at location. qty defaults to 1, and location defaults to the location of the player. An array of the entity UUIDs spawned is returned. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>439</id>
	<key><![CDATA[Returns the display name of the player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>440</id>
	<key><![CDATA[name]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>441</id>
	<key><![CDATA[Functions to create and manage boss bars in Minecraft.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>442</id>
	<key><![CDATA[Removes the previously set runtime setting. If the setting wasn&apos;t already set, then a warning is issued, unless &apos;function.remove_runtime_setting.no_warn_on_removing_blank&apos; is set to true.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>443</id>
	<key><![CDATA[key, value]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>444</id>
	<key><![CDATA[Works exactly like array(), except the array created will be an associative array, even if the array has been created with no elements. This is the only use case where this is neccessary, vs using the normal array() function, or in the case where you assign sequential keys anyways, and the same array could have been created using array().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>445</id>
	<key><![CDATA[Yes]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>446</id>
	<key><![CDATA[Returns an associative array of all loaded functions. The keys of this array are the names of the classes containing the functions (which you know as the sections of the API page), and the values are arrays of the names of the functions within those classes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>447</id>
	<key><![CDATA[Returns a list of trades used by the specified merchant. Specifier can be the UUID of an entity or a virtual merchant ID.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>448</id>
	<key><![CDATA[Returns the player&apos;s current food level.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>449</id>
	<key><![CDATA[Returns the max size of the inventory specified. If the block or entity can&apos;t have an inventory, a FormatException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>450</id>
	<key><![CDATA[Returns the number of seconds until this entity stops being on fire, 0 if it already isn&apos;t.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>451</id>
	<key><![CDATA[Sets the name of the given mob. This automatically truncates if it is more than 64 characters.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>452</id>
	<key><![CDATA[[%sworld%s]%s, time]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>453</id>
	<key><![CDATA[Returns the entity age as an integer, represented by server ticks.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>454</id>
	<key><![CDATA[If a number is provided, it is assumed to be an entity, and if the entity supports inventories, it will be valid. Otherwise, if a location array is provided, it is assumed to be a block (chest, brewer, etc) and interpreted thusly. Depending on the inventory type, the max index will vary. If the index is too large, a RangeException is thrown, otherwise, the item at that location is returned as an item array, or %s, if no item is there. You can determine the inventory type (and thus the max index count) with get_inventory_type(). An itemArray, like the one used by pinv/set_pinv is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>455</id>
	<key><![CDATA[Runs the closure on the main thread later. If the function call is itself being run from the main thread, then the function still will not block, but it is not an error to call this from the main thread. If an exception is thrown from the closure, it is handled using the uncaught exception handler.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>456</id>
	<key><![CDATA[Sets the experience of a player within the current level, as a percentage, from 0 to 99. 100 resets the experience to zero and adds a level to the player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>457</id>
	<key><![CDATA[persistenceKey]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>458</id>
	<key><![CDATA[id, player]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>459</id>
	<key><![CDATA[Returns the hyperbolic cosine of the number]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>460</id>
	<key><![CDATA[[%splayer%s]%s, %s[%sarray%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>461</id>
	<key><![CDATA[Returns an array of virtual inventory ids.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>462</id>
	<key><![CDATA[Returns whether the given item is of the boolean datatype. Note that all datatypes can be used as booleans, however this function checks the specific datatype of the given item.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>463</id>
	<key><![CDATA[syncObject, code]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>464</id>
	<key><![CDATA[Returns a copy of the underlying engine&apos;s environment object. This is only useful to embedded scripting engines that are attempting to call back into MethodScript. The object returned is a CResource.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>465</id>
	<key><![CDATA[[%spropertyName%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>466</id>
	<key><![CDATA[[%splayer%s]%s, other]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>467</id>
	<key><![CDATA[Creates a (rain) storm if isStorming is true, stops a storm if isStorming is false. The second argument can be a world name or the duration in ticks of the given weather setting. The third argument allows specifying both a world and a duration. The second param is required to be the world if the function is run from console.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>468</id>
	<key><![CDATA[Returns the floor of any given number. For example, floor(3.8) returns 3, and floor(-1.1) returns 2]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>469</id>
	<key><![CDATA[Returns the xnor of the two values]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>470</id>
	<key><![CDATA[mobType, %s[%sqty%s]%s, %s[%slocation%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>471</id>
	<key><![CDATA[Using the built in permissions system, checks to see if the player has a particular permission. This is simply passed through to the permissions system. This function is only restricted if the player attempts to check another player&apos;s permissions. If run from the console or a CommandBlock, will always return true unless a value has been explicitly set for them.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>472</id>
	<key><![CDATA[val, %s[%sworkload%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>473</id>
	<key><![CDATA[Returns a UUID (also known as a GUID). Different types of UUIDs can be generated, by default, if no parameters are provided, a random uuid is returned (version 4). For full details on what exactly a uuid is, and what the different versions are, see %s. The arg varies depending on the type, some types do not require an argument, in which case, this parameter will be ignored. &lt;code&gt;type&lt;/code&gt; may be one of: - RANDOM - Returns a random UUID. This type takes 0 arguments. - NIL - Returns the nil UUID, that is 00000000-0000-0000-0000-000000000000. This type takes 0 arguments.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>474</id>
	<key><![CDATA[Shows a workbench to the current player, or a specified player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>475</id>
	<key><![CDATA[Sets a task to run every so often. This works similarly to set_timeout, except the task will automatically re-register itself to run again. Note that the resolution of the time is in ms, however, the server will only have a resolution of up to 50 ms, meaning that a time of 1-50ms is essentially the same as 50ms. The inital delay defaults to the same thing as timeInMS, that is, there will be a pause between registration and initial firing. However, this can be set to 0 (or some other number) to adjust how long of a delay there is before it begins.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>476</id>
	<key><![CDATA[array, index, %s[%sdefault%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>477</id>
	<key><![CDATA[Returns true or false if all the arguments are equal. Operator syntax is also supported: @a]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>478</id>
	<key><![CDATA[Returns the UUID of the user trading with the merchant, or %s if no one is.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>479</id>
	<key><![CDATA[procName]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>480</id>
	<key><![CDATA[name, setting]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>481</id>
	<key><![CDATA[Math]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>482</id>
	<key><![CDATA[Attempts to remove a player from a team, and returns true if successful, for false if the player was not part of the team.Scoreboard defaults to &apos;main&apos; if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>483</id>
	<key><![CDATA[Returns the nth-percentile across all the numbers in the set. The input may be an array of numbers, or individual numbers as arguments. A percentile is a measure indicating the value below which a given percentage of observations in a group of observations falls. For example, the 20th percentile is the value (or score) below which 20% of the observations may be found.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>484</id>
	<key><![CDATA[Updates the state for the specified boss bar. See create_bar() for available option keys and values for the optionsArray. If the second argument is a string, it&apos;ll use it to update the title. If it&apos;s a double, it&apos;ll use it to update the percentage filled (0.0 - 1.0).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>485</id>
	<key><![CDATA[Adds a recipe to the server and returns whether it was added or not. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>486</id>
	<key><![CDATA[Returns the md5 HMAC of the specified string using the provided key. This function is aware of and compatible with secure_string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>487</id>
	<key><![CDATA[slice]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>488</id>
	<key><![CDATA[Kills the command immediately, without completing it. A message is optional, but if provided, displayed to the user.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>489</id>
	<key><![CDATA[[%splayer%s]%s, entityUUID]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>490</id>
	<key><![CDATA[This class of functions provides methods for accessing various SQL servers.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>491</id>
	<key><![CDATA[location, %s[%sisMonitored%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>492</id>
	<key><![CDATA[id, %s[%stype/size%s]%s, %s[%stitle%s]%s, %s[%sinventory%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>493</id>
	<key><![CDATA[Returns x to the power of n. Operator syntax is also supported: @x ** @n]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>494</id>
	<key><![CDATA[Returns a double, read in as a 64 bit double, from the given position, or wherever the marker is currently at by default.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>495</id>
	<key><![CDATA[Strips all the color codes from a given string]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>496</id>
	<key><![CDATA[[%splayer%s]%s, locationArray, %s[%sforced%s]%s %s %s[%splayer%s]%s, x, y, z, %s[%sforced%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>497</id>
	<key><![CDATA[item]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>498</id>
	<key><![CDATA[Allows you to store a value, which can then be retrieved later. key must be a string containing only letters, numbers, underscores. Periods may also be used, but they form a namespace, and have special meaning. (See get_values())]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>499</id>
	<key><![CDATA[Executes an SQL query, and returns various data depending on the query type.  See the extended information for more details. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>500</id>
	<key><![CDATA[Provides methods for dealing with enchanted items]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>501</id>
	<key><![CDATA[ExecutionQueue]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>502</id>
	<key><![CDATA[Writes an int, interpreted as an 16 bit short, starting from the given position, or wherever the marker is currently at by default.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>503</id>
	<key><![CDATA[Kills the specified player, or the current player if a name is omitted.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>504</id>
	<key><![CDATA[var1, var2%s[%s, varX...%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>505</id>
	<key><![CDATA[Removes all potion effects from a player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>506</id>
	<key><![CDATA[teamName, array, %s[%sscoreboard%s]%s %s teamName, displayname, %s[%sscoreboard%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>507</id>
	<key><![CDATA[Returns an array where the keys are currently registered merchant IDs and the values are the corresponding window titles of those merchants.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>508</id>
	<key><![CDATA[Reverses an array in place. However, if the array is associative, throws a CastException, since associative arrays are more like a map.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>509</id>
	<key><![CDATA[Checks to see if this plaintext password does in fact hash to the hash specified. Unlike md5 or sha1, simply comparing hashes won&apos;t work. This function is aware of and compatible with secure_string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>510</id>
	<key><![CDATA[TaskHandling]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>511</id>
	<key><![CDATA[value, bitsToShift]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>512</id>
	<key><![CDATA[Returns if an entity is set to be breedable.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>513</id>
	<key><![CDATA[locationArray, effect, %s[%sradius%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>514</id>
	<key><![CDATA[Web]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>515</id>
	<key><![CDATA[Unlike floor and ceil, rounds the number to the nearest double that is equal to an integer. Precision defaults to 0, but if set to 1 or more, rounds decimal places. For instance, round(2.29, 1) would return 2.3. If precision is &amp;lt; 0, a RangeException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>516</id>
	<key><![CDATA[Gets the block data at the location in a string format. Forward compatibility is not ensured.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>517</id>
	<key><![CDATA[Returns an int, read in as a 32 bit int, from the given position, or wherever the marker is currently at by default.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>518</id>
	<key><![CDATA[Returns the compile date, in a millisecond unit time stamp, of when MethodScript was compiled, or %s, if that can&apos;t be computed for various reasons.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>519</id>
	<key><![CDATA[This function causes an exception to be thrown. The exceptionType may be any valid exception type.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>520</id>
	<key><![CDATA[Performance]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>521</id>
	<key><![CDATA[While the condition is true, the code is executed. break and continue work inside a dowhile, but continuing more than once is pointless, since the loop isn&apos;t inherently keeping track of any counters anyways. Breaking multiple times still works however.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>522</id>
	<key><![CDATA[Returns the sha256 HMAC of the specified string using the provided key. This function is aware of and compatible with secure_string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>523</id>
	<key><![CDATA[Converts an array into a YML encoded string. Only associative arrays are supported. prettyPrint defaults to false. Within the array, only primitives and arrays can be encoded.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>524</id>
	<key><![CDATA[Returns the player&apos;s food saturation level.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>525</id>
	<key><![CDATA[Returns the name for this player the last time they were on the server. Return %s if the player has never been on the server. This is not guaranteed to be their current player name. This is read directly from the player data file for offline players.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>526</id>
	<key><![CDATA[Modifies the underlying event object, if applicable. The documentation for each event will explain what parameters can be modified, and what their expected values are. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>527</id>
	<key><![CDATA[Sets the player&apos;s health. Health should be a double between 0 and their max health, which is 20.0 by default.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>528</id>
	<key><![CDATA[Writes the text to the system&apos;s std out. Unlike console(), this does not use anything else to format the output, though in many cases they will behave the same. However, colors and other formatting characters will not &quot;bleed&quot; through, so sys_out(color(RED) . &apos;This is red&apos;) will not cause the next line to also be red, so if you need to print multiple lines out, you should manually add \n to create your linebreaks, and only make one call to sys_out.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>529</id>
	<key><![CDATA[Returns whether or not the given procName is currently defined, i.e. if calling this proc wouldn&apos;t throw an exception.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>530</id>
	<key><![CDATA[locationArray, data, %s[%sphysics%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>531</id>
	<key><![CDATA[name, %s[%scriteria, [scoreboard%s]%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>532</id>
	<key><![CDATA[Removes the boss bar for all players.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>533</id>
	<key><![CDATA[Returns true if the extention is known to MethodScript and loaded. Like function_exists(), this function is resolved at compile time.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>534</id>
	<key><![CDATA[Dynamically creates an array slice, which can be used with array_get (or the [bracket notation]) to get a range of elements. cslice(0, 5) is equivalent to 0..5 directly in code, however with this function you can also do cslice(@var, @var), or other more complex expressions, which are not possible in static code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>535</id>
	<key><![CDATA[Returns an array of IDs for all entities in the given scope. With no args, this will return all entities loaded on the entire server. If the first argument is given and is a location, only entities in the chunk containing that location will be returned, or if it is a world only entities in that world will be returned. If all three arguments are given, only entities in the chunk with those coords will be returned. This can take chunk coords (ints) or location coords (doubles).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>536</id>
	<key><![CDATA[int1, int2, %s[%sint3...%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>537</id>
	<key><![CDATA[Returns the time of the specified world, as an integer from 0 to 24000-1]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>538</id>
	<key><![CDATA[Sets the value of the gamerule for the specified world. If world is not given the value is set for all worlds. Returns true if successful. gameRule can be ANNOUNCEADVANCEMENTS, COMMANDBLOCKOUTPUT, DISABLEELYTRAMOVEMENTCHECK, DODAYLIGHTCYCLE, DOENTITYDROPS, DOFIRETICK, DOLIMITEDCRAFTING, DOMOBLOOT, DOMOBSPAWNING, DOTILEDROPS, DOWEATHERCYCLE, KEEPINVENTORY, LOGADMINCOMMANDS, MAXCOMMANDCHAINLENGTH, MAXENTITYCRAMMING, MOBGRIEFING, NATURALREGENERATION, RANDOMTICKSPEED, REDUCEDDEBUGINFO, SENDCOMMANDFEEDBACK, SHOWDEATHMESSAGES, SPAWNRADIUS, SPECTATORSGENERATECHUNKS, or DISABLERAIDS.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>539</id>
	<key><![CDATA[Runs a command regardless of whether or not it is an alias or a builtin command. Essentially, this works like checking if(is_alias(@cmd)){ call_alias(@cmd) } else { run(@cmd) }. Be careful with this command, as like call_alias(), you could accidentally create infinite loops. The command must start with a / or this will throw a FormatException.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>540</id>
	<key><![CDATA[Adds a player to a team, given the team exists. This allows you to add fake players with up to 40 characters. The player will be removed from any other team on the same scoreboard. Scoreboard defaults to &apos;main&apos; if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>541</id>
	<key><![CDATA[array, %s[%sglue%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>542</id>
	<key><![CDATA[entityUUID, potionEffect, %s[%sstrength%s]%s, %s[%sseconds%s]%s, %s[%sambient%s]%s, %s[%sparticles%s]%s, %s[%sicon%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>543</id>
	<key><![CDATA[Returns an array of stack trace elements. This is the same stack trace that would be generated if one were to throw an exception, then catch it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>544</id>
	<key><![CDATA[Sets whether or not this player is allowed to fly.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>545</id>
	<key><![CDATA[Emits a system beep, on the system itself, not in game. This is only useful from cmdline.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>546</id>
	<key><![CDATA[[%sworld, [x, z%s]%s] %s %s[%slocationArray%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>547</id>
	<key><![CDATA[char]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>548</id>
	<key><![CDATA[array, %s[%snumber, [getKeys%s]%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>549</id>
	<key><![CDATA[player, url]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>550</id>
	<key><![CDATA[Contains various methods to make HTTP requests.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>551</id>
	<key><![CDATA[AccessModifier accessModifier, array%s objectModifiers, ObjectType objectType, string objectName, array%s superclasses, array%s interfaces, ? enumList, map%s elementList, array%s annotations, ClassType containingClass, string classComment, array%s genericParameters]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>552</id>
	<key><![CDATA[Sets the byte order that the specified byte array will use for all future gets/sets. By default, a byte array is Big Endian. If setLittleEndian is true, the byte array will be set to little endian, otherwise it will be set to big endian.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>553</id>
	<key><![CDATA[Returns true if the given entity is gliding.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>554</id>
	<key><![CDATA[Returns an associative array of the drop rate for each equipment slot. If the rate is 0, the equipment will not drop. If it is 1, it is guaranteed to drop.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>555</id>
	<key><![CDATA[Returns the results of a less than operation. Operator syntax is also supported: @a &amp;lt; @b]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>556</id>
	<key><![CDATA[colorArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>557</id>
	<key><![CDATA[Sets the player&apos;s compass target, and returns the old location.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>558</id>
	<key><![CDATA[An array of players banned on the server.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>559</id>
	<key><![CDATA[pattern, replacement, subject]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>560</id>
	<key><![CDATA[Works in reverse of pgive_item(), but returns the number of items actually taken, which will be from 0 to qty. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>561</id>
	<key><![CDATA[Writes the text to the system&apos;s std err, but does not automatically add a newline at the end. Unlike console(), this does not use anything else to format the output, though in many cases they will behave the same. Unlike other print methdods, colors and other formatting characters WILL &quot;bleed&quot; through, so print_err(color(RED) . &apos;This is red&apos;) will also cause the next line to also be red, so if you need to print multiple lines out, you should manually reset the color with print_out(color(RESET)), or use sys_err.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>562</id>
	<key><![CDATA[Returns a boolean stating if the other player can see this player or not. This is the raw access function, you probably shouldn&apos;t use this, as the CommandHelper vanish api functions will probably be easier to use.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>563</id>
	<key><![CDATA[[%snamespace, ...,%s]%s key, value]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>564</id>
	<key><![CDATA[scoreboard, %s[%sify%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>565</id>
	<key><![CDATA[Returns true if the given player is experiencing a storm, as set by set_pstorm(). (ignores world weather)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>566</id>
	<key><![CDATA[Replaces all the colorizable text in the string. For instance, colorize(&apos;&amp;aText&apos;) would be equivalent to (color(&apos;a&apos;).&apos;Text&apos;). By default, the symbol is &apos;&amp;&apos;, but that can be any arbitrary string that you specify. If text is not a string, that value is simply returned. If you need to &quot;escape&quot; a symbol, (that is have a literal symbol followed by a letter that is a valid color) just repeat the symbol twice, for instance &apos;&amp;&amp;c&apos; would return a literal &apos;&amp;c&apos; instead of a red modifier.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>567</id>
	<key><![CDATA[This class contains methods for dealing with time and server scheduling.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>568</id>
	<key><![CDATA[[%sbinary%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>569</id>
	<key><![CDATA[Removes a task from the front of the queue. That is, the next task that would have been run is removed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>570</id>
	<key><![CDATA[Returns the id of the scoreboard a player is assigned to. If it is not already cached, it will be added using the player&apos;s name. Using this method, it should be possible to import scoreboards created by other plugins.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>571</id>
	<key><![CDATA[Plays the specified effect at the given location for all players within the radius (or 64 by default). The effect can be one of the following: DRAGON_BREATH, END_GATEWAY_SPAWN, ENDER_SIGNAL, MOBSPAWNER_FLAMES, POTION_BREAK, SMOKE, VILLAGER_PLANT_GROW, ANVIL_BREAK, ANVIL_LAND, ANVIL_USE, BAT_TAKEOFF, BLAZE_SHOOT, BOW_FIRE, BREWING_STAND_BREW, CHORUS_FLOWER_DEATH, CHORUS_FLOWER_GROW, CLICK1, CLICK2, DOOR_CLOSE, DOOR_TOGGLE, ENDERDRAGON_GROWL, ENDERDRAGON_SHOOT, ENDEREYE_LAUNCH, EXTINGUISH, FENCE_GATE_CLOSE, FENCE_GATE_TOGGLE, FIREWORK_SHOOT, GHAST_SHOOT, GHAST_SHRIEK, IRON_DOOR_CLOSE, IRON_DOOR_TOGGLE, IRON_TRAPDOOR_CLOSE, IRON_TRAPDOOR_TOGGLE, PORTAL_TRAVEL, RECORD_PLAY, STEP_SOUND, TRAPDOOR_CLOSE, TRAPDOOR_TOGGLE, ZOMBIE_CHEW_WOODEN_DOOR, ZOMBIE_CHEW_IRON_DOOR, ZOMBIE_DESTROY_DOOR, WITHER_BREAK_BLOCK, WITHER_SHOOT, ZOMBIE_CONVERTED_VILLAGER, or ZOMBIE_INFECT. Additional data can be supplied with the syntax EFFECT:DATA. The STEP_SOUND effect takes an int of a legacy block id, SMOKE takes an int as a direction (4 is upwards), and POTION_BREAK takes an int as a color.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>572</id>
	<key><![CDATA[returns whether the entity is touching the ground]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>573</id>
	<key><![CDATA[Returns true if commandhelper is listening to the given plugin channel.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>574</id>
	<key><![CDATA[UUID]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>575</id>
	<key><![CDATA[var, %s[%sx%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>576</id>
	<key><![CDATA[[%sparams...%s]%s, code]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>577</id>
	<key><![CDATA[array%s %s number input...]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>578</id>
	<key><![CDATA[Works in reverse of pgive_enderchest_item(), but returns the number of items actually taken, which will be from 0 to qty. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>579</id>
	<key><![CDATA[message, %s[%spermission%s]%s %s message, %s[%srecipients%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>580</id>
	<key><![CDATA[Returns the name of the current user. This is retrieved in a platform specific manner, and should be cross compatible in all scripts. Null is returned if this function call is non-sensical in the current platform]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>581</id>
	<key><![CDATA[This class contains the functions use to communicate with other plugins and the server in general.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>582</id>
	<key><![CDATA[array, %s[%sprettyPrint%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>583</id>
	<key><![CDATA[ResourceManager]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>584</id>
	<key><![CDATA[Gets a location array for the highest block at a specific x and z column. If a location array is specified, the y coordinate is ignored.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>585</id>
	<key><![CDATA[Returns whether or not the given item is a double. Note that numeric strings and integers can usually be used as a double, however this function checks the actual datatype of the item. If you just want to see if an item can be used as a number, use is_numeric() instead.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>586</id>
	<key><![CDATA[Returns all the values in a particular namespace as an associative array(key: value, key: value). Only full namespace matches are considered, so if the key &apos;users.data.username.hi&apos; existed in the database, and you tried get_values(&apos;users.data.user&apos;), nothing would be returned. The last segment in a key is also considered a namespace, so &apos;users.data.username.hi&apos; would return a single value (in this case).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>587</id>
	<key><![CDATA[Sets the list of trades the specified merchant can use to the provided array of TradeArrays. The specifier can be the UUID of a physical entity or the ID of a user-created virtual merchant. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>588</id>
	<key><![CDATA[os, command, %s[%soptions%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>589</id>
	<key><![CDATA[world_name, paramArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>590</id>
	<key><![CDATA[valueArray, closure]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>591</id>
	<key><![CDATA[If the first argument evaluates to a true value, the second argument is returned, otherwise the third argument is returned. If there is no third argument, it returns %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>592</id>
	<key><![CDATA[Checks if the array contains a value of the same datatype and value as testValue. For associative arrays, only the values are searched, the keys are ignored. If you need to check for the existence of a particular key, use array_index_exists().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>593</id>
	<key><![CDATA[locationArray, %s[%scmd%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>594</id>
	<key><![CDATA[plaintext, hash]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>595</id>
	<key><![CDATA[Hashes the value, and returns an int representing that value.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>596</id>
	<key><![CDATA[Writes the contents of the source_byte_array into this byte array, starting at pos, or wherever the marker is currently at by default.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>597</id>
	<key><![CDATA[Returns the number of ticks remaining that this player will be on fire for. If the player is not on fire, 0 is returned, which evaluates as false.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>598</id>
	<key><![CDATA[Sets the whitelist flag of the specified player. This will work with offline players, but the name must be exact. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>599</id>
	<key><![CDATA[Returns the compile date of the current script, as a unix time stamp in milliseconds.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>600</id>
	<key><![CDATA[locationArray, %s[%sname%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>601</id>
	<key><![CDATA[Runs a shell command. &lt;code&gt;command&lt;/code&gt; can either be a string or an array of string arguments, which are run as an external process. Requires the allow-shell-commands option to be enabled in preferences, or run from command line, otherwise an InsufficientPermissionException is thrown. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>602</id>
	<key><![CDATA[[%splayer, [slot%s]%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>603</id>
	<key><![CDATA[Works like array_contains, except the comparison ignores case.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>604</id>
	<key><![CDATA[Exits the program. If this is being run from the command line, works by exiting the interpreter, with  the specified exit code (defaulting to 0). If this is being run from in-game, works just like die().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>605</id>
	<key><![CDATA[locationArray, %s[%sindex%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>606</id>
	<key><![CDATA[Returns whether the specified living entity can pick up items.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>607</id>
	<key><![CDATA[toStrip]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>608</id>
	<key><![CDATA[Calls the closure on each element of an array, and returns an array that contains the results.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>609</id>
	<key><![CDATA[This is not guaranteed to work reliably| %sYes]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>610</id>
	<key><![CDATA[Returns true if the string needle is found anywhere within the string haystack. This is functionally equivalent to string_postion(@haystack, @needle)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>611</id>
	<key><![CDATA[Gets the inventory for the specified player&apos;s enderchest, or the current player if none specified. If the index is specified, only the slot given will be returned. The index of the array in the array is 0 - 26, which corresponds to the slot in the enderchest inventory. If there is no item at the slot specified, %s is returned. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>612</id>
	<key><![CDATA[Changes a sign&apos;s text only for the specified player. This change does not persist. This can be used to &quot;fake&quot; sign text for a player. LineArray, if used, must have 4 elements.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>613</id>
	<key><![CDATA[array, %s[%scomment%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>614</id>
	<key><![CDATA[str %s Sizeable]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>615</id>
	<key><![CDATA[Creates a virtual inventory and holds it under the specified id. The string id should not be a UUID. If the id is already in use, an IllegalArgumentException will be thrown. You can use this id in other inventory functions to modify the contents, among other things. If a size is specified instead of a type, it is rounded up to the nearest multiple of 9. Size cannot be higher than 54. A title for the top of the inventory may be given, but it will use the default for that that inventory type if %s is specified. An optional inventory array may be specified, otherwise the inventory will start empty. Available inventory types: BREWING, CHEST, DISPENSER, DROPPER, ENDER_CHEST, FURNACE, HOPPER, PLAYER, WORKBENCH, ANVIL, SHULKER_BOX, BARREL, BLAST_FURNACE or SMOKER]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>616</id>
	<key><![CDATA[InventoryManagement]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>617</id>
	<key><![CDATA[pattern, subject, %s[%slimit%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>618</id>
	<key><![CDATA[Weather]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>619</id>
	<key><![CDATA[Returns an array of entries from banned-ips.txt.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>620</id>
	<key><![CDATA[Returns the name of the item. For now, only works with variables. For instance, nameof(@var) returns the string &quot;@var&quot;. This is useful for a%sing hardcoding of strings of items that are refactorable. This allows tools to properly refactor, without needing to manually update strings that contain the names of variables or other refactorable items. This is a meta function, and is fully resolved at compile time.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>621</id>
	<key><![CDATA[DataTransformations]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>622</id>
	<key><![CDATA[closure, %s[%squeue%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>623</id>
	<key><![CDATA[Provides the ability for finding out information about installed extensions, including events and functions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>624</id>
	<key><![CDATA[Cmdline]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>true</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>625</id>
	<key><![CDATA[ID, title]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>626</id>
	<key><![CDATA[enables or disables the entity AI.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>627</id>
	<key><![CDATA[Returns whether or not the first entity can have the other entity in an unimpeded line of sight, ignoring the direction it&apos;s facing. For instance, for players this mean that it can have the other entity on its screen and that this one is not hidden by opaque blocks. This uses the same algorithm that hostile mobs use to find the closest player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>628</id>
	<key><![CDATA[Consumes an event, so that lower priority handlers don&apos;t even recieve the event. Monitor level handlers will still recieve it, however, and they can check to see if the event was consumed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>629</id>
	<key><![CDATA[Returns whether or not the underlying event is cancelled or not. If the event is not cancellable in the first place, false is returned. If called from outside an event, a BindException is thrown]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>630</id>
	<key><![CDATA[proc_name, array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>631</id>
	<key><![CDATA[This class contains functions that provide a way to manipulate arrays. To create an array, use the %sarray%s function. For more detailed information on array usage, see the page on [[%s|arrays]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>632</id>
	<key><![CDATA[[%sextensionName%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>633</id>
	<key><![CDATA[Returns the unix time stamp, in milliseconds, that this player was last seen on this server, or 0 if they never were. The player argument can be a UUID or a name. But if given a name, it must be exact.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>634</id>
	<key><![CDATA[[%sargs...%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>635</id>
	<key><![CDATA[This class contains functions for resource management. This entire class of functions WILL be deprecated at some point in the future, so don't rely too heavily on it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>636</id>
	<key><![CDATA[ExtensionMeta]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>637</id>
	<key><![CDATA[Returns the contents of the system clipboard. Can only be used in cmdline mode. Flavor defaults to %s, and is currently unused. Only strings are currently supported. If a string version of the clipboard contents cannot be parsed, a FormatException is thrown. If the platform doesn&apos;t support clipboard operations, an UnsupportedOperationException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>638</id>
	<key><![CDATA[path]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>639</id>
	<key><![CDATA[[%sentity[, projectile%s]%s] %s player, projectile, target%s[%s, speed%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>640</id>
	<key><![CDATA[Gets the player list footer for a player. This is the text that appears below the player list that appears when hitting the tab key.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>641</id>
	<key><![CDATA[objectiveName, name, %s[%sscoreboard%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>642</id>
	<key><![CDATA[Returns a list of absolute paths of files whose name matches the given regex, searching recursively. Only available in cmdline mode. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>643</id>
	<key><![CDATA[Returns an array of scoreboard tags for this entity.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>644</id>
	<key><![CDATA[Gets all players currently viewing this inventory. The specifier can be an entity UUID, block location array, or virtual inventory id.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>645</id>
	<key><![CDATA[Sets the id of the block at the x y z coordinates specified. The id must be an integer or a blocktype identifier similar to the type returned from get_block_at (eg. &quot;0:0&quot;). If the meta value is not specified, 0 is used. If world isn&apos;t specified, the current player&apos;s world is used. Physics (which defaults to true) specifies whether or not to update the surrounding blocks when this block is set. (deprecated for set_block())]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>646</id>
	<key><![CDATA[Gets or sets the direction the player is facing. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>647</id>
	<key><![CDATA[Gets an array of all currently loaded chunks for a world. The current player&apos;s world is used if one is not provided. The chunk objects are associative arrays with the keys: x, z, and world.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>648</id>
	<key><![CDATA[Provides a switch statement. If none of the conditions match, and no default is provided, %s is returned. See the documentation on [[%s|Logic]] for more information. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>649</id>
	<key><![CDATA[array, boolean closure(key, value)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>650</id>
	<key><![CDATA[[%splayer, [slot%s]%s], array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>651</id>
	<key><![CDATA[Returns a list of all defined compiler options, which can be set using the compilerOptions file option]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>652</id>
	<key><![CDATA[Clears out &quot;session&quot; cookies, that is cookies that weren&apos;t set with an expiration (which translates to 0 in an individual cookie).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>653</id>
	<key><![CDATA[from, to]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>654</id>
	<key><![CDATA[Returns whether the given player has ever been on this server. The player argument can be a UUID or a name. But if given a name, it must be exact.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>655</id>
	<key><![CDATA[commandname, closure]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>656</id>
	<key><![CDATA[Allows scripts to store data from execution to execution. See the guide on [[%s|persistence]] for more information. In all the functions, you may send multiple arguments for the key, which will automatically be concatenated with a period (the namespace separator). No magic happens here, you can put periods yourself, or combine manually namespaced values or automatically namespaced values with no side effects. All the functions in the Persistence API are threadsafe (though not necessarily process safe).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>657</id>
	<key><![CDATA[Returns an array with all the keys of the specified array at which the specified value is equal. That is, for the array(1, 2, 2, 3), if value were 2, would return array(1, 2). If the value cannot be found in the array at all, an empty array will be returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>658</id>
	<key><![CDATA[specifier, itemArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>659</id>
	<key><![CDATA[Persistence]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>660</id>
	<key><![CDATA[If an empty array is provided, a IndexOverflowException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>661</id>
	<key><![CDATA[Returns true if all the values are equal to each other, while ignoring case.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>662</id>
	<key><![CDATA[Sets the shooter of the given projectile. This can be an entity UUID, dispenser location array (throws CastException if not a dispenser), or %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>663</id>
	<key><![CDATA[Crypto]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>664</id>
	<key><![CDATA[Displays a message on the specified players screen, similar to msg, but targets a specific user.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>665</id>
	<key><![CDATA[unicode]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>666</id>
	<key><![CDATA[specifier, slot]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>667</id>
	<key><![CDATA[Returns whether or not this event has been consumed. Usually only useful for Monitor level handlers, it could also be used for highly robust code, as an equal priority handler could have consumed the event, but this handler would still recieve it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>668</id>
	<key><![CDATA[Frees the given resource. This should ALWAYS be called at some point after creating a resource with res_create_resource, once you are done with the resource.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>669</id>
	<key><![CDATA[[%splayer%s]%s, flight]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>670</id>
	<key><![CDATA[Gets the specified art at the given location. If the item at the specified location isn&apos;t a painting, an [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>671</id>
	<key><![CDATA[func1, %s[%sfunc2...%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>672</id>
	<key><![CDATA[teamname, player, %s[%sscoreboard%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>673</id>
	<key><![CDATA[PluginMeta]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>674</id>
	<key><![CDATA[Sets the specified entity&apos;s health as a percentage, where 0 kills it and 100 gives it full health. An exception is thrown if the entity by that UUID doesn&apos;t exist or isn&apos;t a LivingEntity.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>675</id>
	<key><![CDATA[Provides common cryptographic functions. Many functions in this class are aware of and compatible with secure_string (where specified in the function documentation). In these cases, if the argument passed in is a secure_string, it is first decrypted and the underlying string is used rather than the default string value "**secure string**".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>676</id>
	<key><![CDATA[char_from_unicode(0x1234). Despite the name, certain unicode escapes may return multiple characters, so there is no guarantee that length(char_from_unicode(@val)) will equal 1.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>677</id>
	<key><![CDATA[Queues up a non-disruptive sleep at the end of the queue. This task will stall the execution thread for x milliseconds.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>678</id>
	<key><![CDATA[[%splayer%s]%s, %s[%sdashless%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>679</id>
	<key><![CDATA[x, y, z, id, %s[%sworld%s]%s %s[%sphysics%s]%s %s locationArray, id, %s[%sphysics%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>680</id>
	<key><![CDATA[If true, applies glowing effect to the entity]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>681</id>
	<key><![CDATA[Shuts down the minecraft server instance.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>682</id>
	<key><![CDATA[Returns a new string, given the byte array encoding provided. The encoding defaults to UTF-8, but may be specified. A FormatException is thrown if the encoding type is invalid.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>683</id>
	<key><![CDATA[objectiveName, array, %s[%sscoreboard%s]%s %s objectiveName, displayname, %s[%sscoreboard%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>684</id>
	<key><![CDATA[taskType, id]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>685</id>
	<key><![CDATA[Sets the ban flag for the specified player. This will work with offline players, but the name must be exact. When banning, a reason message may be provided that the player will see when attempting to login. An optional source may also be provided that indicates who or what banned the player. At this time, this function only works with the vanilla ban system. If you use a third party ban system, you should instead run the command for that plugin instead. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>686</id>
	<key><![CDATA[Returns the bitwise NOT of the given value]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>687</id>
	<key><![CDATA[Loads a chunk for a world using the x and z coordinates. The current player&apos;s world is used if one isn&apos;t provided.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>688</id>
	<key><![CDATA[ArrayHandling]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>689</id>
	<key><![CDATA[Writes an int, interpreted as an 8 bit byte, starting from the given position, or wherever the marker is currently at by default.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>690</id>
	<key><![CDATA[[%splayer%s]%s, locationArray, block]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>691</id>
	<key><![CDATA[Manually triggers bound events. The event object passed to this function is  sent directly as-is to the bound events. Check the documentation for each event to see what is required. No checks will be done on the data here, but it is not recommended to fail to send all parameters required. If serverWide is true, the event is triggered directly in the server, unless it is a CommandHelper specific event, in which case, serverWide is irrelevant. Defaults to false, which means that only CommandHelper code will receive the event.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>692</id>
	<key><![CDATA[Performs a deep clone on an array (as opposed to a shallow clone). This is useful for multidimensional arrays. See the examples for more info.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>693</id>
	<key><![CDATA[[%splayer%s]%s, itemSlot]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>694</id>
	<key><![CDATA[Scheduling]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>695</id>
	<key><![CDATA[Statistics]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>696</id>
	<key><![CDATA[Returns whether or not the player is sneaking.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>697</id>
	<key><![CDATA[variableName, value]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>698</id>
	<key><![CDATA[[%splayer,%s]%s inventorySlot]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>699</id>
	<key><![CDATA[player, %s[%slabel%s]%s, script]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>700</id>
	<key><![CDATA[Resets all scores for a player tracked by the given scoreboard. This means they will not be show up on any displays. Scoreboard defaults to &apos;main&apos; if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>701</id>
	<key><![CDATA[ivariable]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>702</id>
	<key><![CDATA[Returns whether or not the item is convertable to a string. Everything but arrays can be used as strings.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>703</id>
	<key><![CDATA[Closes the inventory of the current player, or of the specified player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>704</id>
	<key><![CDATA[Sets the player&apos;s cooldown time for the specified item type. The cooldown must be a positive integer representing server ticks.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>705</id>
	<key><![CDATA[Cancels the event (if applicable). If the event is not cancellable, or is already set to the specified cancelled state, nothing happens. If called from outside an event handler, a BindException is thrown. By default, state is true, but you can uncancel an event (if possible) by calling cancel(false).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>706</id>
	<key><![CDATA[Executes the given closure, expanding the value array as individual arguments to the closure. If there are no arguments to be sent to the closure, an empty array can be sent. If the closure returns a value with return(), then that value will be returned with execute. Otherwise, %s is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>707</id>
	<key><![CDATA[Sets the player&apos;s score for the given objective. The name can be anything, not just player names. A LengthException is thrown if it&apos;s too long. The max length may differ based on server implementation, but will probably be 128.Scoreboard defaults to &apos;main&apos; if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>708</id>
	<key><![CDATA[Teleports the entity to the given location and returns whether the action was successful. Note this can set both location and direction.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>709</id>
	<key><![CDATA[byte_array, %s[%spos%s]%s, %s[%sencoding%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>710</id>
	<key><![CDATA[Returns an array of all the player names of all the online players on the server. If world is given only the name of the players in this world will be returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>711</id>
	<key><![CDATA[Mostly simulates a block break at a location. Does not trigger an event.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>712</id>
	<key><![CDATA[Regex]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>713</id>
	<key><![CDATA[Checks to see if the specified array has an element at index. If more than one index is specified, then it recursively checks down nested arrays.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>714</id>
	<key><![CDATA[URL Encodes the parameter given. This escapes all special characters per the x-www-form-urlencoded format.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>715</id>
	<key><![CDATA[string1, string2]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>716</id>
	<key><![CDATA[Reduces an array to a single value. This works in reverse of array_reduce(). This is useful for, for instance, summing the values of an array. The previously calculated value, then the previous value of the array are sent to the closure, which is expected to return a value, based on the two values, which will be sent again to the closure as the new calculated value. If the array is empty, %s is returned, and if the array has exactly one value in it, only that value is returned. Associative arrays are supported, but the order is based on the key order, which may not be as expected. The keys of the array are ignored.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>717</id>
	<key><![CDATA[Returns an array of every player who has played on this server.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>718</id>
	<key><![CDATA[Sets the name of the Command Block at the given location.If no name is given or name is %s, the Command Block&apos;s name is reset to @.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>719</id>
	<key><![CDATA[Returns a stored value stored with store_value. If the key doesn&apos;t exist in storage, %s is returned. On a more detailed note: If the value stored in the persistence database is not actually a construct, then %s is also returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>720</id>
	<key><![CDATA[Returns the boolean value of a logical AND across all arguments. Uses lazy determination, so once an argument returns false, the function returns. Operator syntax is supported: @a &amp;&amp; @b]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>721</id>
	<key><![CDATA[Locks the specified event parameter(s), or all of them, if specified with no arguments. Locked parameters become read only for lower priority event handlers.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>722</id>
	<key><![CDATA[Sets the entity for the player to spectate. If set to %s, the spectator will stop following an entity. If the player is not in spectator mode an IllegalArgumentException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>723</id>
	<key><![CDATA[Iterates across an array, calling the closure for each value of the array. The closure should accept two arguments, the key and the value. This method can be used in some code to increase readability, to increase re-usability, or keep variables created in a loop in an isolated scope. Note that this runs at approximately the same speed as a for loop, which is probably slower than a foreach loop. Any values returned from the closure are silently ignored. Returns a reference to the original array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>724</id>
	<key><![CDATA[Sets the level of a player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>725</id>
	<key><![CDATA[Attempts to clear all registered commands on the server. Note that this probably has some special limitations, but they are a bit unclear as to what commands can and cannot be unregistered.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>726</id>
	<key><![CDATA[Returns a new construct that has been cast to an double. This function will throw a CastException if is_numeric would return false for this item, but otherwise, it will be cast properly.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>727</id>
	<key><![CDATA[commandname]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>728</id>
	<key><![CDATA[array, index, value]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>729</id>
	<key><![CDATA[tryBlock, %s[%scatchVariable, catchBlock%s]%s+, %s[%scatchBlock%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>730</id>
	<key><![CDATA[url, callback %s url, settings]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>731</id>
	<key><![CDATA[Given an enchantment name and an item type, returns whether or not that item can be enchanted with that enchantment. Throws an EnchantmentException if the name is not a valid enchantment type.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>732</id>
	<key><![CDATA[These functions allow you to echo information to the screen]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>733</id>
	<key><![CDATA[id, %s[%soptionsArray%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>734</id>
	<key><![CDATA[Writes the first character of the string, interpreted as an 32 bit char, starting from the given position, or wherever the marker is currently at by default. If the string is empty, a \0 is written instead.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>735</id>
	<key><![CDATA[Changes a block temporarily for the specified player. This can be used to &quot;fake&quot; blocks for a player. These illusory blocks will disappear when the client updates them, most often by clicking on them or reloading the chunks. A block type or blockdata format is supported. (see set_blockdata_string())]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>736</id>
	<key><![CDATA[Returns true if this name is a valid enchantment type.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>737</id>
	<key><![CDATA[This is a compiler construct, and is not normally used directly. It is created via double quoted strings.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>738</id>
	<key><![CDATA[Returns an array of potion effects that are currently active on a given player. The array can contain potion effect objects, with the key defining the type of potion effect. The arrays contain the following fields: &quot;id&quot;, &quot;strength&quot;, &quot;seconds&quot; remaining, whether the effect is &quot;ambient&quot;, whether &quot;particles&quot; are enabled, and whether the &quot;icon&quot; is shown to the player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>739</id>
	<key><![CDATA[Returns true if the function is known to MethodScript. This is a special function; it is resolved at compile time, and allows for conditional uses of functions that may or may not exist, such as functions that might or might not be loaded in an extension, or from different versions. This is useful for shared code in environments where an extension may or may not be available, or an older version of MethodScript. if(function_exists(&apos;my_extension_function&apos;)){ my_extension_function() } can then be used to selectively &quot;bypass&quot; the compiler restrictions that would normally cause a fatal compile error, since that function is missing. Therefore, you can wrap extension related code around extension specific blocks, and make that code portable to other installations that may not have the extension installed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>740</id>
	<key><![CDATA[Returns the ceiling of any given number. For example, ceil(3.2) returns 4, and ceil(-1.1) returns -1]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>741</id>
	<key><![CDATA[F %s yaw, pitch %s player, F %s player, yaw, pitch %s player %s &lt;none&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>742</id>
	<key><![CDATA[This class provides various methods to control script data and program flow.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>743</id>
	<key><![CDATA[Gets a player&apos;s fly speed. The speed will be between -1.0 and 1.0.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>744</id>
	<key><![CDATA[Returns the name of the inventory specified. If the block or entity can&apos;t have an inventory or a name, an IllegalArgumentException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>745</id>
	<key><![CDATA[Returns a string formatted to the given formatString specification, using the parameters passed in. Locale should be a string in format, for instance, en_US, nl_NL, no_NO... Which locales are available depends on your system. Use %s to use the system&apos;s locale. The formatString should be formatted according to [%s this standard], with the caveat that the parameter types are automatically cast to the appropriate type, if possible. Calendar/time specifiers, (t and T) expect an integer which represents unix time, but are otherwise valid. All format specifiers in the documentation are valid.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>746</id>
	<key><![CDATA[Returns if PVP is allowed in the world.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>747</id>
	<key><![CDATA[[%splayer%s]%s, time, %s[%srelative%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>748</id>
	<key><![CDATA[Returns an informational list of all valid enchantment names. Note that this will simply cover all enchantment types, but may not be a comprehensive list of names that can be accepted, there may be more, however, the list returned here is &quot;comprehensive&quot; and &quot;official&quot;. Additionally, this may vary from server type to server type.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>749</id>
	<key><![CDATA[[%splayer%s]%s, locationArray %s %s[%splayer%s]%s, x, y, z]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>750</id>
	<key><![CDATA[address, banned]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>751</id>
	<key><![CDATA[Encodes an array into an INI format output. An associative array is expected, and a format exception is thrown if it is a normal array. The comment is optional, but if provided will be added to the header of the returned string. Inner arrays cannot be stored, and will throw a CastException if attempted. Nulls are encoded as an empty string, so when reading the value back in, the difference between &apos;&apos; and %s is lost. All values are stored as strings, so if 1 is stored, it will be returned as a string &apos;1&apos;. This is a limitation of the ini format, as it is expected that the code that reads the ini knows what the type of the data is anticipated, not the data itself.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>752</id>
	<key><![CDATA[[%splayer%s]%s, specifier]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>753</id>
	<key><![CDATA[Resets all recipes to the default recipes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>754</id>
	<key><![CDATA[specifier, index, itemArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>755</id>
	<key><![CDATA[profile, query, %s[%sparameters...%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>756</id>
	<key><![CDATA[x, z, %s[%sworld%s]%s, biome %s locationArray, biome]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>757</id>
	<key><![CDATA[Returns whether another entity, like an arrow, will collide with this mob.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>758</id>
	<key><![CDATA[string selector, array raw]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>759</id>
	<key><![CDATA[Sandbox]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>760</id>
	<key><![CDATA[[%splayerName%s]%s, newDisplayName]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>761</id>
	<key><![CDATA[Returns a location array with the coordinates of the block the player has highlighted in their crosshairs. If player is omitted, the current player is used. If the block is too far, a RangeException is thrown. An array of block types to be considered transparent can be supplied, otherwise only air will be considered transparent. Providing an empty array will cause air to be considered a potential target, allowing a way to get the block containing the player&apos;s head.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>762</id>
	<key><![CDATA[Unloads a world, and saves it if save is true (defaults true), and returns whether or not the operation was successful.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>763</id>
	<key><![CDATA[Returns if the given projectile should bounce when it hits something.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>764</id>
	<key><![CDATA[procName, %s[%sparams...%s]%s, procCode]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>765</id>
	<key><![CDATA[entityUUID, healthPercent]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>766</id>
	<key><![CDATA[Returns an all lower case version of str]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>767</id>
	<key><![CDATA[[%sobject%s]%s, key %s object, key, %s[%splugin%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>768</id>
	<key><![CDATA[Subtracts x from var, and stores the new value. Equivalent to var-- in other languages. Expects ivar to be a variable, then returns a copy of the old ivar, , or, if var is a constant number, simply adds x to it, and returns the new number. Operator syntax is also supported: @var--]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>769</id>
	<key><![CDATA[type, %s[%sdata%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>770</id>
	<key><![CDATA[locationArray, %s[%soptionsArray%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>771</id>
	<key><![CDATA[array, %s[%ssortType%s]%s, closure(array)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>772</id>
	<key><![CDATA[Returns true if first array is a subset of second array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>773</id>
	<key><![CDATA[Concatenates any number of arguments together, and returns a string]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>774</id>
	<key><![CDATA[Returns a new byte array primitive, which can be operated on with the ba_ series of functions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>775</id>
	<key><![CDATA[Runs a shell command. &lt;code&gt;command&lt;/code&gt; can be either a string, or array of string arguments. This works mostly like %s however, it buffers then returns the output for sysout once the process is completed, and throws a ShellException with the exception message set to the syserr output if the process exits with an exit code that isn&apos;t the expectedExitCode, which defaults to 0. This is useful for simple commands that return output and don&apos;t need very complicated usage, and failures don&apos;t need to check the exact error code. If the underlying command throws an IOException, it is passed through. Requires the allow-shell-commands option to be enabled in preferences, or run from command line, otherwise an InsufficientPermissionException is thrown. Options is an associative array which expects zero or more of the following options: expectedErrorCode - The expected error code indicating successful command completion. Defaults to 0. workingDir - Sets the working directory for the sub process. By default %s, which represents the directory of this script. If the path is relative, it is relative to the directory of this script.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>776</id>
	<key><![CDATA[[%splayer%s]%s, downFall]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>777</id>
	<key><![CDATA[Given a location array, returns an array of 4 strings of the text in the sign at that location. If the location given isn&apos;t a sign, then a RangeException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>778</id>
	<key><![CDATA[Does a lookup to return the data value of a name. For instance, returns 1 for &apos;stone&apos;. If the data value cannot be found, %s is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>779</id>
	<key><![CDATA[Returns true if using call_alias with this cmd would trigger an alias.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>780</id>
	<key><![CDATA[specifier, invArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>781</id>
	<key><![CDATA[entityUUID, amount, %s[%ssourceEntityUUID%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>782</id>
	<key><![CDATA[Returns the color modifier given a color name. If the given color name isn&apos;t valid, white is used instead. The list of valid colors is: §0, §1, §2, §3, §4, §5, §6, §7, §8, §9, §a, §b, §c, §d, §e, §f, §k, §l, §m, §n, §o, or §r, in addition the integers 0-15 will work, or the hex numbers from 0-F, and k, l, m, n, o, and r, which represent styles. Unlike manually putting in the color symbol, using this function will return the platform&apos;s color code, so if you are wanting to keep your scripts platform independent, it is a much better idea to use this function as opposed to hard coding your own color codes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>783</id>
	<key><![CDATA[[%slocationArray%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>784</id>
	<key><![CDATA[Returns the difficulty of the world, It will be one of PEACEFUL, EASY, NORMAL, or HARD.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>785</id>
	<key><![CDATA[Sets various options about the team from an array. The keys &apos;friendlyfire&apos; and &apos;friendlyinvisibles&apos; must be booleans. The keys &apos;collisionrule&apos;,  &apos;nametagvisibility&apos;, and &apos;deathmessagevisibility&apos; must be one of ALWAYS, FOR_OTHER_TEAMS, FOR_OWN_TEAM, or NEVER.Scoreboard defaults to &apos;main&apos; if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>786</id>
	<key><![CDATA[FileHandling]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>787</id>
	<key><![CDATA[Sets the uncaught exception handler, returning the currently set one, or %s if none has been set yet. If code throws an exception, instead of doing the default (displaying the error to the user/console) it will run your code instead. The exception that was thrown will be passed to the closure, and it is expected that the closure returns either %s, true, or false. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>788</id>
	<key><![CDATA[prompt]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>789</id>
	<key><![CDATA[objectiveName, name, int, %s[%sscoreboard%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>790</id>
	<key><![CDATA[Returns an array, given an INI format input. INI files are loosely defined as a set of key-&gt;value pairs, which lends itself to an associative array format. Key value pairs are denoted usually by a &lt;code&gt;key=value&lt;/code&gt; format. The specific rules for decoding an INI file can be found [%s here]. An associative array is returned. All values are stored as strings, so if 1 was stored, it will be returned as a string &apos;1&apos;. This is a limitation of the ini format, as it is expected that the code that reads the ini knows what the type of the data is anticipated, not the data itself. You can easily cast data that is expected to be numeric via the %s and %s functions when reading in the data if exact types are truly needed. INI doesn&apos;t easily support non-string values, if that is needed, consider using %s/%s instead.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>791</id>
	<key><![CDATA[This class provides regular expression functions. For more details, please see the page on [[%s|regular expressions]]. Note that all the functions are just passthroughs to the Java regex mechanism. If you need to set a flag on the regex, where the api calls for a pattern, instead send array('pattern', 'flags') where flags is any of i, m, or s. Alternatively, using the embedded flag system that Java provides is also valid. Named captures are also supported if you are using Java 7, otherwise they are not supported.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>792</id>
	<key><![CDATA[[%svalues...%s]%s, closure]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>793</id>
	<key><![CDATA[profile, query, %s[%sparams...%s]%s, callback]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>794</id>
	<key><![CDATA[Returns a modern material for the a legacy item id, name, notation, or array. If an invalid argument is passed in, %s is returned. Given 1 or &apos;1:0&apos;, returns &apos;STONE&apos;. Given an item array with {name: STONE, data: 1}, returns &apos;GRANITE&apos;.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>795</id>
	<key><![CDATA[Right shifts the value bitsToShift times]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>796</id>
	<key><![CDATA[Returns an int, read in as a 64 bit long, from the given position, or wherever the marker is currently at by default.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>797</id>
	<key><![CDATA[name%s[%s, space, ...%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>798</id>
	<key><![CDATA[Returns a new normal array, given an associative array. (If the array passed in is not associative, a copy of the array is returned).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>799</id>
	<key><![CDATA[[%splayer%s]%s, entity]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>800</id>
	<key><![CDATA[Returns the tan of the number]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>801</id>
	<key><![CDATA[commandname, optionsArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>802</id>
	<key><![CDATA[Returns true if the string needle is found anywhere within the string haystack (while ignoring case). This is functionally equivalent to string_postion(to_lower(@haystack), to_lower(@needle)) | %sNo]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>803</id>
	<key><![CDATA[formatString, parameters... %s formatString, array(parameters...)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>804</id>
	<key><![CDATA[text]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>805</id>
	<key><![CDATA[[%splayer%s]%s, footer]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>806</id>
	<key><![CDATA[id]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>807</id>
	<key><![CDATA[array, size, %s[%sfill%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>808</id>
	<key><![CDATA[Returns the unicode code point for a given character. The character is a string, but it should only be 1 code point character (which may be length(@character)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>809</id>
	<key><![CDATA[[%splayerName%s]%s %s %s[%suuid%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>810</id>
	<key><![CDATA[Returns various information about server.If value is set, it should be an integer of one of the following indexes, and only that information for that index will be returned. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>811</id>
	<key><![CDATA[Returns an array of UUIDs for the given entity&apos;s riders.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>812</id>
	<key><![CDATA[Subtracts value from var, and stores the new value. Value defaults to 1. Equivalent to --var (or var -= value) in other languages. Expects ivar to be a variable, then returns the ivar, or if var is a constant number, simply adds x to it, and returns the new number. Operator syntax is also supported: --@var]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>813</id>
	<key><![CDATA[Gets an array of boss bar ids currently in use.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>814</id>
	<key><![CDATA[Accepts an ivariable ivar as a parameter, and puts the specified value mixed in it. Returns the variable that was assigned. Operator syntax is also supported: &lt;code&gt;@a = 5;&lt;/code&gt;. Other forms are supported as well, +=, -=, *=, /=, .=, which do multiple operations at once. Array assigns are also supported: @array[5] = &apos;new value in index 5&apos;;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>815</id>
	<key><![CDATA[x, %s[%squeue%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>816</id>
	<key><![CDATA[[%sworld%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>817</id>
	<key><![CDATA[Sets a command to a Command Block at the given location.If no command is given or parameter is %s, it clears the Command Block.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>818</id>
	<key><![CDATA[Reflection]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>819</id>
	<key><![CDATA[Returns the arc sin of the number]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>820</id>
	<key><![CDATA[Returns whether or not a block is being supplied with power.checkMode can be: &quot;BOTH&quot; (Check both direct and indirect power), &quot;DIRECT_ONLY&quot; (Check direct power only) or &quot;INDIRECT_ONLY&quot; (Check indirect power only). CheckMode defaults to &quot;BOTH&quot;.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>821</id>
	<key><![CDATA[Unregisters a plugin channel CommandHelper is listening on, if any.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>822</id>
	<key><![CDATA[Acts as a typical for loop. The assignment is first run. Then, a condition is checked. If that condition is checked and returns true, expression2 is run. After that, expression1 is run. In java syntax, this would be: for(assign; condition; expression1){expression2}. assign must be an ivariable, either a pre defined one, or the results of the assign() function. condition must be a boolean.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>823</id>
	<key><![CDATA[Creates a heap dump file, and places it in the working directory, as &quot;dump.hprof&quot;. This might throw a PluginInternalException if the heap dump tools aren&apos;t available in your JVM. Once dumped, the heap dump can be analyzed using tools such as jhat. More information about jhat can be found [%s here].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>824</id>
	<key><![CDATA[Returns a scope isolated closure on the provided code. An iclosure is a datatype that represents some code as code, not the results of some code after it is run. Code placed in an iclosure can be used as a string, or executed by other functions using the execute() function. If a closure is &quot;to string&apos;d&quot; it will not necessarily look like the original code, but will be functionally equivalent. The current environment is &quot;snapshotted&quot; and stored with the closure, however, this information is only stored in memory, it isn&apos;t retained during a serialization operation. However, the variable table of the parent scope is not retained, thus making this closure &quot;isolated&quot; from the parent code. The special variable @arguments is automatically created for you, and contains an array of all the arguments passed to the closure, much like procedures. See the wiki article on [[%s|closures]] for more details and examples.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>825</id>
	<key><![CDATA[An execution queue is a queue of closures, which are queued up to be run in sequence by the engine. Unlike set_timeout and set_interval, there is no time component, it's simply a queue of operations to execute sequentially. See the [[%s|article on the learning trail]] for more information.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>826</id>
	<key><![CDATA[element, docField]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>827</id>
	<key><![CDATA[Returns the documentation for an element. There are 4 things that an element might have, and one of these should be passed as the docField argument: type, return, args, description. A valid element is either the name of an ivariable, or a function/proc. For instance, reflect_docs(&apos;reflect_docs&apos;, &apos;description&apos;) would return what you are reading right now. User defined variables and procs may not have any documentation, in which case %s is returned. If the specified argument cannot be found, a FormatException is thrown. If no arguments are passed in, it returns the documentation for reflect_docs, that is, what you&apos;re reading right now.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>828</id>
	<key><![CDATA[[%squeue%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>829</id>
	<key><![CDATA[value, radix]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>830</id>
	<key><![CDATA[Resets a player&apos;s display name to their real name. If playerName isn&apos;t specified, defaults to the player running the command.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>831</id>
	<key><![CDATA[Returns the absolute value of the argument.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>832</id>
	<key><![CDATA[Launches a firework rocket. The location array specifies where it is launched from, and the options array is an associative array described below. All parameters in the array are optional, and default to the specified values if not set. The default options being set will make it look like a normal firework, with a white explosion. Returns the firework rocket entity&apos;s UUID. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>833</id>
	<key><![CDATA[[%stype%s]%s, ivar, mixed]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>834</id>
	<key><![CDATA[Clears the previously registered cron job from the registered list. This will prevent the task from running again in the future. If run from within a cron task, the id is optional, and the current task will be prevented from running again in the future. If the ID provided is invalid, a RangeException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>835</id>
	<key><![CDATA[[%svalue%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>836</id>
	<key><![CDATA[Returns the string s with leading and trailing whitespace cut off]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>837</id>
	<key><![CDATA[Outputs debug information about a variable to standard out. Unlike %s, this only accepts an ivar; it is a meta function. The runtime will then take the variable, and output information about it, in a human readable format, including the variable&apos;s defined type, actual type, name and value.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>838</id>
	<key><![CDATA[Marquee]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>839</id>
	<key><![CDATA[Inserts an item at the specified index, and shifts all other items in the array to the right one. If index is greater than the size of the array, an IndexOverflowException is thrown, though the index may be equal to the size, in which case this works just like array_push(). The array must be normal though; associative arrays are not supported.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>840</id>
	<key><![CDATA[Returns true if the numeric value represented by  a given double or numeric string could be cast to an integer without losing data (or if it&apos;s an integer). For instance, is_numeric(4.5) would return true, and integer(4.5) would work, however, equals(4.5, integer(4.5)) returns false, because the value was narrowed to 4.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>841</id>
	<key><![CDATA[array, %s[%ssortType%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>842</id>
	<key><![CDATA[Returns whether or not a call to modify_event() would fail, based on the parameter being locked by a higher priority handler. If this returns false, it is still not a guarantee that the event would be successfully modified, just that it isn&apos;t locked.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>843</id>
	<key><![CDATA[Merges the specified arrays from left to right, and returns a new array. If the array merged is associative, it will overwrite the keys from left to right, but if the arrays are normal, the keys are ignored, and values are simply pushed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>844</id>
	<key><![CDATA[Returns a location array of the coordinates of the player specified, or the player running the command if no player is specified. Note that unlike entity_loc() the y coordinate will be for the block the player is standing on, which is one meter lower. The array returned also includes the player&apos;s world, yaw and pitch.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>845</id>
	<key><![CDATA[pattern, subject]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>846</id>
	<key><![CDATA[[%sprimitive_value%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>847</id>
	<key><![CDATA[entityUUID, tag]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>848</id>
	<key><![CDATA[world]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>849</id>
	<key><![CDATA[file]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>850</id>
	<key><![CDATA[Sets the player&apos;s game mode. Mode must be one of: SURVIVAL, CREATIVE, ADVENTURE, or SPECTATOR]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>851</id>
	<key><![CDATA[Works exactly like array_indexes(array, value)[0], except in the case where the value is not found, returns %s. That is to say, if the value is contained in an array (even multiple times) the index of the first element is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>852</id>
	<key><![CDATA[Launches the desktop&apos;s default browser with the given url. On headless systems, this will throw an exception.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>853</id>
	<key><![CDATA[Sets up a marquee, which will automatically split up a given string for you, and call the callback. The split string will automatically wrap, handle buffering spaces, and scroll through the text. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>854</id>
	<key><![CDATA[array, index...]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>855</id>
	<key><![CDATA[[%scronID%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>856</id>
	<key><![CDATA[This class is for functions that are experimental. They don't actually get added to the documentation, and are subject to removal at any point in time, nor are they likely to have good documentation.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>857</id>
	<key><![CDATA[Sets a player&apos;s enderchest&apos;s inventory to the specified inventory object. An inventory object is one that matches what is returned by penderchest(), so set_penderchest(penderchest()), while pointless, would be a correct call. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>858</id>
	<key><![CDATA[Works like queue_delay, but puts the delay at the front of the queue.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>859</id>
	<key><![CDATA[specifier, %s[%sindex%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>860</id>
	<key><![CDATA[Converts an array into a JSON encoded string. Both normal and associative arrays are supported. Within the array, only primitives and arrays can be encoded.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>861</id>
	<key><![CDATA[url]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>862</id>
	<key><![CDATA[Takes an associative array with keys representing equipment slots and values of itemArrays, the same used by set_pinv. This does not work on most &quot;dumb&quot; entities, only mobs (entities with AI). Unless a mod, plugin, or future update changes vanilla functionality, only humanoid mobs will render their equipment slots. The equipment slots are: WEAPON, OFF_HAND, BOOTS, LEGGINGS, CHESTPLATE, or HELMET]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>863</id>
	<key><![CDATA[[%splayer%s]%s, slot, type]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>864</id>
	<key><![CDATA[Removes an index from an array. If the array is a normal array, all values&apos; indices are shifted left one. If the array is associative, the index is simply removed. If the index exists, the value removed is returned. If the index doesn&apos;t exist, the array remains unchanged, however it&apos;ll throw a RangeException for normal arrays (returns %s for associative arrays).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>865</id>
	<key><![CDATA[Set an entity to be breedable.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>866</id>
	<key><![CDATA[Returns a non-linking closure on the provided code. The same rules apply for closures, except the top level internal code does not check for proper linking at compile time, and instead links at runtime. Lexer errors and some other compile time checks ARE done however, but functions are not optimized or linked. This is used for remote code execution, since the remote platform may have some functionality unavailable on this current platform.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>867</id>
	<key><![CDATA[Clipboard]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>868</id>
	<key><![CDATA[[%smarqueeName%s]%s, text, stringWidth, delayTime, callback]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>869</id>
	<key><![CDATA[Returns the player&apos;s game mode. It will be one of SURVIVAL, CREATIVE, ADVENTURE, or SPECTATOR.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>870</id>
	<key><![CDATA[constant]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>871</id>
	<key><![CDATA[Sets the contents of the system clipboard, to the given value. Can only be used in cmdline mode. Flavor defaults to %s, and is currently unused. Only strings are currently supported. If the platform doesn&apos;t support clipboard operations, an UnsupportedOperationException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>872</id>
	<key><![CDATA[Gives the player the specified amount of experience.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>873</id>
	<key><![CDATA[Provides a set of functions that deal with statistical analysis of numbers.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>874</id>
	<key><![CDATA[entityUUID, int]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>875</id>
	<key><![CDATA[Gets an array of current options for the specified boss bar.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>876</id>
	<key><![CDATA[Returns an array of (x, z, world) coordinates of the chunk of either the location specified or the location of the player running the command.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>877</id>
	<key><![CDATA[Sometimes, when you need to calculate an advanced mathematical expression, it is messy to write out everything in terms of functions. This function will allow you to evaluate a mathematical expression as a string, using common mathematical notation. For example, (2 + 3) * 4 would return 20. Variables can also be included, and their values given as an associative array. expr(&apos;(x + y) * z&apos;, array(x: 2, y: 3, z: 4)) would be the same thing as the above example. This function requires WorldEdit in plugins, lib, or the server root in order to run.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>878</id>
	<key><![CDATA[Compiler internal functions should be declared here. If you're reading this from anywhere but the source code, there's a bug, because these functions shouldn't be public or used in a script.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>879</id>
	<key><![CDATA[Returns the UUID of the entity that is holding the given living entity&apos;s leash, or %s if it isn&apos;t being held.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>880</id>
	<key><![CDATA[Equivalent to not(sequals(val1, val2)). Operator syntax is also supported: @a]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>881</id>
	<key><![CDATA[Returns a list of all currently loaded worlds.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>882</id>
	<key><![CDATA[Sets the player&apos;s food level. This is an integer from 0-?]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>883</id>
	<key><![CDATA[locationArray, art]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>884</id>
	<key><![CDATA[Returns the bitwise exclusive OR of the specified values]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>885</id>
	<key><![CDATA[number, %s[%sprecision%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>886</id>
	<key><![CDATA[Returns true if entity is living, otherwise false.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>887</id>
	<key><![CDATA[Returns the metadata values attached to the given object. object can be a location array (it will designate a block), an entityID (it will designate an entity) or a string (it will designate a world). If only the key is given, the object is the current player. The function returns an associative array where the values are keyed by plugin which have registered the metadata with the given key, and the array values the registered metadata values. If the plugin argument is given (a string that represent the plugin name), the function simply returns the value of the metadata registered by the plugin with this key, or %s if no metadata is found. --- The Bukkit metadata allow to attach informations to entities, blocks and worlds, and allow plugins to exchange these informations between them without requiring one to be dependant on each other. The metadata are persistent across server reloads, but not across server restarts. The metadata attached to a player are also persistent between logins.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>888</id>
	<key><![CDATA[Returns a one character string, read in as an 32 bit char, from the given position, or wherever the marker is currently at by default.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>889</id>
	<key><![CDATA[Adds the specified item to a player&apos;s enderchest. Unlike set_penderchest(), this does not specify a slot. The items are distributed in the player&apos;s inventory, first filling up slots that have the same item type, up to the max stack size, then fills up empty slots, until either the entire inventory is filled or the entire amount has been given. If the player&apos;s enderchest is full, the number of items that were not added is returned, which will be less than or equal to the quantity provided. Otherwise, returns 0.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>890</id>
	<key><![CDATA[Executes a query, just like the %s function, however, no validation is done to ensure that SQL injections might occur (essentially allowing for concatenation directly in the query). Otherwise, functions exactly the same as query().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>891</id>
	<key><![CDATA[objectivename, %s[%sscoreboard%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>892</id>
	<key><![CDATA[Queues a task at the front of the queue.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>893</id>
	<key><![CDATA[Returns the amount of air the specified living entity has remaining.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>894</id>
	<key><![CDATA[[%splayer%s]%s, locationArray, 1, 2, 3, 4 %s %s[%splayer%s]%s, locationArray, lineArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>895</id>
	<key><![CDATA[isStorming, %s[%sworld%s]%s, %s[%sint%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>896</id>
	<key><![CDATA[Sends a chat message to the server, as the given player. Otherwise the same as the chat() function]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>897</id>
	<key><![CDATA[entityUUID, seconds]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>898</id>
	<key><![CDATA[Opens a trading interface for the current player, or the one specified. Only one player can trade with a merchant at a time. If the merchant is already being traded with, the function will do nothing. When true, force will make the merchant trade with the player, closing the trade with the previous player if there was one. Function returns true if trading was successfully opened, and false if not.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>899</id>
	<key><![CDATA[Returns whether or not this player is banned. This will work with offline players, but the name must be exact. At this time, this function only works with the vanilla ban system. If you use a third party ban system, you should instead run the command for that plugin instead. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>900</id>
	<key><![CDATA[Sets the art at the specified location. If the art doesn&apos;t fit, nothing happens, and false is returned. Otherwise, true is returned. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>901</id>
	<key><![CDATA[Sets a player&apos;s inventory to the specified inventory array. An inventory array is one that matches what is returned by pinv(), so set_pinv(pinv()), while pointless, would be a correct call. If a slot is specified as the second argument, only that slot is set with the given item array. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>902</id>
	<key><![CDATA[This class provides functions for hooking into CommandHelper's powerful Performance measuring. To use the functions, you must have allow-profiling option set to true in your preferences file.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>903</id>
	<key><![CDATA[destination_byte_array, source_byte_array, %s[%spos%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>904</id>
	<key><![CDATA[Creates an array of values.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>905</id>
	<key><![CDATA[This class provides functions that are able to transform data from native objects to their serialized forms, i.e. json, ini, etc.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>906</id>
	<key><![CDATA[Returns a string value of the typeof a value. For instance &apos;array&apos; is returned for typeof(array()). This is a generic replacement for the is_* series of functions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>907</id>
	<key><![CDATA[Returns whether or not a mob&apos;s custom name is always visible. If this is true it will be as visible as player names, otherwise it will only be visible when near the mob.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>908</id>
	<key><![CDATA[Returns the name of the Command Block at the given location.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>909</id>
	<key><![CDATA[Resets the visible time for the player to the time of the world.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>910</id>
	<key><![CDATA[Sets the text of the sign at the given location. If the block at x,y,z isn&apos;t a sign, a RangeException is thrown. If a text line cannot fit on the sign, it&apos;ll be cut off.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>911</id>
	<key><![CDATA[&lt;none&gt; %s parameterArray %s parameter, %s[%sparameter...%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>912</id>
	<key><![CDATA[Sets the player&apos;s list name. Colors are supported and setting the name to %s resets it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>913</id>
	<key><![CDATA[itemArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>914</id>
	<key><![CDATA[[%sstate%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>915</id>
	<key><![CDATA[Sets the block at the location. The physics boolean determines whether or not this causes a block update. Defaults to true.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>916</id>
	<key><![CDATA[MobManagement]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>917</id>
	<key><![CDATA[haystack, needle]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>918</id>
	<key><![CDATA[player, isWhitelisted]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>919</id>
	<key><![CDATA[Fakes an incoming plugin message from the player. Channel should be a string (the channel name) and message should be a byte_array primitive. Depending on the plugin, these parameters will vary. If message is %s an empty byte_array is sent.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>920</id>
	<key><![CDATA[mixed]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>921</id>
	<key><![CDATA[[%splayer%s]%s, hunger]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>922</id>
	<key><![CDATA[[%svar1, var2...,%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>923</id>
	<key><![CDATA[Queues a task up at the end of the specified queue.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>924</id>
	<key><![CDATA[Returns an array of all material names.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>925</id>
	<key><![CDATA[Returns the UUID of the given entity&apos;s vehicle, or %s if none exists.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>926</id>
	<key><![CDATA[Returns true if the entity cannot be damaged]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>927</id>
	<key><![CDATA[[%splayer%s]%s, inventorySlot]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>928</id>
	<key><![CDATA[Returns the character length of str, if the value is castable to a string, or the length of the %s object, if an array or other Sizeable object is given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>929</id>
	<key><![CDATA[Rewinds the byte array marker to 0.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>930</id>
	<key><![CDATA[Returns whether or not there is data stored at the specified key in the Persistence database.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>931</id>
	<key><![CDATA[timeInMS, closure]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>932</id>
	<key><![CDATA[var1]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>933</id>
	<key><![CDATA[ItemMeta]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>934</id>
	<key><![CDATA[Debug]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>935</id>
	<key><![CDATA[This class contains functions that are mostly only useful for command line scripts, but in general may be used by any script. For more information on running MethodScript from the command line, see [[%s|this wiki page]].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>936</id>
	<key><![CDATA[[%splayerToShow,%s]%s playerInventory]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>937</id>
	<key><![CDATA[Clears the oauth tokens (refresh token and access token) for the given client ID. If the client ID is not specified, all tokens are deleted. This is useful if various oath tokens have been revoked, or you would specifically like to prevent caching of those tokens.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>938</id>
	<key><![CDATA[Returns the string s with leading whitespace cut off]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>939</id>
	<key><![CDATA[XGUI]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>940</id>
	<key><![CDATA[array, testValue]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>941</id>
	<key><![CDATA[Given an array and glue, to-strings all the elements in the array (just the values, not the keys), and joins them with the glue, defaulting to a space. For instance array_implode(array(1, 2, 3), &apos;-&apos;) will return &quot;1-2-3&quot;.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>942</id>
	<key><![CDATA[Returns the median across all the numbers in the set. The input may be an array of numbers, or individual numbers as arguments. The median is the number that is in the center of set, once the values in the set are ordered from least to greatest. That is, in the set [1, 2, 3], 2 is the median. If there is an even number of value in the set, the middle two values are averaged, and that value is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>943</id>
	<key><![CDATA[max, then min is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>944</id>
	<key><![CDATA[Sorts an array in place, and also returns a reference to the array. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>945</id>
	<key><![CDATA[Sets the specified item in the specified inventory slot. The specifier can be an entity UUID, block location array or virtual inventory id. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>946</id>
	<key><![CDATA[Unbinds an event, which causes it to not run anymore. If called from within an event handler, eventID is optional, and defaults to the current event id.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>947</id>
	<key><![CDATA[Removes all non-unique values from an array. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>948</id>
	<key><![CDATA[Returns true if every value in the array meets some test, which the closure should return true or false about. Not all values will necessarily be checked, once a value is determined to fail the check, execution is stopped, and false is returned. The closure will be passed each value in the array, one at a time, and must return a boolean.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>949</id>
	<key><![CDATA[Returns a new construct that has been cast to an integer. This function will throw a CastException if is_numeric would return false for this item, but otherwise, it will be cast properly. Data may be lost in this conversion. For instance, 4.5 will be converted to 4, by using integer truncation. You can use is_integral to see if this data loss would occur.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>950</id>
	<key><![CDATA[Returns true if the two values are NOT equal, or false otherwise. Equivalent to not(equals(val1, val2)). Operator syntax is also supported: @a]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>951</id>
	<key><![CDATA[file, callback]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>952</id>
	<key><![CDATA[parameter, value, %s[%sthrowOnFailure%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>953</id>
	<key><![CDATA[Returns the highest number in a given list of numbers. If any of the arguments are arrays, they are expanded into individual numbers, and also compared.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>954</id>
	<key><![CDATA[array&lt;string&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>955</id>
	<key><![CDATA[Provides methods for viewing data about both CommandHelper and the other plugins in your server. Though not meant to be called by normal scripts, these methods are available everywhere other methods are available. Note that for some of these functions to even work, play-dirty mode must set to on. These are most useful in conjuction with interpreter mode.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>956</id>
	<key><![CDATA[id, optionsArray %s id, percent %s id, title]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>957</id>
	<key><![CDATA[character]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>958</id>
	<key><![CDATA[Returns x modulo n. Throws a RangeException when n is 0. Operator syntax is also supported: @x % @n]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>959</id>
	<key><![CDATA[int1]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>960</id>
	<key><![CDATA[array, %s[%skey%s]%s, ivar, code, else]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>961</id>
	<key><![CDATA[Returns the distance between two locations.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>962</id>
	<key><![CDATA[This class of functions allows recipes to be managed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>963</id>
	<key><![CDATA[([[%s|Examples...]])]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>964</id>
	<key><![CDATA[Returns the EntityType of the entity with the specified ID. Returns %s if the entity does not exist.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>965</id>
	<key><![CDATA[Sets whether or not a player has operator status. If no player is specified the player running the script is given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>966</id>
	<key><![CDATA[Returns the owner&apos;s name, or %s if the mob is unowned.An UntameableMobException is thrown if mob isn&apos;t tameable to begin with.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>967</id>
	<key><![CDATA[Returns the md5 hash of the specified string. The md5 hash is no longer considered secure, so you should not use it for storage of sensitive data, however for general hashing, it is a quick and easy solution. md5 is a one way hashing algorithm. This function is aware of and compatible with secure_string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>968</id>
	<key><![CDATA[Returns an associative array that represents the player&apos;s velocity. The array contains the following items: magnitude, x, y, z. These represent a 3 dimensional Vector. The important part is x, y, z, however, the magnitude is provided for you as a convenience. (It should equal sqrt(x ** 2 + y ** 2 + z ** 2))]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>969</id>
	<key><![CDATA[Determines if the provided teststring ends with the provided keyword. Note that this will cast both arguments to strings. This means that the boolean true will match the string &apos;true&apos; or the integer 1 will match the string &apos;1&apos;. If an empty string is provided for the keyword, it will always return true.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>970</id>
	<key><![CDATA[Returns an array of all registered event names.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>971</id>
	<key><![CDATA[Sets the drop chances for each equipment slot on a mob, but does not work on players. Passing %s instead of an array will automatically set all rates to 0, which will cause nothing to drop. A rate of 1 will guarantee a drop.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>972</id>
	<key><![CDATA[Pushes all the values of an array individually. If you try to push an array onto array_push, this will give you a two dimensional array, this method pushes the sub values of the values array into the destination array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>973</id>
	<key><![CDATA[Echoes string to the chat, as if the user simply typed something into the chat bar. This function cannot be run from console, a PlayerOfflineException is thrown if attempted. Use broadcast() instead.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>974</id>
	<key><![CDATA[str]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>975</id>
	<key><![CDATA[val1, val2]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>976</id>
	<key><![CDATA[assign, condition, expression1, expression2, else]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>977</id>
	<key><![CDATA[[%sflavor%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>978</id>
	<key><![CDATA[x, n]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>979</id>
	<key><![CDATA[Adds one, or modifies an existing, potion effect on a mob. The potionEffect can be SLOWNESS, INVISIBILITY, SLOW_FALLING, BAD_OMEN, WEAKNESS, DOLPHINS_GRACE, INSTANT_DAMAGE, MINING_FATIGUE, SPEED, WITHER, LUCK, FIRE_RESISTANCE, WATER_BREATHING, GLOWING, ABSORPTION, HUNGER, BAD_LUCK, HERO_OF_THE_VILLAGE, REGENERATION, STRENGTH, BLINDNESS, LEVITATION, CONDUIT_POWER, JUMP_BOOST, POISON, NAUSEA, RESISTANCE, HEALTH_BOOST, NIGHT_VISION, INSTANT_HEALTH, HASTE, or SATURATION. It also accepts an integer corresponding to the effect id listed on the Minecraft wiki. Strength is an integer representing the power level of the effect, starting at 0. Seconds defaults to 30.0. To remove an effect, set the seconds to 0. If seconds is less than 0 or greater than 107374182 a RangeException is thrown. Ambient takes a boolean of whether the particles should be more transparent. Particles takes a boolean of whether the particles should be visible at all. Icon takes a boolean for whether or not to show the icon to the entity if it&apos;s a player. The function returns whether or not the effect was modified.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>980</id>
	<key><![CDATA[entityUUID, boolean]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>981</id>
	<key><![CDATA[Calculate pitch from one location to another. This will be from -90.0 to 90.0, which is up and down respectively.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>982</id>
	<key><![CDATA[Gets the command (as a string) that ended up triggering this script, exactly how it was entered by the player. This could be %s, if for instance it is called from within an event.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>983</id>
	<key><![CDATA[locationArray, type]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>984</id>
	<key><![CDATA[Returns an associative array of all information about the world&apos;s border. The keys are width, center, damagebuffer, damageamount, warningtime, warningdistance.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>985</id>
	<key><![CDATA[Checks to see if the value is, extends, or implements the given type. Keyword usage is preferred: &lt;code&gt;@value instanceof int&lt;/code&gt;. The opposite operation is &lt;code&gt;@value notinstanceof int&lt;/code&gt;. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>986</id>
	<key><![CDATA[Returns a closure on the provided code. A closure is a datatype that represents some code as code, not the results of some code after it is run. Code placed in a closure can be used as a string, or executed by other functions using the execute() function. If a closure is &quot;to string&apos;d&quot; it will not necessarily look like the original code, but will be functionally equivalent. The current environment is &quot;snapshotted&quot; and stored with the closure, however, this information is only stored in memory, it isn&apos;t retained during a serialization operation. Also, the special variable @arguments is automatically created for you, and contains an array of all the arguments passed to the closure, much like procedures. See the wiki article on [[%s|closures]] for more details and examples.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>987</id>
	<key><![CDATA[Returns true if this byte array is little endian. By default, byte arrays are big endian, but this may be changed with ba_set_little_endian.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>988</id>
	<key><![CDATA[[%splayerName%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>989</id>
	<key><![CDATA[command, %s[%soptions%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>990</id>
	<key><![CDATA[Unregisters an objective from the scoreboard. Scoreboard defaults to &apos;main&apos; if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>991</id>
	<key><![CDATA[Groups any number of functions together, and returns %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>992</id>
	<key><![CDATA[Adds one, or modifies an existing, potion effect on a mob. The potionEffect can be SLOWNESS, INVISIBILITY, SLOW_FALLING, BAD_OMEN, WEAKNESS, DOLPHINS_GRACE, INSTANT_DAMAGE, MINING_FATIGUE, SPEED, WITHER, LUCK, FIRE_RESISTANCE, WATER_BREATHING, GLOWING, ABSORPTION, HUNGER, BAD_LUCK, HERO_OF_THE_VILLAGE, REGENERATION, STRENGTH, BLINDNESS, LEVITATION, CONDUIT_POWER, JUMP_BOOST, POISON, NAUSEA, RESISTANCE, HEALTH_BOOST, NIGHT_VISION, INSTANT_HEALTH, HASTE, or SATURATION. It also accepts an integer corresponding to the effect id listed on the Minecraft wiki. Strength is an integer representing the power level of the effect, starting at 0. Seconds defaults to 30.0. To remove an effect, set the seconds to 0. If seconds is less than 0 or greater than 107374182 a RangeException is thrown. Ambient takes a boolean of whether the particles should be more transparent. Particles takes a boolean of whether the particles should be visible at all. Icon takes a boolean for whether or not to show the icon to the player. The function returns whether or not the effect was modified.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>993</id>
	<key><![CDATA[These functions provide basic logical operations.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>994</id>
	<key><![CDATA[Exceptions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>995</id>
	<key><![CDATA[[%svariableName%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>996</id>
	<key><![CDATA[Returns whether or not the array is associative. If the parameter is not an array, throws a CastException.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>997</id>
	<key><![CDATA[Removes a player from the specified boss bar.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>998</id>
	<key><![CDATA[This class of functions allow players to be managed. Functions that accept an online player's name will also accept their UUID.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>999</id>
	<key><![CDATA[Creates an explosion with a given size at a given location. Size defaults to size of a creeper (3), and %s uses the default. If safe is true, (defaults to false) the explosion won&apos;t hurt the surrounding blocks. If size is 0, and safe is true, you will still see the animation and hear the sound, but players won&apos;t be hurt, and neither will the blocks.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1000</id>
	<key><![CDATA[Returns if the chunk is a slime spawning chunk. The current player&apos;s world is used if one is not provided.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1001</id>
	<key><![CDATA[x, z, %s[%sworld%s]%s locationArray, %s[%sworld%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1002</id>
	<key><![CDATA[Runs a single command for this user, as op. Works like runas(~op, &apos;/command&apos;) used to work, before it was deprecated. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1003</id>
	<key><![CDATA[Sets the display name, color, prefix, and/or suffix of the given team. If arg 2 is not an array, it is assumed to be the displayname, otherwise arg 2 should be an array with keys &apos;displayname&apos;, &apos;color&apos;, &apos;prefix&apos;, and/or &apos;suffix&apos;, affecting their respective properties. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1004</id>
	<key><![CDATA[Returns the name of the player that&apos;s display on the player list.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1005</id>
	<key><![CDATA[Returns the selected quickbar slot of the given or executing player. The slot number is in range of [0-8].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1006</id>
	<key><![CDATA[Decrypts a secure_string into a char array. To keep backwards compatibility with strings in general, this function also accepts normal strings, which are not decrypted, but instead simply returned in the same format as if it were a secure_string. See the examples in %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1007</id>
	<key><![CDATA[ClassType]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1008</id>
	<key><![CDATA[Returns a player&apos;s name. If a string is specified, it will attempt to find a complete match for a partial name. If no string is specified, the current player is returned. UUIDs are also accepted for this and other functions that apply to online players. If the command is being run from the console, then the string &apos;~console&apos; is returned. If the command came from a CommandBlock, the block&apos;s name prefixed with # is returned. If the command is coming from elsewhere, returns a string chosen by the sender of this command (or %s). Note that most functions won&apos;t support console or block names (they&apos;ll throw a PlayerOfflineException), but you can use this to determine where a command is being run from.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1009</id>
	<key><![CDATA[Adds all the arguments together, and returns either a double or an integer. Operator syntax is also supported: @a + @b]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1010</id>
	<key><![CDATA[Gets a player&apos;s walk speed. The speed will be between -1.0 and 1.0.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1011</id>
	<key><![CDATA[code, condition]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1012</id>
	<key><![CDATA[Prompts the user for a single character. They do not need to hit enter first. This only works in cmdline mode.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1013</id>
	<key><![CDATA[specifier, itemArray %s specifier, itemID, qty]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1014</id>
	<key><![CDATA[[%seventID%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1015</id>
	<key><![CDATA[Finds the numeric position of the first occurence of needle in haystack. haystack is the string to search in, and needle is the string to search with. Returns the position of the needle (starting with 0) or -1 if the string is not found at all.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1016</id>
	<key><![CDATA[Constructs a new object of the specified type. The type must be hardcoded.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1017</id>
	<key><![CDATA[Sets the location of the player to the specified coordinates. If the coordinates are not valid, or the player was otherwise prevented from teleporting, false is returned, otherwise true. If player is omitted, the current player is used. Note that 1 is automatically added to the y coordinate.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1018</id>
	<key><![CDATA[shoots an entity from the specified location (can be an entity UUID, player name or location array), or the current player if no arguments are passed. If no entity type is specified, it defaults to a fireball. If provide three arguments, with target (entity UUID, player name or location array), entity will shoot to target location. Last, fourth argument, is double and specifies the speed of projectile. Returns the UUID of the entity. Valid projectile types: LLAMA_SPIT]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1019</id>
	<key><![CDATA[Returns an array of currently running tasks. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1020</id>
	<key><![CDATA[Returns the unicode character for a given unicode value. This is meant for dynamic input that needs converting to a unicode character, if you&apos;re hardcoding it, you should just use &apos;\u1234&apos; syntax instead, however, this is the dynamic equivalent of the \u string escape, so &apos;\u1234&apos;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1021</id>
	<key><![CDATA[Returns a substring of the given string str, starting from index begin, to index end, or the end of the string, if no index is given. If either begin or end are out of bounds of the string, an exception is thrown. substr(&apos;hamburger&apos;, 4, 8) returns &quot;urge&quot;, substr(&apos;smiles&apos;, 1, 5) returns &quot;mile&quot;, and substr(&apos;lightning&apos;, 5) returns &quot;ning&quot;. See also length().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1022</id>
	<key><![CDATA[Returns the bitwise OR of the specified values]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1023</id>
	<key><![CDATA[x, z, %s[%sworld%s]%s %s locationArray, %s[%sworld%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1024</id>
	<key><![CDATA[Returns an array of the registered scoreboard ID&apos;s. The special scoreboard &apos;main&apos; represents the server&apos;s main scoreboard which can be managed by the vanilla /scoreboard command.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1025</id>
	<key><![CDATA[Parses string into an array, where string is a space seperated list of arguments. Handy for turning $ into a usable array of items with which to script against. Extra spaces are ignored, so you would never get an empty string as an input. useAdvanced defaults to false, but if true, uses a basic argument parser that supports quotes for allowing arguments with spaces.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1026</id>
	<key><![CDATA[Returns whether or not the item is actually a ByteArray datatype.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1027</id>
	<key><![CDATA[Returns the equivalent of not(or())]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1028</id>
	<key><![CDATA[Sets the block at the location from a blockdata string. Forward compatibility is not ensured.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1029</id>
	<key><![CDATA[This provides extremely limited gui control functions. This entire class is experimental, and will probably be removed at some point.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1030</id>
	<key><![CDATA[Creates a new construct that is the &quot;toString&quot; of an item. For arrays, an human readable version is returned; this should not be used directly, as the format is not guaranteed to remain consistent. Booleans return &quot;true&quot; or &quot;false&quot; and %s returns &quot;%s&quot;. Strings (and subclasses of strings) are simply returned as is.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1031</id>
	<key><![CDATA[Returns the unix time stamp, in milliseconds, that this player first logged onto this server, or 0 if they never have. The player argument can be a UUID or a name. But if given a name, it must be exact.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1032</id>
	<key><![CDATA[Provides functions for managing the system clipboard]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1033</id>
	<key><![CDATA[type, arg]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1034</id>
	<key><![CDATA[Returns an array of procedures callable in the current scope.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1035</id>
	<key><![CDATA[Returns information about the runtime in a usable format. Depending on the information returned, it may be useable directly, or it may be more of a referential format. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1036</id>
	<key><![CDATA[[%splayer%s]%s, xp]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1037</id>
	<key><![CDATA[Sets the selected quickbar slot of the given or executing player to the given slot. The slot number is in range of [0-8].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1038</id>
	<key><![CDATA[Returns an entity&apos;s motion vector represented as an associative array with the the keys x, y, and z. As a convenience, the magnitude is also included.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1039</id>
	<key><![CDATA[Returns a double, read in as a 32 bit float, from the given position, or wherever the marker is currently at by default.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1040</id>
	<key><![CDATA[entityUUID, effect]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1041</id>
	<key><![CDATA[tryCode, %s[%svarName, catchCode, [exceptionTypes%s]%s] %s tryCode, catchCode]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1042</id>
	<key><![CDATA[Writes the text to the system&apos;s std err. Unlike console(), this does not use anything else to format the output, though in many cases they will behave nearly the same. However, colors and other formatting characters will not &quot;bleed&quot; through, so sys_err(color(RED) . &apos;This is red&apos;) will not cause the next line to also be red, so if you need to print multiple lines out, you should manually add \n to create your linebreaks, and only make one call to sys_err.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1043</id>
	<key><![CDATA[Unregisters a team from the scoreboard. Scoreboard defaults to &apos;main&apos; if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1044</id>
	<key><![CDATA[format, %s[%stime, [timezone, [locale%s]%s]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1045</id>
	<key><![CDATA[Walks through array, setting ivar equal to each element in the array, then running code. In addition, foreach(1..4, @i, code()) is also valid, setting @i to 1, 2, 3, 4 each time. The same syntax is valid as in an array slice. If key is set (it must be an ivariable) then the index of each iteration will be set to that. See the examples for a demonstration. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1046</id>
	<key><![CDATA[[%splayer,%s]%s channel, message]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1047</id>
	<key><![CDATA[Shows the enderchest of either the current player  or the specified player if given. If a second player is specified, shows the second player the contents of the first player&apos;s enderchest.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1048</id>
	<key><![CDATA[[%sdir%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1049</id>
	<key><![CDATA[Returns the quantity of the specified item that the player is carrying (including armor slots). This counts across all slots in inventory. Recall that 0 is false, and anything else is true, so this can be used to get the total, or just see if they have the item. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1050</id>
	<key><![CDATA[Returns the mob&apos;s age as an integer. Zero represents the point of adulthood. Throws an UnageableMobException if the mob is not a type that ages]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1051</id>
	<key><![CDATA[Creates a mutable primitive object, initially setting the value of the object to %s, or the specified value. The value must be a primitive value, and cannot be an array or object. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1052</id>
	<key><![CDATA[Provides functions to control the weather]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1053</id>
	<key><![CDATA[Returns true if a bind with the specified id exists and is currently bound. False is returned otherwise. This can be used to pre-emptively a%s a BindException if duplicate ids are used.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1054</id>
	<key><![CDATA[teststring, keyword]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1055</id>
	<key><![CDATA[Returns the current unix time stamp, in milliseconds. The resolution of this is not guaranteed to be extremely accurate. If you need extreme accuracy, use nano_time()]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1056</id>
	<key><![CDATA[[%sscoreboard%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1057</id>
	<key><![CDATA[str, begin, %s[%send%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1058</id>
	<key><![CDATA[[%splayer%s]%s, ticks]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1059</id>
	<key><![CDATA[Sets the player on fire for the specified number of ticks. If a boolean is given for ticks, false is 0, and true is 20.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1060</id>
	<key><![CDATA[Returns an array of all entities within the given distance from the location. Set type argument to filter entities to a specific entity type. You can pass an array of types. Valid types (case doesn&apos;t matter): DROPPED_ITEM, MAGMA_CUBE, SILVERFISH, MULE, HUSK, VINDICATOR, PILLAGER, SHULKER_BULLET, VILLAGER, AREA_EFFECT_CLOUD, PAINTING, TURTLE, TRADER_LLAMA, SMALL_FIREBALL, CAVE_SPIDER, SLIME, DROWNED, FIREBALL, EVOKER, MINECART_HOPPER, ENDERMITE, PLAYER, SALMON, ZOMBIE, PANDA, MINECART_COMMAND, OCELOT, ENDERMAN, ZOMBIE_VILLAGER, LLAMA, ENDER_DRAGON, WITCH, EXPERIENCE_ORB, ITEM_FRAME, WITHER, ARROW, CREEPER, ILLUSIONER, COD, ENDER_EYE, ZOMBIE_HORSE, MINECART_TNT, FIREWORK, PRIMED_TNT, RAVAGER, BOAT, SHULKER, FISHING_HOOK, PHANTOM, BLAZE, SKELETON_HORSE, COW, WANDERING_TRADER, PIG, MINECART_MOB_SPAWNER, WOLF, IRON_GOLEM, PIG_ZOMBIE, SHEEP, VEX, ENDER_PEARL, TRIDENT, POLAR_BEAR, MINECART, SNOWMAN, MINECART_CHEST, LEASH_HITCH, SQUID, DRAGON_FIREBALL, ELDER_GUARDIAN, HORSE, ARMOR_STAND, LIGHTNING, PARROT, EVOKER_FANGS, FOX, GIANT, STRAY, SPECTRAL_ARROW, CAT, RABBIT, DONKEY, ENDER_CRYSTAL, TROPICAL_FISH, SPIDER, SKELETON, WITHER_SKELETON, MUSHROOM_COW, CHICKEN, SNOWBALL, THROWN_EXP_BOTTLE, WITHER_SKULL, PUFFERFISH, GUARDIAN, EGG, LLAMA_SPIT, FALLING_BLOCK, SPLASH_POTION, GHAST, BAT, DOLPHIN, MINECART_FURNACE, or UNKNOWN]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1061</id>
	<key><![CDATA[Returns the maximum health of this living entity.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1062</id>
	<key><![CDATA[Returns an array of files in the current working directory, including &quot;hidden&quot; files, orif directory is specified, the files in that directory. This is only available in cmdline mode.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1063</id>
	<key><![CDATA[Returns an array of arrays of the enchantments and their levels on the given item. For example: array(&apos;sharpness&apos;: 1, &apos;unbreaking&apos;: 3).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1064</id>
	<key><![CDATA[Returns extension info for the extensions the system has loaded, or the given extension if extensionName is specified. Included data will be events, functions and version, keyed by the name of the extension (or __unidentified__ if it&apos;s an old-style extension).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1065</id>
	<key><![CDATA[locationArray, blockName, %s[%sphysics%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1066</id>
	<key><![CDATA[Binds some functionality to an event, so that when said event occurs, the event handler will fire. Returns the id of this event, so it can be unregistered later, if need be.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1067</id>
	<key><![CDATA[Encrypts a value using bcrypt, using the specified workload, or 5 if none provided. BCrypt is supposedly more secure than SHA1, and certainly more secure than md5. Note that using bcrypt is slower, which is one of its security advantages, however, setting the workload to higher numbers will take exponentially more time. A workload of 5 is a moderate operation, which should complete in under a second, however, setting it to 10 will take many seconds, and setting it to 15 will take a few minutes. The workload must be between 5 and 31. See the documentation for check_bcrypt for full usage. Bcrypt is recommended for password hashing, whereas sha-* functions are not. This function is aware of and compatible with secure_string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1068</id>
	<key><![CDATA[Sets the velocity of this entity according to the supplied xyz array. All 3 values default to 0, so an empty array will simply stop the entity&apos;s motion. Both normal and associative arrays are accepted.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1069</id>
	<key><![CDATA[Sets the spawn of the world. Note that in some cases a plugin may override the spawn, and this method will do nothing. In that case, you should use the plugin&apos;s commands to set the spawn.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1070</id>
	<key><![CDATA[Returns the hyperbolic sine of the number]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1071</id>
	<key><![CDATA[Returns an int, read in as an 8 bit byte, from the given position, or wherever the marker is currently at by default.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1072</id>
	<key><![CDATA[Writes a double, interpreted as a 64 bit double, starting from the given position, or wherever the marker is currently at by default.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1073</id>
	<key><![CDATA[Sets the entity on fire for the given number of seconds. Throws a RangeException if seconds is less than 0 or greater than 107374182.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1074</id>
	<key><![CDATA[Returns an array of the groups a player is in. If playerName is omitted, the current player is used. This relies on &quot;group.groupname&quot; permission nodes in your permissions plugin. Otherwise an extension is required to get the groups from the plugin.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1075</id>
	<key><![CDATA[Adds a new team to the scoreboard. Throws a ScoreboardException if a team already exists with the given name. Throws a LengthException if the team name is more than 16 characters. Scoreboard defaults to &apos;main&apos; if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1076</id>
	<key><![CDATA[Returns the boolean value of a logical OR across all arguments. Uses lazy determination, so once an argument resolves to true, the function returns. Operator syntax is also supported: @a]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1077</id>
	<key><![CDATA[cond, trueRet, %s[%sfalseRet%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1078</id>
	<key><![CDATA[name, %s[%stype, environment, [seed, [generator%s]%s]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1079</id>
	<key><![CDATA[Sets the player list footer for a player. This is the text that appears below the player list that appears when hitting the tab key. Colors and new lines are accepted. Only the given player (or current player if none is given) will see these changes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1080</id>
	<key><![CDATA[Synchronizes access to the code block for all calls (from different threads) with the same syncObject argument. This means that if two threads will call synchronized(&apos;example&apos;, &amp;lt;code&amp;gt;), the second call will hang the thread until the passed code of the first call has finished executing. If you call this function from within this function on the same thread using the same syncObject, the code will simply be executed. For more information about synchronization, see: %s(computer_science)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1081</id>
	<key><![CDATA[Echoes]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1082</id>
	<key><![CDATA[Takes a JSON encoded string, and returns an array, either normal or associative, depending on the contents of the JSON string. If the JSON string is improperly formatted, a FormatException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1083</id>
	<key><![CDATA[param]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1084</id>
	<key><![CDATA[Plays the given visual effect on the entity. Non-applicable effects simply won&apos;t happen. Note: the death effect makes the mob invisible to players and immune to melee attacks. When used on players, they are shown the respawn menu, but because they are not actually dead, they can only log out. Possible effects are: ARROW_PARTICLES, RABBIT_JUMP, DEATH, HURT, SHEEP_EAT, WOLF_HEARTS, WOLF_SHAKE, WOLF_SMOKE, IRON_GOLEM_ROSE, VILLAGER_HEART, VILLAGER_ANGRY, VILLAGER_HAPPY, WITCH_MAGIC, ZOMBIE_TRANSFORM, FIREWORK_EXPLODE, LOVE_HEARTS, SQUID_ROTATE, ENTITY_POOF, GUARDIAN_TARGET, SHIELD_BLOCK, SHIELD_BREAK, ARMOR_STAND_HIT, THORNS_HURT, IRON_GOLEM_SHEATH, TOTEM_RESURRECT, HURT_DROWN, or HURT_EXPLOSION]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1085</id>
	<key><![CDATA[world, %s[%ssave%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1086</id>
	<key><![CDATA[Allows a CommandHelper alias to be called from within another alias. Typically this is not possible, as a script that runs &quot;/jail = /jail&quot; for instance, would simply be calling whatever plugin that actually provides the jail functionality&apos;s /jail command. However, using this function makes the command loop back to CommandHelper only. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1087</id>
	<key><![CDATA[Adds enchantments to an item in the player&apos;s inventory. A single enchantment type and level can be specified or an enchantment array may be given. If slot is %s, the currently selected slot is used. If an enchantment cannot be applied to the specified item, an EnchantmentException is thrown. The enchantment array must have the enchantment as keys and levels as the values. (eg. array(&apos;unbreaking&apos;: 1)) The minecraft names for enchantments may be used: [%s], and the level parameter may be a roman numeral as well.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1088</id>
	<key><![CDATA[Replaces all instances of &apos;search&apos; with &apos;replacement&apos; in &apos;subject&apos;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1089</id>
	<key><![CDATA[Returns an associative array containing the values of all existing gamerules for the given world. If the gameRule parameter is specified, the function only returns that one value instead of an array. The gameRule can be ANNOUNCEADVANCEMENTS, COMMANDBLOCKOUTPUT, DISABLEELYTRAMOVEMENTCHECK, DODAYLIGHTCYCLE, DOENTITYDROPS, DOFIRETICK, DOLIMITEDCRAFTING, DOMOBLOOT, DOMOBSPAWNING, DOTILEDROPS, DOWEATHERCYCLE, KEEPINVENTORY, LOGADMINCOMMANDS, MAXCOMMANDCHAINLENGTH, MAXENTITYCRAMMING, MOBGRIEFING, NATURALREGENERATION, RANDOMTICKSPEED, REDUCEDDEBUGINFO, SENDCOMMANDFEEDBACK, SHOWDEATHMESSAGES, SPAWNRADIUS, SPECTATORSGENERATECHUNKS, or DISABLERAIDS.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1090</id>
	<key><![CDATA[Remove the metadata in the given object at the given key. object can be a location array (it will designate a block), an entityID (it will designate an entity) or a string (it will designate a world). If only the key is given, the object is the current player. If no plugin is given, the function removes all metadata at the given key, otherwise only the value set by the given plugin. See get_metadata() for more informations about Bukkit metadata.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1091</id>
	<key><![CDATA[Sets whether a living entity will despawn. True means it will not.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1092</id>
	<key><![CDATA[Converts old pre-1.13 item arrays to new item arrays. Almost all item arrays will be converted successfully when passing them to a function that accepts item arrays. However, if the array is missing the &apos;type&apos; key, several item types might not convert accurately due to name conflicts. This function offers convenience and ensures better conversion accuracy. Use this if you have item arrays stored in a database and want to convert them all at once. Passing new item arrays to this function is not supported. Conversions may not be supported in far future versions of Minecraft.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1093</id>
	<key><![CDATA[Plays a note for the given player, at the given note block location. Player defaults to the current player, and location defaults to the player&apos;s location. Instrument may be one of: PIANO, BASS_DRUM, SNARE_DRUM, STICKS, BASS_GUITAR, FLUTE, BELL, GUITAR, CHIME, XYLOPHONE, IRON_XYLOPHONE, COW_BELL, DIDGERIDOO, BIT, BANJO, or PLING, and note is an associative array with 2 values, array(octave: 0, tone: &apos;F#&apos;) where octave is either 0, 1, or 2, and tone is one of the notes G, A, B, C, D, E, or F, optionally suffixed with a pound symbol, which denotes a sharp. (Not all notes can be sharped.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1094</id>
	<key><![CDATA[Creates a world with the specified options. If a world by that name already exists, it will instead be loaded from disk, and the last three arguments may be ignored. The name is the name of the world, type is one of NORMAL, FLAT, VERSION_1_1, LARGE_BIOMES, AMPLIFIED, CUSTOMIZED, BUFFET and environment is one of NORMAL, NETHER, THE_END. The seed can be an integer, a string (will be the hashcode), or %s (will be random int). Generator is the name of a world generator loaded on the server.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1095</id>
	<key><![CDATA[Returns various information about the player specified, or the current player if no argument was given. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1096</id>
	<key><![CDATA[locationArray, distance, %s[%stype%s]%s %s locationArray, distance, %s[%sarrayTypes%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1097</id>
	<key><![CDATA[OAuth]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1098</id>
	<key><![CDATA[string command]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1099</id>
	<key><![CDATA[world, %s[%sgameRule%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1100</id>
	<key><![CDATA[Creates a new thread, named id, and runs the closure on that thread. Note that many operations are not advisable to be run on other threads, and unless otherwise stated, functions are generally not thread safe. You can use x_run_on_main_thread_later() and x_run_on_main_thread_now() to ensure operations will be run correctly, however.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1101</id>
	<key><![CDATA[Updates the world&apos;s border with the given values. In addition to the keys returned by get_world_border(), you can also specify the &quot;seconds&quot;. This is time in which the border will move from the previous width to the new &quot;width&quot;.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1102</id>
	<key><![CDATA[Opens an inventory for a player. The specifier must be an entity UUID, location array of a container block, or a virtual inventory id.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1103</id>
	<key><![CDATA[key, %s[%sdefault%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1104</id>
	<key><![CDATA[Sets the distance the entity has fallen.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1105</id>
	<key><![CDATA[Executes the given closure in the context of a given player or ~console. A closure that runs player(), for instance, would return the specified player&apos;s name. The label argument sets the permission label that this closure will use. If %s is given, the current label will be used, like with execute().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1106</id>
	<key><![CDATA[Returns the cos of the number]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1107</id>
	<key><![CDATA[Returns an associative array containing all the data of the given entity that are too specific to have its own function. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1108</id>
	<key><![CDATA[Returns the result of a greater than or equal to operation. Operator sytnax is also supported: @a &amp;gt;= @b]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1109</id>
	<key><![CDATA[Sets a player&apos;s hunger level, where 0 is empty and 20 is full.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1110</id>
	<key><![CDATA[Returns true if the argument is a closure (could be executed) or false otherwise]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1111</id>
	<key><![CDATA[array, index]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1112</id>
	<key><![CDATA[Resizes the given array so that it is at least of size size, filling the blank spaces with fill, or %s by default. If the size of the array is already at least size, nothing happens; in other words this function can only be used to increase the size of the array. A reference to the array is returned, for easy chaining.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1113</id>
	<key><![CDATA[Returns a random selection of keys or values from an array. The array may be either normal or associative. Number defaults to 1, and getKey defaults to true. If number is greater than the size of the array, a RangeException is thrown. No value will be returned twice from the array however, one it is &quot;drawn&quot; from the array, it is not placed back in. The order of the elements in the array will also be random, if order is important, use array_sort().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1114</id>
	<key><![CDATA[Returns a random number from 0 to max, or min to max, depending on usage. Max is exclusive. Min must be less than max, and both numbers must be &gt;= 0. This will return an integer. Alternatively, you can pass no arguments, and a random double, from 0 to 1 will be returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1115</id>
	<key><![CDATA[none]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1116</id>
	<key><![CDATA[Logs a message to the console. If prefix is true, prepends &quot;CommandHelper:&quot; to the message. Default is true. If you wish to set the default value of prefix to false, use set_runtime_setting(&apos;function.console.prefix_default&apos;, false).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1117</id>
	<key><![CDATA[Returns a new byte_array primitive, starting from pos (or wherever the marker is by default) to length.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1118</id>
	<key><![CDATA[Returns an array of all the players within the given radius.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1119</id>
	<key><![CDATA[This function imports a value from the global value register. It looks for a value stored with the specified key (using the export function), and returns that value. If specified key doesn&apos;t exist, it will return either %s or the default value if specified. An array may be used as a key. It is converted into a string with the array values separated by dots. import() is threadsafe.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1120</id>
	<key><![CDATA[Return the log of a number to the specified base, or the mathematical constant e if no base is provided (or ln). If val is less than or equal to zero, a RangeException is thrown. Mathematically speaking, if val is 0, then the result would be negative infinity, and if it is less than 0 it is undefined (NaN), but since MethodScript has no way of representing either of these, a RangeException is thrown instead.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1121</id>
	<key><![CDATA[seconds]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1122</id>
	<key><![CDATA[Returns a vector from the yaw and pitch in a location array. All other values in the location array are ignored. The second parameter, that defines the magnitude of the vector, defaults to 1.0.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1123</id>
	<key><![CDATA[ClassType%s type, params...]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1124</id>
	<key><![CDATA[Returns the UUID of the given entity&apos;s rider, or %s if it doesn&apos;t have one. If there are multiple riders, only the first is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1125</id>
	<key><![CDATA[entityType, %s[%sqty%s]%s, %s[%slocation%s]%s, %s[%sclosure%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1126</id>
	<key><![CDATA[Sets the maximum amount of air the specified living entity can have.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1127</id>
	<key><![CDATA[[%splayer%s]%s, header]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1128</id>
	<key><![CDATA[This class allows manipulation of entity metadata.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1129</id>
	<key><![CDATA[array, array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1130</id>
	<key><![CDATA[Applies the data from the given array to the item at the specified slot. Unused fields will be ignored. If %s or an empty array is supplied, or if none of the given fields are applicable, the item will become default, as this function overwrites any existing data. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1131</id>
	<key><![CDATA[Sets the data in the specArray to the given entity. The specArray must follow the same format as entity_spec(). See the documentation for that function for info on available options. All indices in the specArray are optional.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1132</id>
	<key><![CDATA[Generates a tree at the given location and returns if the generation succeeded or not. The treeType can be TREE, BIG_TREE, REDWOOD, TALL_REDWOOD, BIRCH, JUNGLE, SMALL_JUNGLE, JUNGLE_BUSH, RED_MUSHROOM, BROWN_MUSHROOM, SWAMP, ACACIA, DARK_OAK, COCOA_TREE, MEGA_REDWOOD, TALL_BIRCH, or CHORUS_PLANT, defaulting to TREE.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1133</id>
	<key><![CDATA[Sends a plugin message to the player. Channel name should be a string that is all lower-case, no longer than 32 characters, and contain a colon, or it will throw an IllegalArgumentException. The message should be a byte_array primitive. Depending on the plugin, these parameters will vary. If message is %s an empty byte_array is sent.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1134</id>
	<key><![CDATA[val]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1135</id>
	<key><![CDATA[Returns a new read only copy of the underlying byte array. This array is much more efficient than if the array were made manually, however, it is read only. If you need to manipulate the array&apos;s contents, then you can clone the array, however, the returned array (and any clones) cannot be automatically interfaced with the byte array primitives. This operation is discouraged, because normal arrays are very inefficient for dealing with low level bit data.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1136</id>
	<key><![CDATA[entityUUID, int%s[%s, lockAge%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1137</id>
	<key><![CDATA[assign, condition, expression1, expression2]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1138</id>
	<key><![CDATA[Determines if the character provided is uppercase or not. The string must be exactly 1 character long and a letter, otherwise a FormatException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1139</id>
	<key><![CDATA[Gets the type the block at the location.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1140</id>
	<key><![CDATA[Adds an enchantment to an item in the player&apos;s inventory. Type can be a single string, or an array of enchantment names. If slot is %s, the currently selected slot is used. If the enchantment cannot be applied to the specified item, an EnchantmentException is thrown, and if the level specified is not valid, a RangeException is thrown. If type is an array, level must also be an array, with equal number of values in it, with each int corresponding to the appropriate type. The minecraft names for enchantments may be used: [%s], and level may be a roman numeral as well.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1141</id>
	<key><![CDATA[Gets the entity type that will spawn from the specified mob spawner.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1142</id>
	<key><![CDATA[[%sobject%s]%s, key, value %s object, key, value, %s[%splugin%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1143</id>
	<key><![CDATA[[%splayer%s]%s, health]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1144</id>
	<key><![CDATA[Writes the text to the system&apos;s std out, but does not automatically add a newline at the end. Unlike console(), this does not use anything else to format the output, though in many cases they will behave the same. Unlike other print methdods, colors and other formatting characters WILL &quot;bleed&quot; through, so print_out(color(RED) . &apos;This is red&apos;) will also cause the next line to also be red, so if you need to print multiple lines out, you should manually reset the color with print_out(color(RESET)), or use sys_out..]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1145</id>
	<key><![CDATA[This class of functions allow entities to be managed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1146</id>
	<key><![CDATA[Threading]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1147</id>
	<key><![CDATA[[%splayer%s]%s, level]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1148</id>
	<key><![CDATA[Gets the inventory information for the specified player, or the current  player if none specified. If the index is specified, only the slot given will be returned. The index of the array in the array is 0 - 35, 100 - 103, -106, which corresponds to the slot in the player&apos;s inventory. To access armor slots, you may also specify the index. (100 - 103). The quick bar is 0 - 8. If index is %s, the item in the player&apos;s hand is returned, regardless of what slot is selected. If index is -106, the player&apos;s off-hand item is returned. If there is no item at the slot specified, %s is returned. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1149</id>
	<key><![CDATA[Returns the keys in this array as a normal array. If the array passed in is already a normal array, the keys will be 0 -&gt; (array_size(array) - 1)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1150</id>
	<key><![CDATA[Returns the value of a file at compile time only. Unlike read, this runs and is fully resolved at compile time. This is useful for optimization reasons, if you have a file that is unchanging, this can be used instead of read(), to prevent a runtime hit each time the code is executed. Otherwise, this method is equivalent to read(). The path must be fully resolved at compile time.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1151</id>
	<key><![CDATA[Returns the inventory type at the location specified, or of the entity specified. If the entity or location specified is not capable of having an inventory, a FormatException is thrown. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1152</id>
	<key><![CDATA[Recipes]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1153</id>
	<key><![CDATA[Returns whether the specified living entity will despawn. True means it will not.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1154</id>
	<key><![CDATA[Returns the bitwise AND of the values]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1155</id>
	<key><![CDATA[Sets the code that will be run when a user attempts to execute a command. The closure can return true false (treated as true by default). Returning false will display The usage message if it is set. The closure is passed the following information in this order: alias used, name of the sender, array of arguments used, array of command info.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1156</id>
	<key><![CDATA[Uses a strict equals check, which determines if two values are not only equal, but also the same type. So, while equals(&apos;1&apos;, 1) returns true, sequals(&apos;1&apos;, 1) returns false, because the first one is a string, and the second one is an int. More often than not, you want to use plain equals(). In addition, type juggling is explicitely not performed on strings. Thus &apos;2&apos;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1157</id>
	<key><![CDATA[Defines a new object. Not meant for normal use.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1158</id>
	<key><![CDATA[base64data]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1159</id>
	<key><![CDATA[specifier]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1160</id>
	<key><![CDATA[Registers a metadata value in the given object with the given key. object can be a location array (it will designate a block), an entityID (it will designate an entity) or a string (it will designate a world). If only the key and the value are given, the object is the current player. You can specify the plugin that will own the metadata, &apos;MethodScript&apos; by default. See get_metadata() for more informations about Bukkit metadata.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1161</id>
	<key><![CDATA[Reads in a gzipped file, and returns a byte_array for it. The file is returned exactly as is on disk, no conversions are done. base-dir restrictions are enforced for the path, the same as read(). If file is relative, it is assumed to be relative to this file.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1162</id>
	<key><![CDATA[locationArray, %s[%streeType%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1163</id>
	<key><![CDATA[Works like a normal for loop, but if upon checking the condition the first time, it is determined that it is false (that is, NO code loops are going to be run) the else code is run instead. If the loop runs, even once, it will NOT run the else branch. In general, brace syntax and use of for(){ } else { } syntax is preferred, instead of using forelse directly.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1164</id>
	<key><![CDATA[Writes an int, interpreted as a 32 bit int, starting from the given position, or wherever the marker is currently at by default.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1165</id>
	<key><![CDATA[Returns meta information about the activity in regards to this event. This is meant as a debug tool.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1166</id>
	<key><![CDATA[Provides functions for manipulating a world]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1167</id>
	<key><![CDATA[Sets a living entity&apos;s ability to pick up items.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1168</id>
	<key><![CDATA[locale, formatString, parameters... %s locale, formatString, array(parameters...)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1169</id>
	<key><![CDATA[Returns if the given object has metadata registered with this key. object can be a location array (it will designate a block), an entityID (it will designate an entity) or a string (it will designate a world). If only the key is given, the object is the current player. If the plugin is given, the function returns if the plugin have registered a metadata in the object with the given key. See get_metadata() for more informations about Bukkit metadata.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1170</id>
	<key><![CDATA[expression, %s[%svalueArray%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1171</id>
	<key><![CDATA[Returns the player&apos;s hunger level.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1172</id>
	<key><![CDATA[Clears the screen. This only works from cmdline mode, nothing happens otherwise.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1173</id>
	<key><![CDATA[Filters an array by callback. The items in the array are iterated over, each one sent to the closure one at a time, as key, value. The closure should return true if the item should be included in the array, or false if not. The filtered array is then returned by the function. If the array is associative, the keys will continue to map to the same values, however a normal array, the values are simply pushed onto the new array, and won&apos;t correspond to the same values per se.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1174</id>
	<key><![CDATA[Returns the square root of a number. Note that this is mathematically equivalent to pow(number, .5). Imaginary numbers are not supported, so number must be positive.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1175</id>
	<key><![CDATA[Converts the number to degrees (which is assumed to have been in radians)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1176</id>
	<key><![CDATA[number percentile, array%s %s number percentile, number input...]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1177</id>
	<key><![CDATA[Reads and compiles specified *.ms files. This can be used for files already compiled with include(). Scripts that then include() these files will use the updated code. The path can be a directory or file. It is executed recursively through all subdirectories. If there&apos;s a compile error in any of the files, the function will throw an exception and other scripts will continue to use the previous version of the code when included. Returns number of files recompiled.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1178</id>
	<key><![CDATA[param, %s[%sargs, ...%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1179</id>
	<key><![CDATA[Replaces any occurances of pattern with the replacement in subject. Back references are allowed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1180</id>
	<key><![CDATA[ObjectManagement]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1181</id>
	<key><![CDATA[Returns true if the values are the same type, as well as equal, according to equals_ic. Generally, equals_ic will suffice, because usually you will be comparing two strings, however, this function may be useful in various other cases, perhaps where the datatypes are unknown, but could be strings.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1182</id>
	<key><![CDATA[Executes the given closure. You can also send arguments to the closure, which it may or may not use, depending on the particular closure&apos;s definition. If the closure returns a value with return(), then that value will be returned with execute. Otherwise, %s is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1183</id>
	<key><![CDATA[Sets the mob spawner&apos;s entity type at the location specified. If the location is not a mob spawner, or if the type is invalid, a FormatException is thrown. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1184</id>
	<key><![CDATA[[%splayer%s]%s, isVanished, otherPlayer]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1185</id>
	<key><![CDATA[Creates a merchant that can be traded with by players but is not attached to a physical entity. The ID given should not be a UUID. The title is the text that will display at the top of the window while a player is trading with it. Created merchants will persist across recompiles, but not across server restarts. An exception will be thrown if a merchant already exists using the given ID.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1186</id>
	<key><![CDATA[Returns this string as a byte_array, encoded using the specified encoding, or UTF-8 if no encoding is specified. Valid encodings are the encoding types that java supports. If the encoding is invalid, a FormatException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1187</id>
	<key><![CDATA[Returns the thread id (thread name) of the currently running thread.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1188</id>
	<key><![CDATA[Executes the command if and only if on the given operating system (one of WINDOWS, MAC, LINUX, SOLARIS, or UNKNOWN). If not on the specified OS, this command does nothing. The os argument may be a pipe seperated list of OSes, for instance &apos;MAC|LINUX&apos;, which is useful given that both are unix based, and often times the same command will work for both. Otherwise completely equivalent to %s. This is useful, because usually a command is tailored to a specific OS, and simply won&apos;t run on other OSes. This allows you to create similar commands across various OSes, and ensure that they only run for the correct OS.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1189</id>
	<key><![CDATA[name, %s[%sscoreboard%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1190</id>
	<key><![CDATA[Sets the biome of the specified block column. The location array&apos;s y value is ignored. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1191</id>
	<key><![CDATA[Concatenates any number of arguments together, but puts a space between elements]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1192</id>
	<key><![CDATA[Takes a YML encoded string, and returns an associative array, depending on the contents of the YML string. If the YML string is improperly formatted, a FormatException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1193</id>
	<key><![CDATA[Returns an array of numbers from start to (finish - 1) skipping increment integers per count. start defaults to 0, and increment defaults to 1. All inputs must be integers. If the input doesn&apos;t make sense, it will reasonably degrade, and return an empty array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1194</id>
	<key><![CDATA[[%splayer%s]%s, slot, type, level %s %s[%splayer%s]%s, slot, enchantsArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1195</id>
	<key><![CDATA[Returns whether or not the player has the ability to fly.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1196</id>
	<key><![CDATA[specifier, %s[%splayer%s]%s, %s[%sforce%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1197</id>
	<key><![CDATA[float]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1198</id>
	<key><![CDATA[World]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1199</id>
	<key><![CDATA[Works like runas, except any messages sent to the command sender during command execution are attempted to be intercepted, and are then returned as a string, instead of being sent to the command sender. Note that this is VERY easy for plugins to get around in such a way that this function will not work, this is NOT a bug in CommandHelper, nor is it necessarily a problem in the other plugin either, but the other plugin will have to make changes for it to work properly. A PluginInternalException is thrown if something goes wrong. Any number of things may go wrong that aren&apos;t necessarily this function&apos;s fault, and in those cases, this exception is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1200</id>
	<key><![CDATA[Returns a team array for this player, or %s if not in a team. Contains the keys name, displayname, color, prefix, suffix, size, options, and players.Scoreboard defaults to &apos;main&apos; if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1201</id>
	<key><![CDATA[Returns the lowest number in a given list of numbers. If any of the arguments are arrays, they are expanded into individual numbers, and also compared.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1202</id>
	<key><![CDATA[Executes the command if and only if on the given operating system (one of WINDOWS, MAC, LINUX, SOLARIS, or UNKNOWN). If not on the specified OS, this command returns %s. The os argument may be a pipe seperated list of OSes, for instance &apos;MAC|LINUX&apos;, which is useful given that both are unix based, and often times the same command will work for both. Otherwise completely equivalent to %s. This is useful, because usually a command is tailored to a specific OS, and simply won&apos;t run on other OSes. This allows you to create similar commands across various OSes, and ensure that they only run for the correct OS.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1203</id>
	<key><![CDATA[resource, toAppend...]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1204</id>
	<key><![CDATA[Sets the value of an environment variable. This only changes the environment value in this process, not system-wide. This uses some hackery to work, and may not be 100% reliable in all cases, and shouldn&apos;t be relied on heavily. It will always work with get_env, however, so you can rely on that mechanism. The value will always be interpreted as a string, so if you are expecting a particular data type on a call to get_env, you will need to manually cast the variable. Arrays will be toString&apos;d as well, but will be accepted.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1205</id>
	<key><![CDATA[Echoes a message to the player running the command]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1206</id>
	<key><![CDATA[Returns the element specified at the index of the array. If the element doesn&apos;t exist, an exception is thrown. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1207</id>
	<key><![CDATA[The first is the entity that is targeting, the second is the target. It can also be set to %s to clear the current target. Not all mobs can have their target set.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1208</id>
	<key><![CDATA[Sets the age of the entity to the specified int, represented by server ticks.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1209</id>
	<key><![CDATA[ArrayHandling%sBasicLogic%sBossBar%sBukkitMetadata%sByteArrays%sClipboard%sCmdline%sCommands%sCompiler%sControlFlow%sCrypto%sDataHandling%sDataTransformations%sDebug%sEchoes%sEnchantments%sEntityManagement%sEnvironment%sEventBinding%sExceptions%sExecutionQueue%sExtensionMeta%sFileHandling%sInventoryManagement%sItemMeta%sMarquee%sMath%sMeta%sMinecraft%sMobManagement%sOAuth%sObjectManagement%sPerformance%sPermissions%sPersistence%sPlayerManagement%sPluginMeta%sRecipes%sReflection%sRegex%sResourceManager%sSQL%sSandbox%sScheduling%sScoreboards%sStatistics%sStringHandling%sTaskHandling%sThreading%sTrades%sWeather%sWeb%sWorld%sXGUI]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1210</id>
	<key><![CDATA[Returns a new construct that has been cast to a boolean. The item is cast according to the boolean conversion rules. Since all data types can be cast to a a boolean, this function will never throw an exception.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1211</id>
	<key><![CDATA[entityUUID, entityUUID]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1212</id>
	<key><![CDATA[Makes lightning strike at the x y z coordinates specified in the array or arguments. Safe defaults to false, but if true, lightning striking a player will not hurt them. Returns the UUID of the lightning bolt entity.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1213</id>
	<key><![CDATA[Returns the shooter of the given projectile, can be %s. If the shooter is an entity, that entity&apos;s ID will be return, but if it is a block, that block&apos;s location will be returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1214</id>
	<key><![CDATA[[%splayer%s]%s, vector %s %s[%splayer%s]%s, x, y, z]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1215</id>
	<key><![CDATA[Asynchronously makes a query to an SQL server. The profile, query, and params arguments work the same as %s, so see the documentation of that function for details about those parameters. The callback should have the following signature: closure(@contents, @exception){ &amp;lt;code&amp;gt; }. @contents will contain the return value that query would normally return. If @exception is not %s, then an exception occurred during the query, and that exception will be passed in. If @exception is %s, then no error occured, though @contents may still be %s if query() would otherwise have returned %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1216</id>
	<key><![CDATA[Returns true if gravity applies to the entity.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1217</id>
	<key><![CDATA[Returns the average (also known as the mean) across all the numbers in the set. The input may be an array of numbers, or individual numbers as arguments. The average of a set of numbers is the result of adding all the numbers in the set, and dividing it by the number of values in the set.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1218</id>
	<key><![CDATA[Gets the world of the player specified, or the current player if playerName isn&apos;t specified.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1219</id>
	<key><![CDATA[exceptionType, msg, %s[%scausedBy%s]%s %s exception]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1220</id>
	<key><![CDATA[Sets a task to run in the specified number of ms in the future. The task will only run once. Note that the resolution of the time is in ms, however, the server will only have a resolution of up to 50 ms, meaning that a time of 1-50ms is essentially the same as 50ms.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1221</id>
	<key><![CDATA[entityUUID, specArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1222</id>
	<key><![CDATA[Sets whether or not entity produces sounds]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1223</id>
	<key><![CDATA[[%svar1, [var2...%s]%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1224</id>
	<key><![CDATA[Returns the UUID of the vehicle which the player is riding, or %s if player is not riding a vehicle.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1225</id>
	<key><![CDATA[Writes a double, interpreted as a 32 bit float, starting from the given position, or wherever the marker is currently at by default.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1226</id>
	<key><![CDATA[resource]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1227</id>
	<key><![CDATA[Sets the way two entities are stacked. Horse and rider are entity ids. If rider is %s, horse will eject its current rider, if it has one. If horse is %s, rider will leave whatever it is riding. If horse and rider are both valid entities, rider will ride horse. The function returns the success of whatever operation is done. If horse and rider are both %s, or otherwise the same, a FormatException is thrown. If a horse already has a rider, this will add the new rider without ejecting the existing one.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1228</id>
	<key><![CDATA[Sets the color of the leather armor at the given slot. colorArray should be an array that matches one of the formats: array(r: 0, g: 0, b: 0) array(red: 0, green: 0, blue: 0) array(0, 0, 0)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1229</id>
	<key><![CDATA[If this command was being run from a command block block or minecart, this will return the location of the block or minecart. The yaw and pitch will only be included in the locationArray for minecart command blocks. If a player or console ran this command (or any other command sender), this will return %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1230</id>
	<key><![CDATA[Stops the interval or timeout that is specified. The id can be gotten by storing the integer returned from either set_timeout or set_interval. An invalid id is simply ignored. The clear_task function is more useful for set_timeout, where you may queue up some task to happen in the far future, yet have some trigger to prevent it from happening. ID is optional, but only if called from within a set_interval or set_timeout closure, in which case it defaults to the id of that particular task.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1231</id>
	<key><![CDATA[Returns whether or not this player is whitelisted. This will work with offline players, but the name must be exact. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1232</id>
	<key><![CDATA[Returns the sha1 hash of the specified string. Note that sha1 is considered more secure than md5, but is also not considered secure. sha-256 should be used instead for storing sensitive data. It is a one way hashing algorithm. This function is aware of and compatible with secure_string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1233</id>
	<key><![CDATA[Gets all recipes that have a result of the given item. NOTE: Gets all recipes for result item regardless of meta and enchants, although the array has correct data.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1234</id>
	<key><![CDATA[A series of functions for creating and managing custom commands.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1235</id>
	<key><![CDATA[Returns the size of this array as an integer.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1236</id>
	<key><![CDATA[Determines if the provided teststring starts with the provided keyword. This could be used to find the prefix of a line, for instance. Note that this will cast both arguments to strings. This means that the boolean true will match the string &apos;true&apos; or the integer 1 will match the string &apos;1&apos;. If an empty string is provided for the keyword, it will always return true.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1237</id>
	<key><![CDATA[Sets the player list header for a player. This is the text that appears above the player list that appears when hitting the tab key. Colors and new lines are accepted. Only the given player (or current player if none is given) will see these changes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1238</id>
	<key><![CDATA[PlayerManagement]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1239</id>
	<key><![CDATA[array, %s[%skey%s]%s, ivar, code]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1240</id>
	<key><![CDATA[[%splayer%s]%s, material, cooldown]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1241</id>
	<key><![CDATA[Environment]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1242</id>
	<key><![CDATA[Removes the specified entity from the world, without any drops or animations. Note: you can&apos;t remove players. As a safety measure for working with NPC plugins, it will not work on anything human, even if it is not a player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1243</id>
	<key><![CDATA[booleanValue]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1244</id>
	<key><![CDATA[closure(@ex)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1245</id>
	<key><![CDATA[Deletes a virtual merchant if one by the given ID exists. Returns true if one was removed, or false if there was no match for the ID.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1246</id>
	<key><![CDATA[This is a test function, which demonstrates to extension authors how to make a composite function. It returns true if a and b added together are greater than 0, false otherwise.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1247</id>
	<key><![CDATA[A class of functions for manipulating the server scoreboard.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1248</id>
	<key><![CDATA[If set to true the entity cannot be damaged, except by players in creative mode]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1249</id>
	<key><![CDATA[DataHandling]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1250</id>
	<key><![CDATA[Spawns the specified number of entities of the given type at the given location. Returns an array of entity UUIDs of what is spawned.  Qty defaults to 1 and location defaults to the location of the commandsender, if it is a block or player. If the commandsender is console, location must be supplied. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1251</id>
	<key><![CDATA[unregisters a command from the server&apos;s command list]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1252</id>
	<key><![CDATA[EventBinding]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1253</id>
	<key><![CDATA[Returns a list of all defined compiler warnings, which can be suppressed using the suppressWarnings file option]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1254</id>
	<key><![CDATA[Searches for the given pattern, and returns an array with the results. Captures are supported. If the pattern is not found anywhere in the subject, an empty array is returned. The indexes of the array follow typical regex fashion; the 0th element is the whole match, and 1-n are the captures specified in the regex.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1255</id>
	<key><![CDATA[Throws a compile error unconditionally at link time, if the function has not been fully compiled out with preprocessor directives. This is useful for causing a custom compile error if certain compilation environment settings are not correct.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1256</id>
	<key><![CDATA[byte_array, string, %s[%spos%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1257</id>
	<key><![CDATA[Removes an enchantment from an item. The type may be a valid enchantment, or an array of enchantment names. It can also be %s, and all enchantments will be removed. If an enchantment is specified, and the item is not enchanted with that, it is simply ignored.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1258</id>
	<key><![CDATA[parameter]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1259</id>
	<key><![CDATA[The core exception types are:  %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, and]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1260</id>
	<key><![CDATA[Returns the angle theta from the conversion of rectangular coordinates (x, y) to polar coordinates (r, theta). This method computes the phase theta by computing an arc tangent of y/x in the range of -pi to pi.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1261</id>
	<key><![CDATA[Gets the time left on the player&apos;s cooldown for the specified item type. This returns an integer representing the time in server ticks until any items of this material can be used again by this player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1262</id>
	<key><![CDATA[value]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1263</id>
	<key><![CDATA[byte_array, double, %s[%spos%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1264</id>
	<key><![CDATA[Returns the redstone power level that is supplied to this block [0-15]. If is_block_powered(locationArray, &apos;DIRECT_ONLY&apos;) returns true, a redstone dust placed at the given location would be powered the return value - 1.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1265</id>
	<key><![CDATA[Returns the size of a file on the file system.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1266</id>
	<key><![CDATA[Changes the current working directory to the path specified, or the user&apos;s home directory if omitted. This only works from cmdline mode.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1267</id>
	<key><![CDATA[Returns true if the specified queue still has tasks running on it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1268</id>
	<key><![CDATA[byte_array, int, %s[%spos%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1269</id>
	<key><![CDATA[If an empty array is provided, a IndexOverflowException is thrown. If the percentile is not within the range of 0 or 1, a RangeException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1270</id>
	<key><![CDATA[Sets a player&apos;s walk speed. The speed must be between -1.0 and 1.0. The default player walk speed is 0.2.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1271</id>
	<key><![CDATA[Returns the UUID of the current player or the specified player. This will attempt to find an offline player, but if that also fails, a PlayerOfflineException will be thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1272</id>
	<key><![CDATA[Reads the input from a process that is piped to this script. It is assumed that the data piped to the script will come all at once, and it will be returned as a string (or byte_array if binary is true). This can only be used in cmdline mode, and binary defaults to false. If the script isn&apos;t started in TTY mode, an IOException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1273</id>
	<key><![CDATA[Searches subject for all matches to the regular expression given in pattern, unlike reg_match, which just returns the first match.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1274</id>
	<key><![CDATA[array1, array2, %s[%sarrayN...%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1275</id>
	<key><![CDATA[Returns the current width of the terminal, measured in characters. This is useful for determining proper layout for dynamic output. This only works in cmdline mode.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1276</id>
	<key><![CDATA[int]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1277</id>
	<key><![CDATA[command]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1278</id>
	<key><![CDATA[entityUUID, double]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1279</id>
	<key><![CDATA[Reads a field from some xml using an XPath address. The XPath address is assumed to be absolute, even if it doesn&apos;t start with a &apos;/&apos;.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1280</id>
	<key><![CDATA[locationArray, lineArray %s locationArray, line1, %s[%sline2, [line3, [line4%s]%s]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1281</id>
	<key><![CDATA[Returns true if the item at the given slot is a piece of leather armor, that is, if dying it is allowed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1282</id>
	<key><![CDATA[Sets a player&apos;s fly speed. The speed must be between -1.0 and 1.0. The default player fly speed is 0.1.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1283</id>
	<key><![CDATA[Finds the index in the array where value occurs last. If the value is not found, returns %s. That is to say, if the value is contained in an array (even multiple times) the index of the last element is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1284</id>
	<key><![CDATA[Provides access to the server's underlying permissions system. Permissions functionality is only as good as the management system in place, however, and so not all functions may be supported on a given system.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1285</id>
	<key><![CDATA[Checks to see if testValue is in array. For associative arrays, only the values are searched, the keys are ignored. If you need to check for the existence of a particular key, use array_index_exists().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1286</id>
	<key><![CDATA[value1, value2]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1287</id>
	<key><![CDATA[Converts a string representation of an integer to a real integer, given the value&apos;s radix (base). See %s for a more detailed explanation of number theory. Radix must be between 2 and 36, inclusive.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1288</id>
	<key><![CDATA[Returns a list of locales on this system.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1289</id>
	<key><![CDATA[Sets the value of the array at the specified index. The value that was set is returned, to allow for chaining.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1290</id>
	<key><![CDATA[Fires when an item entity comes into existance.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1291</id>
	<key><![CDATA[vehicletype%spassengertype%svehicle%s: entityID%spassenger%s: entityID%splayer%s: player name if passenger is a player, %s otherwise]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1292</id>
	<key><![CDATA[state%s: %s&lt;Macro&gt; Can be one of CAUGHT_ENTITY, CAUGHT_FISH, FAILED_ATTEMPT, FISHING, IN_GROUND, BITE, or REEL_IN%splayer%s: %s&lt;Macro&gt; The player who is fishing%sworld%s: %s&lt;String Match&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1293</id>
	<key><![CDATA[newmode%s: %s&lt;Macro&gt; gamemode being changed to, one of SURVIVAL, CREATIVE, ADVENTURE, or SPECTATOR%splayer%s: %s&lt;Macro&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1294</id>
	<key><![CDATA[player%s: The player which edited the book%sslot%s: The inventory slot number where the book is%soldbook%s: The book before the editing (an array with keys title, author and pages)%snewbook%s: The book after the editing (an array with keys title, author and pages)%ssigning%s: Whether or not the book is being signed]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1295</id>
	<key><![CDATA[to%screationradius%ssearchradius]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1296</id>
	<key><![CDATA[player%sstatus%s: The resource pack status received from the client, one of]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1297</id>
	<key><![CDATA[Called when a player toggles their flying state.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1298</id>
	<key><![CDATA[sign_changed]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1299</id>
	<key><![CDATA[vehicletype%s: %s&lt;Macro&gt; the entitytype of the vehicle%spassengertype%s: %s&lt;Macro&gt; the enitytype of the passenger]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1300</id>
	<key><![CDATA[item%s: A different item to be consumed, changing this will cause the original item to remain in the inventory]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1301</id>
	<key><![CDATA[viewers%s: all humanentities viewing the screen this event takes place in%smatrix%sresult%sisRepair%s: true if this event was triggered by a repair operation (different than normal crafting)%srecipe%s: information about the formed recipe, or %s if there is not one]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1302</id>
	<key><![CDATA[xp%sdrops%s: The items will be replaced by the given items%sdeath_message%skeep_inventory%skeep_level%snew_exp%snew_level%snew_total_exp]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1303</id>
	<key><![CDATA[reason%s: %s&lt;Macro&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1304</id>
	<key><![CDATA[block_grow]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1305</id>
	<key><![CDATA[1%s2%s3%s4%stext%s: An array with keys 0 thru 3 defining every line on the sign]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1306</id>
	<key><![CDATA[Fired when a player closes an inventory.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1307</id>
	<key><![CDATA[WeatherEvents]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1308</id>
	<key><![CDATA[This event is fired off when a player runs any command at all. This actually fires before normal  CommandHelper aliases, allowing you to insert control before defined aliases, even.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1309</id>
	<key><![CDATA[This event is called when a player places a block. Cancelling the event cancels placing the block.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1310</id>
	<key><![CDATA[Called when a player toggles their sprinting state.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1311</id>
	<key><![CDATA[Fired when a player enchants an item.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1312</id>
	<key><![CDATA[collide%s: whether the vehicle hits the entity or passes through it%spickup%s: whether or not the vehicle pick up the entity%sboth fields can only be modified for entity collisions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1313</id>
	<key><![CDATA[Fired when an entity travels through a portal.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1314</id>
	<key><![CDATA[type%s: %s&lt;Macro&gt; The entity type of the projectile%sworld%s: %s&lt;Macro&gt;%sshootertype%s: %s&lt;Macro&gt; The entity type of the shooter, or 'block', or '%s']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1315</id>
	<key><![CDATA[player%s: %s&lt;Macro&gt; The player that switched worlds%sfrom%s: %s&lt;String Match&gt; The world the player is coming from%sto%s: %s&lt;String Match&gt; The world the player is now in]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1316</id>
	<key><![CDATA[id%s: The entity ID of regained entity%samount%s: The amount of regained the health%scause%s: The cause of regain, one of REGEN, SATIATED, EATING, ENDER_CRYSTAL, MAGIC, MAGIC_REGEN, WITHER_SPAWN, WITHER, CUSTOM%splayer%s: The regained player]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1317</id>
	<key><![CDATA[entity_death]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1318</id>
	<key><![CDATA[This event is called when a block ignited by a block or entity.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1319</id>
	<key><![CDATA[Fires when any living entity dies.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1320</id>
	<key><![CDATA[player%s: %s&lt;String Match&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1321</id>
	<key><![CDATA[Called when a block fades, melts or disappears based on world conditions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1322</id>
	<key><![CDATA[This event is fired off when any command is run from the console or commandblock. This fires before CommandHelper aliases, allowing you to insert control beforehand. Be careful with this event, because it can override ALL server commands, potentially creating all sorts of havoc.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1323</id>
	<key><![CDATA[Fires as a player's food level changes. Cancelling the event will cause the change to not be applied.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1324</id>
	<key><![CDATA[player%s: %s&lt;Macro&gt; The player who toggled their sneaking state%ssneaking%s: %s&lt;Boolean Match&gt; Whether or not the player is now sneaking%sworld%s: %s&lt;Macro&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1325</id>
	<key><![CDATA[Contains events related to cmdline events.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1326</id>
	<key><![CDATA[shooter%s: the entityID of the mob/player that fired the projectile, or %s if it is from a dispenser]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1327</id>
	<key><![CDATA[location%s: The location of the bed%splayer%s: The player associated with this event%sresult%s: The outcome of this attempt to enter bed. Can be one of NOT_POSSIBLE_HERE, NOT_POSSIBLE_NOW, NOT_SAFE, OK, OTHER_PROBLEM, or TOO_FAR_AWAY]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1328</id>
	<key><![CDATA[command%s: The entire command%sprefix%s: Just the prefix of the command]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1329</id>
	<key><![CDATA[message%s: %s&lt;String Match&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1330</id>
	<key><![CDATA[player%s: %s&lt;Macro&gt;%scause%s: %s&lt;Macro&gt;%sworld%s: %s&lt;String Match&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1331</id>
	<key><![CDATA[player%s: %s&lt;String Match&gt;%sstatus%s: %s&lt;String Match&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1332</id>
	<key><![CDATA[player%s: %s&lt;String Match&gt;%s1%s: %s&lt;Regex&gt;%s2%s: %s&lt;Regex&gt;%s3%s: %s&lt;Regex&gt;%s4%s: %s&lt;Regex&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1333</id>
	<key><![CDATA[player_login]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1334</id>
	<key><![CDATA[Fires when an entity leaves a vehicle.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1335</id>
	<key><![CDATA[blocks%s: An array of blocks destroyed by the explosion.%syield%s: Percent of the blocks destroyed that should drop items. A value greater than 100 will cause more drops than the original blocks.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1336</id>
	<key><![CDATA[type%s: the type of creature spawning%sid%s: the entityID of the creature%sreason%s: the reason this creature is spawning%slocation%s: locationArray of the event]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1337</id>
	<key><![CDATA[item%s: The item to be enchanted%sexpcosts%s: The costs of the 3 options on the enchantment table]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1338</id>
	<key><![CDATA[player%samount]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1339</id>
	<key><![CDATA[amount%s: an integer of the amount of exp that will be added to the player's total exp]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1340</id>
	<key><![CDATA[This event is called when a piston is extended. Cancelling the event cancels the move.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1341</id>
	<key><![CDATA[Fired when any player quits.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1342</id>
	<key><![CDATA[item_pre_craft]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1343</id>
	<key><![CDATA[type%s: %s&lt;Macro&gt; the type of entity%sportaltype%s: %s&lt;String Match&gt; The type of portal (PORTAL or END_PORTAL)%sworld%s: %s&lt;Macro&gt; the world in which the portal was entered]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1344</id>
	<key><![CDATA[This event is called when a player picks up an item.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1345</id>
	<key><![CDATA[type%s: %s&lt;Macro&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1346</id>
	<key><![CDATA[inventory_close]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1347</id>
	<key><![CDATA[item_despawn]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1348</id>
	<key><![CDATA[This event is called when a player is about to log in. This event cannot be cancelled. Instead, you can deny them by setting 'result' to KICK_BANNED, KICK_WHITELIST, KICK_OTHER, or KICK_FULL. The default for 'result' is ALLOWED. When setting 'result', you can specify the kick message by modifying 'kickmsg'.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1349</id>
	<key><![CDATA[entity_change_block]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1350</id>
	<key><![CDATA[entity_damage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1351</id>
	<key><![CDATA[vehicle_enter]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1352</id>
	<key><![CDATA[item%s: the itemstack of the entity]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1353</id>
	<key><![CDATA[projectile_launch]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1354</id>
	<key><![CDATA[player%s: the player consuming%sitem%s: the item being consumed]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1355</id>
	<key><![CDATA[Fires when a player leaves a bed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1356</id>
	<key><![CDATA[block%s: %s&lt;String Match&gt; Block type that is fading%sworld%s: %s&lt;String Match&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1357</id>
	<key><![CDATA[virtual%s: %s&lt;Boolean Match&gt; Whether or not this inventory is virtually stored in CH]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1358</id>
	<key><![CDATA[player_command]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1359</id>
	<key><![CDATA[hanging_break]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1360</id>
	<key><![CDATA[entity%s: the ID of the entity that interacted with the block%sblock%slocation%s: the location of the interaction]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1361</id>
	<key><![CDATA[item_held]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1362</id>
	<key><![CDATA[player%sfrom%s: The world the player is coming from%sto%s: The world the player is now in]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1363</id>
	<key><![CDATA[world%s: The saved world.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1364</id>
	<key><![CDATA[item_drop]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1365</id>
	<key><![CDATA[location%s: %s&lt;Location Match&gt; The location of the bed]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1366</id>
	<key><![CDATA[kickmsg%sresult]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1367</id>
	<key><![CDATA[player%s: %s&lt;Macro&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1368</id>
	<key><![CDATA[player%s: The player's name%sblock%s: the block type that was placed%sagainst%s: a block array of the block being placed against%soldblock%s: the old block type that was replaced%slocation%s: A locationArray for this block]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1369</id>
	<key><![CDATA[itemname%s: %s&lt;String Match&gt; the type of item that spawned]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1370</id>
	<key><![CDATA[This event is called when a dispenser dispense an item. Cancelling the event cancels dispensing.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1371</id>
	<key><![CDATA[Fires when a player left or right clicks a block or the air]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1372</id>
	<key><![CDATA[message%srecipients%s: An array of players that will receive the chat message. If a player doesn't exist or is offline, and is in the array, it is simply ignored, no exceptions will be thrown.%sformat%s: The "printf" format string, by  default "&lt;%1$s> %2$s". The first parameter is the player's display name, and the second one is the message.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1373</id>
	<key><![CDATA[command%s: %s&lt;String Match&gt; The entire command the player ran%sprefix%s: %s&lt;String Match&gt; Just the first part of the command, i.e. '/cmd' in '/cmd blah blah'%splayer%s: %s&lt;Macro&gt; The player using the command]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1374</id>
	<key><![CDATA[Contains events related to an entity]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1375</id>
	<key><![CDATA[world%s: %s&lt;Macro&gt; the world%slocation%s: %s&lt;Location Match&gt; the lightning strike location%sis_effect%s: %s&lt;Boolean Match&gt; whether the strike was real or just an effect]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1376</id>
	<key><![CDATA[player%s: The player's name%suuid%s: The player's unique id%skickmsg%s: The default kick message%sip%s: the player's IP address%shostname%s: The hostname used to reach the server%sresult%s: the default response to their logging in]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1377</id>
	<key><![CDATA[world%s: the name of the world in which thunder is changing%shas_thunder%s: if the world is thundering]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1378</id>
	<key><![CDATA[player_chat]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1379</id>
	<key><![CDATA[xp%s: the exp the player will get from catching a fish]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1380</id>
	<key><![CDATA[cmdline_prompt_input]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1381</id>
	<key><![CDATA[Contains events related to inventory.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1382</id>
	<key><![CDATA[entity_damage_player]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1383</id>
	<key><![CDATA[itemname%s: %s&lt;String Match&gt; the type of item that despawned]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1384</id>
	<key><![CDATA[player%s: the player clicking%sclicked%shand%sid%s: the id of the entity%sdata%s: if a player is clicked, this will contain their name]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1385</id>
	<key><![CDATA[item_spawn]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1386</id>
	<key><![CDATA[entity%s: the entity ID of the entity which changed block%sfrom%sto%slocation%s: the location of the block changed]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1387</id>
	<key><![CDATA[Fired when a player dies.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1388</id>
	<key><![CDATA[This event is called when a player is targeted by a mob.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1389</id>
	<key><![CDATA[player_toggle_sprint]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1390</id>
	<key><![CDATA[thunder_change]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1391</id>
	<key><![CDATA[type%s: %s&lt;Macro&gt;%sreason%s: %s&lt;Macro&gt; One of BREEDING, BUILD_IRONGOLEM, BUILD_SNOWMAN, BUILD_WITHER, CHUNK_GEN, CUSTOM, DEFAULT, EGG, JOCKEY, LIGHTNING, NATURAL, REINFORCEMENTS, SHOULDER_ENTITY, SLIME_SPLIT, SPAWNER, SPAWNER_EGG, VILLAGE_DEFENSE, VILLAGE_INVASION, NETHER_PORTAL, DISPENSE_EGG, INFECTION, CURED, OCELOT_BABY, SILVERFISH_BLOCK, MOUNT, TRAP, ENDER_PEARL, DROWNED, SHEARED, or EXPLOSION]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1392</id>
	<key><![CDATA[clicked%s: %s&lt;Macro&gt; the type of entity being clicked%shand%s: %s&lt;String Match&gt; The hand the player clicked with, can be either main_hand or off_hand]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1393</id>
	<key><![CDATA[Fires when thunder begins or ends.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1394</id>
	<key><![CDATA[drops%s: an array of item arrays of what will be dropped, replaces the normal drops, can be %sxp%s: the amount of xp to drop]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1395</id>
	<key><![CDATA[This event is called when a block grows naturally. If the event is cancelled, the block will not grow.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1396</id>
	<key><![CDATA[main_hand%soff_hand]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1397</id>
	<key><![CDATA[block_ignite]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1398</id>
	<key><![CDATA[block]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1399</id>
	<key><![CDATA[ip%s: The address the ping is coming from%splayers%s: The number of players online%smaxplayers%s: The number of slots on the server%smotd%s: The message a player is shown on the serverlist%slist%s: The list of connected players]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1400</id>
	<key><![CDATA[This event is called when a player logs in. Setting join_message to %s causes it to not be displayed at all. Cancelling the event does not prevent them from logging in. Instead, you should just pkick() them.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1401</id>
	<key><![CDATA[Contains events related to generic plugin messaging.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1402</id>
	<key><![CDATA[world%s: %s&lt;Macro&gt; the world%shas_thunder%s: %s&lt;Boolean Match&gt; if it is thundering]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1403</id>
	<key><![CDATA[id%s: %s&lt;Macro&gt; The entityID%stype%s: %s&lt;Macro&gt; The type of entity being damaged%scause%s: %s&lt;Macro&gt; One of CONTACT, ENTITY_ATTACK, PROJECTILE, SUFFOCATION, FALL, FIRE, FIRE_TICK, LAVA, DROWNING, BLOCK_EXPLOSION, ENTITY_EXPLOSION, VOID, LIGHTNING, SUICIDE, STARVATION, POISON, MAGIC, MELTING, WITHER, FALLING_BLOCK, THORNS, DRAGON_BREATH, FLY_INTO_WALL, HOT_FLOOR, CRAMMING, ENTITY_SWEEP_ATTACK, DRYOUT, or CUSTOM%sworld%s: %s&lt;String Match&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1404</id>
	<key><![CDATA[Fires when a player right clicks an entity. This event is like player_interact_entity but also has the click position, and when cancelled only cancels interactions with Armor Stand entities.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1405</id>
	<key><![CDATA[This event is called when a player drops an item.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1406</id>
	<key><![CDATA[inventory_click]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1407</id>
	<key><![CDATA[item%svelocity]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1408</id>
	<key><![CDATA[world_save]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1409</id>
	<key><![CDATA[player%s: %s&lt;Macro&gt;%sfrom%s: %s&lt;Location Match&gt; An exact location array where the player is coming from.%sto%s: %s&lt;Location Match&gt; An exact location array where the player is going to.%stype%s: %s&lt;Macro&gt; The type of portal occurring, either NETHER_PORTAL or END_PORTAL]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1410</id>
	<key><![CDATA[note_play]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1411</id>
	<key><![CDATA[player%s: the player%slevel%s: the new food level to be applied%sdifference%s: the difference between the old level and the new]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1412</id>
	<key><![CDATA[inventory_open]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1413</id>
	<key><![CDATA[Fires when an entity touches a portal block.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1414</id>
	<key><![CDATA[player%s: the kicked player%smessage%s: the message shown to all online players%sreason%s: the message shown to the player getting kicked]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1415</id>
	<key><![CDATA[player%s: The player that teleport%sfrom%s: The location the player is coming from%sto%s: The location the player is coming to. Returns %s when using nether portal and "allow-nether" in server.properties is set to false or when using end portal and "allow-end" in bukkit.yml is set to false.%stype%s: the type of portal occurring%screationradius%s: Gets the maximum radius from the given location to create a portal. (1.13 only)%ssearchradius%s: Gets the search radius value for finding an available portal. (1.13 only)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1416</id>
	<key><![CDATA[id%s: entityID, or %s if no entity%stype%s: entitytype, or %s if no entity%slocation%s: where the explosion occurs%sblocks%syield]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1417</id>
	<key><![CDATA[id%s: The entityID of the hanging entity%stype%s: The entity type of the hanging entity, can be ITEM_FRAME, PAINTING or LEASH_HITCH%scause%s: The cause of the removing, can be DEFAULT, ENTITY, EXPLOSION, OBSTRUCTION, or PHYSICS%slocation%s: Where was the hanging entity before the removing%sremover%s: If the hanging entity has been removed by an other entity, this will contain its entityID, otherwise %splayer%s: If the hanging entity has been removed by a player, this will contain their name, otherwise]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1418</id>
	<key><![CDATA[block%s: %s&lt;String Match&gt;%sworld%s: %s&lt;String Match&gt;%stoblock%s: %s&lt;String Match&gt;%stoworld%s: %s&lt;String Match&gt;%sface%s: %s&lt;String Match&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1419</id>
	<key><![CDATA[message%s: The message that will be broadcasted%splayer_recipients%s: An array of players who will receive the message.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1420</id>
	<key><![CDATA[id%s: The entityID of the entity%stype%s: The entity type of the entity%sgliding%s: true if the entity is entering gliding mode, false if the entity is leaving it%splayer%s: If the entity is a player, this will contain their name, otherwise]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1421</id>
	<key><![CDATA[This event is called when a water or lava is flowed and ender dragon egg is teleported. Cancelling the event cancels the flow or teleport.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1422</id>
	<key><![CDATA[type%sid%s: the entityID of the projectile%slocation%s: where it makes contact%sshooter%shittype%shit%s: the entity id or block location array of the hit object.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1423</id>
	<key><![CDATA[Fired when a player clicks (by left or right mouse button) a slot in an inventory and then drags the mouse across slots.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1424</id>
	<key><![CDATA[vehicletype%s: %s&lt;Macro&gt; the entitytype of the vehicle%spassengertype%s: %s&lt;Macro&gt; the enitytype of the passenger%sworld%s: %s&lt;String Match&gt; the world the vehicle is in%sfrom%s: %s&lt;Location Match&gt; This should be a location array (x, y, z, world).%sto%s: %s&lt;Location Match&gt; The location the vehicle is now in.%sthreshold%s: %s The minimum distance the vehicle must have travelled before the event will be triggered. This is based on the 3D distance, and is measured in block units.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1425</id>
	<key><![CDATA[block%s: the source block type%slocation%s: the locationArray of the source block%stoblock%s: the target block type%stolocation%s: the target block's locationArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1426</id>
	<key><![CDATA[vehicle_destroy]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1427</id>
	<key><![CDATA[item_enchant]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1428</id>
	<key><![CDATA[This event is called when a projectile is launched. Cancelling the event will only cancel the launching of the projectile. For instance when a player shoots an arrow with a bow, if the event is cancelled the bow will still take damage from use.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1429</id>
	<key><![CDATA[block_dispense]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1430</id>
	<key><![CDATA[location%s: %s&lt;Location Match&gt; The location of the bed%sresult%s: %s&lt;String Match&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1431</id>
	<key><![CDATA[action%s: One of either left_click_block, right_click_block, left_click_air, or right_click_air%sblock%s: The type of block they clicked, or %s if they clicked air. If they clicked air, neither facing nor location will be present.%sitem%s: The item array the player used to click, or %s if not holding anything in that hand%splayer%s: The player associated with this event%sfacing%s: The (lowercase) face of the block they clicked. (One of NORTH, EAST, SOUTH, WEST, UP, DOWN, NORTH_EAST, NORTH_WEST, SOUTH_EAST, SOUTH_WEST, WEST_NORTH_WEST, NORTH_NORTH_WEST, NORTH_NORTH_EAST, EAST_NORTH_EAST, EAST_SOUTH_EAST, SOUTH_SOUTH_EAST, SOUTH_SOUTH_WEST, WEST_SOUTH_WEST, or SELF)%slocation%s: The (x, y, z, world) location of the block they clicked%shand%s: The hand used to click with, can be either main_hand or off_hand]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1432</id>
	<key><![CDATA[message%s: The message to be sent%srecipients%sformat]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1433</id>
	<key><![CDATA[world%sfrom%s: Get the previous position%sto%s: Get the next position%svehicletype%spassengertype%sid%s: entityID%spassenger%s: entityID%splayer%s: player name if passenger is a player, %s otherwise]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1434</id>
	<key><![CDATA[ServerEvents]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1435</id>
	<key><![CDATA[PluginEvents]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1436</id>
	<key><![CDATA[Fired when a player's experience changes naturally.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1437</id>
	<key><![CDATA[target_player]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1438</id>
	<key><![CDATA[player_leave_bed]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1439</id>
	<key><![CDATA[command%s: The entire command%sprefix%s: The prefix of the command%ssendertype%s: The command sender type. This is one of console, command_block, command_minecart or %s if the sender is unknown to CommandHelper.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1440</id>
	<key><![CDATA[PlayerEvents]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1441</id>
	<key><![CDATA[Fires when a player tries to enter a bed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1442</id>
	<key><![CDATA[book_edited]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1443</id>
	<key><![CDATA[player%sto%sfrom%s: the slot the player is switching from]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1444</id>
	<key><![CDATA[player%s: The player's name%sworld%sjoin_message%s: The default join message%sfirst_login%s: True if this is the first time the player has logged in.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1445</id>
	<key><![CDATA[Fired when a player opens an inventory.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1446</id>
	<key><![CDATA[player_teleport]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1447</id>
	<key><![CDATA[player%smain_hand%s: the item array in the main hand before swapping%soff_hand%s: the item in the off hand]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1448</id>
	<key><![CDATA[block%s: The block type before the growth%snewblock%s: The block type after the growth%slocation%s: the location of the block that will grow]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1449</id>
	<key><![CDATA[block%s: the block type that was burned%slocation%s: the locationArray of this block]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1450</id>
	<key><![CDATA[world%s: the name of the world in which the weather changed%shas_rain%s: if it is raining]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1451</id>
	<key><![CDATA[Fires when a tree grows.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1452</id>
	<key><![CDATA[id%s: The entityID of the projectile%stype%s: The entity type of the projectile%sshooter%s: The entityID of the shooter (%s if the projectile is launched by a dispenser)%sshootertype%s: The entity type of the shooter (%s if the projectile is launched by a dispenser)%splayer%s: the player which has launched the projectile (%s if the shooter is not a player)%slocation%s: from where the projectile is launched%svelocity%s: the velocity of the projectile]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1453</id>
	<key><![CDATA[player_toggle_flight]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1454</id>
	<key><![CDATA[type%s: %s&lt;String Match&gt; Type of dispenser%sitemname%s: %s&lt;String Match&gt; Item type which is dispensed]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1455</id>
	<key><![CDATA[Fires when any loaded entity takes damage.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1456</id>
	<key><![CDATA[world%s: %s&lt;Macro&gt;%splayer%s: %s&lt;Macro&gt;%stype%s: %s&lt;Macro&gt;%sbonemeal%s: %s&lt;Boolean Match&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1457</id>
	<key><![CDATA[cursoritem%s: the item on the cursor, after event]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1458</id>
	<key><![CDATA[player%s: The player%sitem%s: An item array representing the item being picked up%sremaining%s: Other items left on the ground.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1459</id>
	<key><![CDATA[server_command]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1460</id>
	<key><![CDATA[player%s: The player who toggled their flying state%sflying%s: Whether or not the player is trying to start or stop flying%slocation%s: Where the player is]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1461</id>
	<key><![CDATA[type%s: %s&lt;String Match&gt; the entity type%sblock%s: %s&lt;String Match&gt; The block name the entity is interacting with.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1462</id>
	<key><![CDATA[player_kick]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1463</id>
	<key><![CDATA[resource_pack_status]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1464</id>
	<key><![CDATA[gamemode_change]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1465</id>
	<key><![CDATA[player_fish]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1466</id>
	<key><![CDATA[entity_portal_travel]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1467</id>
	<key><![CDATA[player_quit]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1468</id>
	<key><![CDATA[player%s: The player's name%slocation%s: an array usable as a locationArray while also compatible with X,Y,Z,world indices%stext%s: An array with keys 0 thru 3 defining every line on the sign]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1469</id>
	<key><![CDATA[command%s: The command name that was registered.%salias%s: The alias the player entered to run the command.%sargs%s: The given arguments after the alias.%scompletions%s: The available completions for the last argument.%ssender%s: The player that ran the command.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1470</id>
	<key><![CDATA[amount%s: raw amount of damage (in half hearts)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1471</id>
	<key><![CDATA[player%s: %s&lt;Macro&gt; The player which edited the book%ssigning%s: %s&lt;Boolean Match&gt; Whether or not the book is being signed]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1472</id>
	<key><![CDATA[player%s: the player clicking%sclicked%shand%sid%s: the id of the entity%sdata%s: if a player is clicked, this will contain their name%sposition%s: offset of clicked location from entity location in an xyz array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1473</id>
	<key><![CDATA[player%s: %s&lt;Macro&gt; The player who toggled their sprinting state%ssprinting%s: %s&lt;Boolean Match&gt; Whether or not the player is now sprinting%sworld%s: %s&lt;Macro&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1474</id>
	<key><![CDATA[Fires when a player casts or reels a fishing rod.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1475</id>
	<key><![CDATA[from%s: %s&lt;String Match&gt; the block name before the change%sto%s: %s&lt;String Match&gt; the block name after change%slocation%s: %s&lt;Location Match&gt; the location of the block changed]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1476</id>
	<key><![CDATA[This event is called when a block is broken. Cancelling the event cancels the breakage.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1477</id>
	<key><![CDATA[Fired when a living entity spawns on the server.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1478</id>
	<key><![CDATA[tree_grow]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1479</id>
	<key><![CDATA[command%s: The command that was triggered%sshellMode%s: If the shell is in shell mode (activated with $$)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1480</id>
	<key><![CDATA[player_spawn]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1481</id>
	<key><![CDATA[Fires when a world is unloaded.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1482</id>
	<key><![CDATA[Fires when lightning strikes or the lightning strike effect occurs.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1483</id>
	<key><![CDATA[Fired when a command is issued from the interactive prompt. If the event is not cancelled, the interpreter will handle it as normal. Otherwise, the event can be cancelled, and custom handling can be triggered.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1484</id>
	<key><![CDATA[Fires when an item entity is removed from the world because it has existed for 5 minutes. Cancelling the event will allow the item to exist for 5 more minutes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1485</id>
	<key><![CDATA[vehicle_move]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1486</id>
	<key><![CDATA[Called when a player's client responds to a request to download and load a resource pack. Two of these events may be fired for each request: first when the client accepts the pack, and later when the client successfully loads (or fails to download) the pack.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1487</id>
	<key><![CDATA[Fires when a world is loaded.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1488</id>
	<key><![CDATA[location%s: where the item is%sid%s: the item's entityID%sitem%s: the itemstack of the entity]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1489</id>
	<key><![CDATA[type%s: %s&lt;Macro&gt; The entity type of the entity%sid%s: %s&lt;Macro&gt; The entity id of the entity%splayer%s: %s&lt;Macro&gt; The player triggering the event]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1490</id>
	<key><![CDATA[This event is called when a player edit a book.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1491</id>
	<key><![CDATA[Fires when something causes a player's gamemode to change. Cancelling the event will cancel the change. The mode itself cannot be modified.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1492</id>
	<key><![CDATA[message%s: The message to be sent]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1493</id>
	<key><![CDATA[itemname%s: %s&lt;String Match&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1494</id>
	<key><![CDATA[This event is fired off when a player changes worlds. This event is not cancellable, so to prevent it, the player_teleport event must be checked.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1495</id>
	<key><![CDATA[item%s: setting this to %s removes the dropped item]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1496</id>
	<key><![CDATA[world_changed]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1497</id>
	<key><![CDATA[virtual%s: %s&lt;Boolean Match&gt; Whether or not this inventory is virtually stored in CH%sworld%s: %s&lt;Macro&gt; World name%stype%s: %s&lt;String Match&gt; Can be SINGLE, or EVEN%scursoritem%s: %s&lt;String Match&gt; old item type held by the cursor before event starts]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1498</id>
	<key><![CDATA[server_ping]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1499</id>
	<key><![CDATA[block_place]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1500</id>
	<key><![CDATA[player%s: %s&lt;Macro&gt;%smain_hand%s: %s&lt;String Match&gt; The type of item being swapped from the main hand%soff_hand%s: %s&lt;String Match&gt; The type of item being swapped from the off hand]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1501</id>
	<key><![CDATA[This event is called when a hanged entity is broken.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1502</id>
	<key><![CDATA[Called when a player toggles their sneaking state.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1503</id>
	<key><![CDATA[Fired when any player attempts to send a chat message. The event handler is run on the async thread, and not the main server thread, which can lead to undefined results if your code accesses non-threadsafe methods, hence why this feature is undocumented. If this event is cancelled, player_chat binds will not fire.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1504</id>
	<key><![CDATA[block%s: %s&lt;String Match&gt; The block name before the growth%snewblock%s: %s&lt;String Match&gt; The block name after the growth%sworld%s: %s&lt;Macro&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1505</id>
	<key><![CDATA[projectile_hit]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1506</id>
	<key><![CDATA[clicked%s: %s&lt;Macro&gt; the type of entity being clicked%shand%s: %s&lt;String Match&gt; The hand the player clicked with, can be either main_hand or off_hand%sx%s: %s&lt;Expression&gt; offset of clicked location from entity location on the x axis%sy%s: %s&lt;Expression&gt;%sz%s: %s&lt;Expression&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1507</id>
	<key><![CDATA[world_load]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1508</id>
	<key><![CDATA[piston_retract]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1509</id>
	<key><![CDATA[motd%smaxplayers%slist%s: It is only possible to remove players, the added players will be ignored. This will also change the player count.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1510</id>
	<key><![CDATA[block_fade]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1511</id>
	<key><![CDATA[join_message]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1512</id>
	<key><![CDATA[WorldEvents]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1513</id>
	<key><![CDATA[Contains events related to the world.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1514</id>
	<key><![CDATA[item_pickup]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1515</id>
	<key><![CDATA[Fires when a recipe is formed in a crafting matrix, but the result has not yet been clicked.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1516</id>
	<key><![CDATA[creature_spawn]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1517</id>
	<key><![CDATA[Fires as a player is finishing eating/drinking an item. Cancelling the event will cause any effects to not be applied and the item to not be taken from the player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1518</id>
	<key><![CDATA[id%s: the entityID of the entity%slocation%s: the location of the block touched%stype%sportaltype]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1519</id>
	<key><![CDATA[Fired when any player attempts to send a chat message.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1520</id>
	<key><![CDATA[Fires when a player's client sends a plugin message.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1521</id>
	<key><![CDATA[InventoryEvents]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1522</id>
	<key><![CDATA[This event is called when a block is burned. Cancelling the event cancels the burn.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1523</id>
	<key><![CDATA[type%sid%s: The entityID of the vehicle%sentity%s: the entityID of the entity that was hit%sblock%s: the location of the block that was hit%scollisiontype%scollide%spickup]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1524</id>
	<key><![CDATA[player_portal_travel]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1525</id>
	<key><![CDATA[vehicle_collide]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1526</id>
	<key><![CDATA[item_pre_enchant]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1527</id>
	<key><![CDATA[id%s: The entityID of the firework rocket%slocation%s: Where the firework rocket is exploding]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1528</id>
	<key><![CDATA[Fires when a player changes which quickbar slot they have selected.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1529</id>
	<key><![CDATA[Contains events related to weather in a Minecraft world.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1530</id>
	<key><![CDATA[Fires when a non-player entity physically interacts with and triggers a block. (eg. pressure plates, redstone ore, farmland, tripwire, doors, and wooden button)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1531</id>
	<key><![CDATA[Fires when an explosion occurs. The entity itself may not exist if triggered by a plugin. Cancelling this event only protects blocks, entities are handled in damage events.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1532</id>
	<key><![CDATA[block%s: %s&lt;String Match&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1533</id>
	<key><![CDATA[id%s: The UUID of entity%stype%s: The type of entity%sfrom%s: The location the entity is coming from%sto%s: The location the entity is going to. Returns %s when using nether portal and  "allow-nether" in server.properties is set to false or when using end portal and  "allow-end" in bukkit.yml is set to false.%screationradius%s: The maximum radius from the given location to create a portal. (1.13 only)%ssearchradius%s: The search radius value for finding an available portal. (1.13 only)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1534</id>
	<key><![CDATA[to]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1535</id>
	<key><![CDATA[type%sid%s: The entityID%sdrops%s: an array of item arrays of each stack%sxp%scause%s: the last entity_damage object for this entity%slocation%s: where the entity was when it died]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1536</id>
	<key><![CDATA[type%s: %s&lt;Macro&gt; The entity type of the hanging entity%scause%s: %s&lt;Macro&gt; The cause of the removing%sworld%s: %s&lt;Macro&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1537</id>
	<key><![CDATA[Fired when a player clicks a slot in any inventory.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1538</id>
	<key><![CDATA[block%s: %s&lt;String Match&gt; The block type the player interacts with, or %s if nothing%sbutton%s: %s&lt;String Match&gt; left or right. If they left or right clicked%sitemname%s: %s&lt;String Match&gt; The item type they are holding when they interacted, or %shand%s: %s&lt;String Match&gt; The hand the player clicked with%splayer%s: %s&lt;Macro&gt; The player that triggered the event]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1539</id>
	<key><![CDATA[player%s: %s&lt;String Match&gt; The player that teleport. Switching worlds will trigger this event, but world_changed is called after, only if this isn't cancelled first.%stype%s: %s&lt;String Match&gt;%sfrom%s: %s&lt;Location Match&gt; This should be a location array (x, y, z, world).%sto%s: %s&lt;Location Match&gt; The location the player is now in. This should be a location array as well.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1540</id>
	<key><![CDATA[vehicletype%s: %s&lt;Macro&gt; the entitytype of the vehicle]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1541</id>
	<key><![CDATA[piston_extend]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1542</id>
	<key><![CDATA[This event is called when a piston is retracted. Cancelling the event cancels the move.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1543</id>
	<key><![CDATA[This event is fired off after a player has moved a certain distance. Due to the high frequency of this event, prefilters are extremely important to use -- especially a threshold -- so that the script doesn't run every time.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1544</id>
	<key><![CDATA[player_interact_entity]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1545</id>
	<key><![CDATA[virtual%s: %s&lt;Boolean Match&gt; Whether or not this inventory is virtually stored in CH%sslottype%s: %s&lt;Macro&gt; The type of slot being clicked, can be ARMOR, CONTAINER, CRAFTING, FUEL, OUTSIDE, QUICKBAR, or RESULT%sclicktype%s: %s&lt;Macro&gt; One of LEFT, SHIFT_LEFT, RIGHT, SHIFT_RIGHT, WINDOW_BORDER_LEFT, WINDOW_BORDER_RIGHT, MIDDLE, NUMBER_KEY, DOUBLE_CLICK, DROP, CONTROL_DROP, CREATIVE, or UNKNOWN%saction%s: %s&lt;Macro&gt; One of NOTHING, PICKUP_ALL, PICKUP_SOME, PICKUP_HALF, PICKUP_ONE, PLACE_ALL, PLACE_SOME, PLACE_ONE, SWAP_WITH_CURSOR, DROP_ALL_CURSOR, DROP_ONE_CURSOR, DROP_ALL_SLOT, DROP_ONE_SLOT, MOVE_TO_OTHER_INVENTORY, HOTBAR_MOVE_AND_READD, HOTBAR_SWAP, CLONE_STACK, COLLECT_TO_CURSOR, or UNKNOWN%sslotitem%s: %s&lt;String Match&gt;%splayer%s: %s&lt;Macro&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1546</id>
	<key><![CDATA[pressure_plate_activated]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1547</id>
	<key><![CDATA[broadcast_message]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1548</id>
	<key><![CDATA[player%sfrom%s: The location the player is coming from%sto%s: The location the player is now in%stype%s: the type of teleport occuring, one of COMMAND, END_PORTAL, ENDER_PEARL, NETHER_PORTAL, PLUGIN, SPECTATE, END_GATEWAY, CHORUS_FRUIT, UNKNOWN]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1549</id>
	<key><![CDATA[Fires when a player right clicks an entity. Note, not all entities are clickable. Interactions with Armor Stands do not trigger this event.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1550</id>
	<key><![CDATA[slotitem%s: the item currently in the clicked slot%scursoritem%s: the item on the cursor (may cause unexpected behavior)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1551</id>
	<key><![CDATA[location%s: the locationArray of this piston%sdirection%s: direction of travel%ssticky%s: true if the piston is sticky%saffectedBlocks%s: blocks pushed]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1552</id>
	<key><![CDATA[player%s: %s&lt;Macro&gt;%sreason%s: %s&lt;Macro&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1553</id>
	<key><![CDATA[Fires when a world is saved.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1554</id>
	<key><![CDATA[type%s: The type of entity the got damaged%sid%s: The entityID of the victim%splayer%s: the player who got damaged (only present if type is PLAYER)%sworld%slocation%scause%s: The type of damage%samount%sfinalamount%s: health entity will lose after modifiers%sdamager%s: If the source of damage is a player this will contain their name, otherwise it will be the entityID of the damager (only available when an entity causes damage)%sshooter%s: The name of the player who shot, otherwise the entityID (only available when damager is a projectile)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1555</id>
	<key><![CDATA[Fires when a player respawns. Technically during this time, the player is not considered to be 'online'. This can cause problems if you try to run an external command with run() or something. CommandHelper takes into account the fact that the player is offline, and works around this, so all CH functions should respond correctly, as if the player was online, however other plugins or plain text commands that are run may not.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1556</id>
	<key><![CDATA[player%s: The player who clicked%sviewers%s: everyone looking in this inventory%sleftclick%s: if this was a left click%skeyboardclick%s: true/false if a key was pressed%srightclick%s: if this was a right click%sshiftclick%s: true/false if shift was being held%screativeclick%s: true/false if this action could only be performed in creative mode%sslot%s: the slot number%srawslot%s: the slot number in whole inventory window%sslottype%sslotitem%sinventorytype%sinventorysize%s: number of slots in opened inventory%scursoritem%sinventory%s: all the items in the (top) inventory%sclicktype%saction]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1557</id>
	<key><![CDATA[message%sreason]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1558</id>
	<key><![CDATA[entity_interact]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1559</id>
	<key><![CDATA[drops%s: an array of arrays of items the block will drop%sxp%s: the xp that this block will drop, if any]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1560</id>
	<key><![CDATA[firework_explode]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1561</id>
	<key><![CDATA[player%s: %s&lt;Macro&gt;%sitemname%s: %s&lt;String Match&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1562</id>
	<key><![CDATA[type%s: Type of dispenser%sitem%s: Item which is dispensed%svelocity%s: Returns an associative array indicating the x/y/z components of item velocity. As a convenience, the magnitude is also included.%slocation%s: Location of dispenser]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1563</id>
	<key><![CDATA[world%s: The world where the tree grown.%stype%s: The tree type, can be one of TREE, BIG_TREE, REDWOOD, TALL_REDWOOD, BIRCH, JUNGLE, SMALL_JUNGLE, JUNGLE_BUSH, RED_MUSHROOM, BROWN_MUSHROOM, SWAMP, ACACIA, DARK_OAK, COCOA_TREE, MEGA_REDWOOD, TALL_BIRCH, or CHORUS_PLANT%sbonemeal%s: If the tree grown due to a bonemeal or not.%splayer%s: The player who used the bonemeal, or %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1564</id>
	<key><![CDATA[id%s: %s&lt;Macro&gt; The entityID%stype%s: %s&lt;Macro&gt; the entity type of the projectile%shittype%s: %s&lt;String Match&gt; the type of object hit, either ENTITY or BLOCK]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1565</id>
	<key><![CDATA[player_enter_bed]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1566</id>
	<key><![CDATA[Fired when a user who has saved this server looks at their serverlist.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1567</id>
	<key><![CDATA[block%stoblock]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1568</id>
	<key><![CDATA[location%s: the locationArray of this piston%sdirection%s: direction of travel%ssticky%s: true if the piston is sticky%sretractedLocation%s: if the piston is sticky and attached to a block, where the attached block would end up]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1569</id>
	<key><![CDATA[prefix%s: %s&lt;String Match&gt; The first part of the command, i.e. 'cmd' in '/cmd blah blah'%stype%s: %s&lt;String Match&gt; The command sender type]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1570</id>
	<key><![CDATA[world%s: The loaded world.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1571</id>
	<key><![CDATA[block_burn]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1572</id>
	<key><![CDATA[This event is called when an entity toggles it's gliding state (Using Elytra).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1573</id>
	<key><![CDATA[vehicle_leave]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1574</id>
	<key><![CDATA[Fires when a vehicle is moving. Due to the high frequency of this event, prefilters are extremely important to use -- especially threshold.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1575</id>
	<key><![CDATA[This will fire if a tab completer has not been set for a command registered with register_command(), or if the set tab completer doesn't return an array. If completions are  not modified, registered commands will tab complete online player names.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1576</id>
	<key><![CDATA[Fired the process is being shut down. This is not guaranteed to run, because some cases may cause the process to die unexpectedly. Code within the event handler should take as little time as possible, as the process may force an exit if the handler takes too long.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1577</id>
	<key><![CDATA[lightning_strike]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1578</id>
	<key><![CDATA[player%sworld%sfrom%s: The location the player is coming from%sto%s: The location the player is now in]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1579</id>
	<key><![CDATA[entity_toggle_glide]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1580</id>
	<key><![CDATA[player%s: player whose mode is changing%snewmode]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1581</id>
	<key><![CDATA[block_break]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1582</id>
	<key><![CDATA[player_join]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1583</id>
	<key><![CDATA[location]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1584</id>
	<key><![CDATA[Contains events related to a player]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1585</id>
	<key><![CDATA[vehicletype%svehicle%s: entityID%sdamager%s: If the source of damage is a player this will contain their name, otherwise it will be the entityID of the damager (only available when an entity causes damage)%sshooter%s: The name of the player who shot, otherwise the entityID (only available when damager is a projectile)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1586</id>
	<key><![CDATA[player%s: %s&lt;String Match&gt;%sworld%s: %s&lt;String Match&gt;%sjoin_message%s: %s&lt;Regex&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1587</id>
	<key><![CDATA[player%s: %s&lt;Macro&gt; The player who toggled their flying state%sflying%s: %s&lt;Boolean Match&gt; Whether or not the player is trying to start or stop flying%sworld%s: %s&lt;Macro&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1588</id>
	<key><![CDATA[location%s: The location of the noteblock%sinstrument%s: The name of the sound%stone%s: The note played (eg. F#)%soctave%s: The octave the tone was played (0 - 2)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1589</id>
	<key><![CDATA[player%s: The player that is respawning%slocation%s: The location they are going to respawn at%sbed_spawn%s: True if the respawn location is the player's bed]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1590</id>
	<key><![CDATA[tab_complete_command]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1591</id>
	<key><![CDATA[block%s: The block type that is fading%snewblock%s: The block type after the fades%slocation%s: the location of the block that will fade]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1592</id>
	<key><![CDATA[player%s: The player who toggled their sprinting state%ssprinting%s: Whether or not the player is now sprinting%slocation%s: Where the player is]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1593</id>
	<key><![CDATA[player%s: The player's name%smobtype%s: The type of mob targeting the player (this will be all capitals| %splayer%s: target a different player, or %s to make the mob re-look for targets]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1594</id>
	<key><![CDATA[async_player_chat]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1595</id>
	<key><![CDATA[block_from_to]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1596</id>
	<key><![CDATA[player%s: The player being damaged%sdamager%s: The type of entity causing damage%samount%s: raw amount of damage caused%sfinalamount%s: health player will lose after modifiers%scause%s: the cause of damage%sdata%s: the attacking player's name or the shooter if damager is a projectile%sid%s: EntityID of the damager%slocation]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1597</id>
	<key><![CDATA[Fires when a projectile collides with something.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1598</id>
	<key><![CDATA[player_death]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1599</id>
	<key><![CDATA[entity_regain_health]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1600</id>
	<key><![CDATA[player%s: %s&lt;Macro&gt;%smobtype%s: %s&lt;Macro&gt;%sreason%s: %s&lt;Macro&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1601</id>
	<key><![CDATA[player%s: The player's name%sblock%s: the block type that was broken%slocation%s: the locationArray of this block%sdrops%sxp]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1602</id>
	<key><![CDATA[world%s: %s&lt;Macro&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1603</id>
	<key><![CDATA[player_interact_at_entity]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1604</id>
	<key><![CDATA[type%s: Spawn a different entity instead. This will fire a new event. If the entity type is living, it will fire creature_spawn event with a reason of 'CUSTOM'.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1605</id>
	<key><![CDATA[player%s: The player that placed the item%sitem%s: The item to be enchanted%sinventorytype%s: Type of inventory%senchantmentbonus%s: the amount of bookshelves influencing the enchantment table%sexpcosts%s: The offered costs of the 3 options%slocation%s: Location of the used enchantment table]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1606</id>
	<key><![CDATA[EntityEvents]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1607</id>
	<key><![CDATA[type%s: %s&lt;Macro&gt; The entitytype of the vehicle%scollisiontype%s: %s&lt;String Match&gt; One of BLOCK or ENTITY%shittype%s: %s&lt;Macro&gt; Matches an entitytype in an enitity collision%shittype%s: %s&lt;String Match&gt; Matches a block in a block collision]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1608</id>
	<key><![CDATA[redstone_changed]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1609</id>
	<key><![CDATA[location%s: The location of the bed%splayer%s: The player associated with this event]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1610</id>
	<key><![CDATA[Fired when a message is broadcasted on the server.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1611</id>
	<key><![CDATA[weather_change]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1612</id>
	<key><![CDATA[x%s: %s&lt;Expression&gt;%sy%s: %s&lt;Expression&gt;%sz%s: %s&lt;Expression&gt;%sworld%s: %s&lt;String Match&gt;%splayer%s: %s&lt;Macro&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1613</id>
	<key><![CDATA[world%s: the name of the world in which the strike occurred%sid%s: the lightning entityID%slocation%s: locationArray of the event%sis_effect%s: the data value for the block being changed]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1614</id>
	<key><![CDATA[players%s: %s&lt;Math Match&gt;%smaxplayers%s: %s&lt;Math Match&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1615</id>
	<key><![CDATA[Fired when an entity regained the health.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1616</id>
	<key><![CDATA[world%s: The unloaded world.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1617</id>
	<key><![CDATA[player%s: The player's name%signitingentity%s: entity ID, if caused by entity%signitingblock%s: the block's type, if caused by block%signitingblocklocation%s: the block's location that ignited%slocation%s: the locationArray that got ignited%scause%s: the cause of ignition, one of LAVA, FLINT_AND_STEEL, SPREAD, LIGHTNING, FIREBALL, ENDER_CRYSTAL, EXPLOSION]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1618</id>
	<key><![CDATA[Fires when an entity change block in some way.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1619</id>
	<key><![CDATA[Fired when a player is kicked from the game.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1620</id>
	<key><![CDATA[id%s: %s&lt;Macro&gt; The entityID%sdamager%s: %s&lt;Macro&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1621</id>
	<key><![CDATA[player_move]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1622</id>
	<key><![CDATA[Fires when a player steps on a pressure plate]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1623</id>
	<key><![CDATA[item_swap]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1624</id>
	<key><![CDATA[BlockEvents%sCmdlineEvents%sEntityEvents%sInventoryEvents%sPlayerEvents%sPluginEvents%sServerEvents%sVehicleEvents%sWeatherEvents%sWorldEvents]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1625</id>
	<key><![CDATA[Fires when a firework rocket explodes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1626</id>
	<key><![CDATA[Contains events related to a block]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1627</id>
	<key><![CDATA[This event is called when a player is damaged by another entity.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1628</id>
	<key><![CDATA[location%s: The location of the pressure plate%sactivated%s: If true, then the player has stepped on the plate, if false, they have gotten off of it. Currently, this will always be true, because the event is only triggered for activations, not deactivations, but is reserved for future use.%splayer%s: The player associated with this event]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1629</id>
	<key><![CDATA[channel%s: %s&lt;String Match&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1630</id>
	<key><![CDATA[level%s: A different level to be applied]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1631</id>
	<key><![CDATA[Contains non-specific server-wide events.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1632</id>
	<key><![CDATA[id%s: %s&lt;Macro&gt; The entityID%stype%s: %s&lt;Macro&gt; The type of entity dying.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1633</id>
	<key><![CDATA[player%sworld%sstate%sxp%shook%s: the fishhook entity id%scaught%s: the id of the snared entity, can be a fish item]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1634</id>
	<key><![CDATA[location%s: The location of the block%sactive%s: Whether or not the block is now active, or disabled.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1635</id>
	<key><![CDATA[Fires when a player swaps the items in their main and off hands.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1636</id>
	<key><![CDATA[player_toggle_sneak]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1637</id>
	<key><![CDATA[player%s: The player%sinventory%s: the inventory items in this inventory%sinventorytype%s: type of inventory%svirtual%sholder%s: block location array, entity UUID, or virtual id for this inventory (can be %s)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1638</id>
	<key><![CDATA[Fired when a redstone activatable block is toggled, either on or off, AND the block has been set to be monitored with the monitor_redstone function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1639</id>
	<key><![CDATA[player%s: the player%schannel%s: the channel used%sbytes%s: byte array of the data sent]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1640</id>
	<key><![CDATA[CmdlineEvents]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1641</id>
	<key><![CDATA[world%s: %s&lt;Macro&gt; the world%shas_rain%s: %s&lt;Boolean Match&gt; if it is raining]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1642</id>
	<key><![CDATA[to%s: the slot that the player is switching to]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1643</id>
	<key><![CDATA[Fires when a vehicle is destroyed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1644</id>
	<key><![CDATA[food_level_changed]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1645</id>
	<key><![CDATA[location%s: where the item spawns%sid%s: the item's entityID%sitem]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1646</id>
	<key><![CDATA[VehicleEvents]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1647</id>
	<key><![CDATA[player%s: %s&lt;Macro&gt; The player that moved. Switching worlds does not trigger this event.%sworld%s: %s&lt;String Match&gt; The world the player moved in.%sfrom%s: %s&lt;Location Match&gt; This should be a location array (x, y, z, world).%sto%s: %s&lt;Location Match&gt; The location the player is now in. This should be a location array as well.%sthreshold%s: %s The minimum distance the player must have travelled before the event will be triggered. This is based on the 3D distance, and is measured in block units.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1648</id>
	<key><![CDATA[Contains events related to vehicle entity types.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1649</id>
	<key><![CDATA[Fires when an entity enters a vehicle.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1650</id>
	<key><![CDATA[title%sauthor%spages%ssigning]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1651</id>
	<key><![CDATA[player_interact]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1652</id>
	<key><![CDATA[location%s: %s&lt;Location Match&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1653</id>
	<key><![CDATA[player%s: The player that died%sdrops%s: An array of the items that will be dropped, or %sxp%s: The amount of experience that will be dropped%scause%s: The cause of death%sdeath_message%s: The death message, or %s if absent%skeep_inventory%s: If the player will keep their inventory%skeep_level%s: If the player will keep their experience and their level%snew_exp%s: The player's experience when they will respawn%snew_level%s: The player's level when they will respawn%snew_total_exp%s: The player's total experience when they will respawn%skiller%s: The name of the killer if a player killed them, otherwise]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1654</id>
	<key><![CDATA[player%s: %s&lt;String Match&gt;%sblock%s: %s&lt;String Match&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1655</id>
	<key><![CDATA[shutdown]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1656</id>
	<key><![CDATA[This event is called when a noteblock is activated via player interaction or redstone. The instrument may be one of PIANO, BASS_DRUM, SNARE_DRUM, STICKS, BASS_GUITAR, FLUTE, BELL, GUITAR, CHIME, XYLOPHONE, IRON_XYLOPHONE, COW_BELL, DIDGERIDOO, BIT, BANJO, or PLING.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1657</id>
	<key><![CDATA[BlockEvents]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1658</id>
	<key><![CDATA[plugin_message_received]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1659</id>
	<key><![CDATA[entity_explode]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1660</id>
	<key><![CDATA[player%s: The player who toggled their sneaking state%ssneaking%s: Whether or not the player is now sneaking%slocation%s: Where the player is]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1661</id>
	<key><![CDATA[inventory_drag]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1662</id>
	<key><![CDATA[Fired when a player places an item in an enchantment table]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1663</id>
	<key><![CDATA[exp_change]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1664</id>
	<key><![CDATA[player%s: The player who clicked%snewcursoritem%s: item on cursor, after event%soldcursoritem%s: item on cursor, before event%sslots%s: used slots%srawslots%s: used slots, as the numbers of the slots in whole inventory window%snewitems%s: array of items which are dropped in selected slots%sinventorytype%sinventorysize%s: number of slots in opened inventory]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1665</id>
	<key><![CDATA[item%s: setting this to %s will remove the item from the world]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1666</id>
	<key><![CDATA[player%s: The player%sitem%s: An item array representing the item being dropped.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1667</id>
	<key><![CDATA[world_unload]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1668</id>
	<key><![CDATA[entity_enter_portal]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1669</id>
	<key><![CDATA[Fires when rain starts or stops.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1670</id>
	<key><![CDATA[player%s: The player that enchanted the item%sitem%s: The item to be enchanted%sinventorytype%s: type of inventory%slevels%s: The amount of levels the player used%senchants%s: Array of added enchantments%slocation%s: Location of the used enchantment table%soption%s: The enchantment option the player clicked]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1671</id>
	<key><![CDATA[Fires when a vehicle runs into something. If it ran into a block, event data will contain block info. If it ran into an entity, event data will contain info and options relevant to hitting an entity.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1672</id>
	<key><![CDATA[Fired when a player collides with portal.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1673</id>
	<key><![CDATA[amount]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1674</id>
	<key><![CDATA[completions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1675</id>
	<key><![CDATA[levels%s: The amount of levels to use%sitem%s: The item to be enchanted%senchants%s: The enchants to add to the item]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1676</id>
	<key><![CDATA[velocity]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1677</id>
	<key><![CDATA[player_consume]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1678</id>
	<key><![CDATA[This event is called when a player changes a sign. Cancelling the event cancels any edits completely.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1679</id>
	<key><![CDATA[id%s: %s&lt;Macro&gt; The entityID. If %s is used here, it will match events that lack a specific entity, such as using the explosion function.%stype%s: %s&lt;Macro&gt; The type of entity exploding. Can be %s, as id.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1680</id>
	<key><![CDATA[location%s: %s&lt;Location Match&gt; The location of the pressure plate%sactivated%s: %s&lt;Boolean Match&gt; If true, only will trigger when the plate is stepped on. Currently, this will only be true, since the event is only triggered on activations, not deactivations, but is reserved for future use.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1681</id>
	<key><![CDATA['''CommandHelper''' is an alias, macro, and scripting plugin for Minecraft that lets you:]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1682</id>
	<key><![CDATA[Linux/MacOS]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>true</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1683</id>
	<key><![CDATA[On Windows systems, you'll need to have launched your command prompt as Administrator. (To install on Windows Subsystem for Linux, follow the same instructions as for Unix.) A program ''mscript'' will be installed on your path, and a PowerShell Module will also be installed. Running ''mscript'' will launch the interpreter, running it with a file will run that file, and using ''mscript -Tool'' followed by a verb (such as help) will run the cmdline utilities.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1684</id>
	<key><![CDATA['''Documentation:''' There's lots of complexity in the plugin, and without solid documentation, it is nearly worthless. While some of the documentation is generated programmatically, many pages are not. The auto documentation generator leaves room for more detailed information too -- none of which is currently filled in :( From writing examples for each function, to working on the main documentation, and keeping the current documentation up to speed, there's actually a lot to do that has nothing to do with coding!]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1685</id>
	<key><![CDATA[CommandHelper]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>true</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1686</id>
	<key><![CDATA[On Unix systems, you'll need to run the command with sudo. The installer will install an mscript bash file in /usr/local/bin/mscript, which simply wraps the jar. Running ''mscript'' will launch the interpreter, running it with a file will run that file, and using ''mscript --'' followed by a verb (such as help) will run the cmdline utilities.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1687</id>
	<key><![CDATA[Previous Versions]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1688</id>
	<key><![CDATA[Need more help? Chat with us on IRC in [[%s|#CommandHelper on irc.esper.net]], on [%s Discord], or go to the [%s issue tracker].]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1689</id>
	<key><![CDATA['''MethodScript''' is the name of the programming language that CommandHelper uses, and there is a commandline version of MethodScript as well, that you can use outside of Minecraft. MethodScript is an imperative, dynamic, event driven, value-level, metaprogramming (reflective), structured (block-structured, semi-object-oriented, semi-class-based,  recursive), parallel, partially strongly typed language, and is an active work in progress.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1690</id>
	<key><![CDATA[Do you like the plugin a lot? I certainly don't expect donations, and the any money I receive won't necessarily influence the amount of time I spend on the plugin (well, maybe it will), however I do spend a lot of time working on it, and I certainly won't turn anything down if you want to say thank you! If you reeeeally want a feature added to CommandHelper, and you're willing to pay money, get in contact with me, and we can discuss contract work, and we can discuss your needs, but otherwise, donations are just a way for you to tell me thanks!]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1691</id>
	<key><![CDATA[Syntax-coloring editors]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1692</id>
	<key><![CDATA[Sublime Text 3 - Cross-platform - Created by Ecconia]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1693</id>
	<key><![CDATA[If you create a syntax highlighter for your favorite text editor, contact us, and we can add it here!]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1694</id>
	<key><![CDATA[CommandHelper is turning into a large project, and I would love for more people to help work on it. Don't know java? Great! There are things for you to do too! If you're interested in any of the following tasks, feel free to get in touch with me, and we can get you started!]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1695</id>
	<key><![CDATA[Notepad++ (Default Theme) - Windows - Created by MrMagical]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1696</id>
	<key><![CDATA[Write a script to let players message each other while offline.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1697</id>
	<key><![CDATA[For the full changelog, including the changelog for older releases, see [[%s|this page]]]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1698</id>
	<key><![CDATA[TextWrangler and BBEdit - Mac OS X - Created by Connor Griffin (Very Outdated)]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1699</id>
	<key><![CDATA[__NOTOC__]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>true</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1700</id>
	<key><![CDATA[If you're using bukkit, throw the jar file in the plugins directory, and start your server. On first boot, the proper directory structure with placeholder files will be created, which you can then edit. The configuration directory will be called CommandHelper, and will be in the same directory as the jar.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1701</id>
	<key><![CDATA[How do you use CommandHelper? We have a set of easy to follow articles that you can read!]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1702</id>
	<key><![CDATA[Alias commands like ''/battle'' to run ''/warp #battlearena''.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1703</id>
	<key><![CDATA[If you would to request new functions, it is typically easy to add those, so please post your feature request in the issue tracker. If you happen to find a bug in the program, please let us know so we can fix it!]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1704</id>
	<key><![CDATA[If you're using the cmdline version, run "java -jar commandhelper--SNAPSHOT-full.jar help" for a listing of the possible commands, and "java -jar commandhelper--SNAPSHOT-full.jar install-cmdline" to install. The configuration directory will be called MethodScript, and will be in the same directory as the jar. If the name or path of the jar file changes, you'll need to re-install, so it may be prudent to name the jar with a neutral name that does not include the version number.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>true</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1705</id>
	<key><![CDATA[Feature requests and bugs]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1706</id>
	<key><![CDATA[[%s Donations]]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1707</id>
	<key><![CDATA[[[%s|center]]]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1708</id>
	<key><![CDATA[Atom - Cross-platform - Created by jacobwgillespie]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1709</id>
	<key><![CDATA[Notepad++ (Obsidian Theme) - Windows - Created by TTSDA (based on MrMagical's Highlighter)]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1710</id>
	<key><![CDATA[and others]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1711</id>
	<key><![CDATA[Bukkit]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>true</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1712</id>
	<key><![CDATA[Tired of writing your scripts in a plain black and white text editor? Try a syntax Highlighter!]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1713</id>
	<key><![CDATA[The developers of MethodScript do not recommend it (yet) for production or otherwise critical code, however, as a quick scripting language, or for use in Minecraft, it is highly recommended.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1714</id>
	<key><![CDATA[Long-term planned features can be found on the [[%s|roadmap]], and short term features can be found on the issue tracker. To request your own features or file a bug, use [%s our issue tracker]. Known bugs can be found on the issue tracker.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1715</id>
	<key><![CDATA[Find a bug in this page? %sEdit this page yourself, then submit a pull request.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1716</id>
	<key><![CDATA[If you prefer other text editors, there is community support for other text editors:]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1717</id>
	<key><![CDATA['''Just want the API?''' See the [[%s|API reference]].]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1718</id>
	<key><![CDATA[Write your own /tp, /time, or /warp]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1719</id>
	<key><![CDATA[Windows]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>true</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1720</id>
	<key><![CDATA['''Want to script completely new features?''' Follow the ''Learning Trail'' at the bottom of the page.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1721</id>
	<key><![CDATA[Only the latest development build is officially supported, but there is some community support for older builds, which you can get by joining IRC or Discord. For the latest builds, head to  [%s the build site], click the blue download button to the right of the topmost build, and then download the %scommandhelper--SNAPSHOT-full.jar%s file. (Don't download the one without -full.) You can also download the versionless jar that corresponds to the exact version that this site was built with [[%s|here]], though this is not supported.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>true</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1722</id>
	<key><![CDATA['''Testing:''' While a large portion of CommandHelper has automated tests, there is still no substitute for running [%s beta] versions of CommandHelper on a real server. It would be nice to know that several servers have put it through the ringer before a version goes to full release status.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1723</id>
	<key><![CDATA['''Want to setup simple aliases?''' Try the [[%s|Beginner's Guide]]]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1724</id>
	<key><![CDATA[Donations]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1725</id>
	<key><![CDATA[{{TakeNote|text=To generate up-to-the-minute syntax colors you can also run CommandHelper from the command line using %s %sjava -jar CommandHelper.jar syntax npp obsidian%s %s For more detailed instructions, [[%s|see here]]}}]]></key>
	<eligibleForMachineTranslation>false</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1726</id>
	<key><![CDATA[Changelog]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1727</id>
	<key><![CDATA[Remember that [%s CommandHelper is open source].]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1728</id>
	<key><![CDATA[Usage]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1729</id>
	<key><![CDATA[Installation]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1730</id>
	<key><![CDATA[Tools]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1731</id>
	<key><![CDATA[Do much more, from the simple to the complex, with zero Java code.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1732</id>
	<key><![CDATA['''Programming:''' From adding functions, to writing test cases, to working on the core aspects of CommandHelper, there are many different tasks to conquer.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1733</id>
	<key><![CDATA[The Visual Studio Code  [%s MethodScriptVSC] IDE is the only officially supported IDE/Syntax Highlighter, and is most likely the most feature rich and up-to-date  version, so it is highly recommended. To install, [%s download Visual Studio Code]  (free, on all platforms), and install the MethodScriptVSC extension from the extensions tab.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1734</id>
	<key><![CDATA[Alternatively, for advanced users, you could download the sources and build it yourself locally. To do that, you need git, maven, and jdk >= 8. Pull down the code with %sgit clone git@github.com:EngineHub/CommandHelper.git%s, then follow the directions in [%s the README].]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1735</id>
	<key><![CDATA[Want to help?]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1736</id>
	<key><![CDATA[Create an automated battle arena that automatically resets.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1737</id>
	<key><![CDATA[gedit - GNOME/Cross-platform - Created by MrMagical]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1738</id>
	<key><![CDATA[For previous versions of the documentation, see %shere%s for a directory.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1739</id>
	<key><![CDATA[This privacy policy has been compiled to better serve those who are      concerned with how their 'Personally Identifiable Information' (PII) is being used online.      PII, as described in US privacy law and information security, is information that can be      used on its own or with other information to identify, contact, or locate a single person,      or to identify an individual in context. Please read our privacy policy carefully to get a      clear understanding of how we collect, use, protect or otherwise handle your Personally      Identifiable Information in accordance with our website. %s %s     %s         What personal information do we collect from the people that visit our website?     %s %s %s     When using the site, analytics data may be used about you to provide you with more relevant ads. %s %s     %sWhen do we collect information?%s %s %s     We collect information from you when you use the site or enter information on our site. %s %s     %sHow do we use your information? %s %s %s      We may use the information we collect from you surf the      website, or use certain other site features in the following ways: %s %s     %s         To personalize your experience and to allow us to deliver the type of content and product          offerings in which you are most interested.     %s     %s          To improve our website in order to better serve you.     %s     %s          To allow us to better service you in responding to your customer service requests.     %s %s %s     %sHow do we protect your information?%s %s %s      We only provide articles and information. We never ask for personal or private information like      names, email addresses, or credit card numbers. %s %s     %sDo we use 'cookies'?%s %s %s     Yes. Cookies are small files that a site or its service provider transfers to your computer's      hard drive through your Web browser (if you allow) that enables the site's or service provider's      systems to recognize your browser and capture and remember certain information. For instance, we      use cookies to help us remember and process the items in your shopping cart. They are also used      to help us understand your preferences based on previous or current site activity, which enables      us to provide you with improved services. We also use cookies to help us compile aggregate data      about site traffic and site interaction so that we can offer better site experiences and tools      in the future. %s %s     %sWe use cookies to:%s %s %s     %s         Understand and save user's preferences for future visits.     %s     %s         Keep track of advertisements.     %s     %s         Compile aggregate data about site traffic and site interactions in order to offer better site          experiences and tools in the future. We may also use trusted third-party services that track          this information on our behalf.     %s %s %s     You can choose to have your computer warn you each time a cookie is being sent, or you can      choose to turn off all cookies. You do this through your browser settings. Since each browser is      a little different, look at your browser's Help Menu to learn the correct way to modify your      cookies. %s %s     If you turn cookies off, some features will be disabled. It won't affect      the core user's experience however. %s %s     %sThird-party disclosure%s %s %s     We do not sell, trade, or otherwise transfer to outside parties your Personally Identifiable      Information unless we provide users with advance notice. This does not include website hosting      partners and other parties who assist us in operating our website, conducting our business, or      serving our users, so long as those parties agree to keep this information confidential. We may      also release information when it's release is appropriate to comply with the law, enforce our      site policies, or protect ours or others' rights, property or safety. %s However, non-personally      identifiable visitor information may be provided to other parties for marketing, advertising, or other uses.  %s %s     %sThird-party links%s %s %s     Occasionally, at our discretion, we may include or offer third-party products or services on our website.      These third-party sites have separate and independent privacy policies. We therefore have no responsibility      or liability for the content and activities of these linked sites. Nonetheless, we seek to protect the      integrity of our site and welcome any feedback about these sites. %s %s     %sGoogle%s %s %s     Google's advertising requirements can be summed up by Google's Advertising Principles. They are put in place to      provide a positive experience for users. %s  %s %s     We use Google AdSense Advertising on our website. %s %s     Google, as a third-party vendor, uses cookies to serve ads on our site. Google's use of the DART cookie enables      it to serve ads to our users based on previous visits to our site and other sites on the Internet. Users may      opt-out of the use of the DART cookie by visiting the Google Ad and Content Network privacy policy. %s %s     %sWe have implemented the following:%s %s %s     %s         Demographics and Interests Reporting     %s     %s         DoubleClick Platform Integration     %s %s %s     We, along with third-party vendors such as Google use first-party cookies (such as the Google Analytics cookies)      and third-party cookies (such as the DoubleClick cookie) or other third-party identifiers together to compile data      regarding user interactions with ad impressions and other ad service functions as they relate to our website.  %s %s     %sOpting out:%s Users can set preferences for how Google advertises to you using the Google Ad              Settings page. Alternatively, you can opt out by visiting the Network Advertising Initiative Opt Out              page or by using the Google Analytics Opt Out Browser add on. %s %s     %sCalifornia Online Privacy Protection Act%s %s %s     CalOPPA is the first state law in the nation to require commercial websites and online services to post a      privacy policy.  The law's reach stretches well beyond California to require any person or company in the      United States (and conceivably the world) that operates websites collecting Personally Identifiable Information      from California consumers to post a conspicuous privacy policy on its website stating exactly the information      being collected and those individuals or companies with whom it is being shared. -       See more at: %s %s %s     %sAccording to CalOPPA, we agree to the following:%s %s %s     Users can visit our site anonymously. %s %s     Once this privacy policy is created, we will add a link to it on our home page or as a minimum, on the first      significant page after entering our website. %s %s     Our Privacy Policy link includes the word 'Privacy' and can easily be found on the page specified above. %s %s     You will be notified of any Privacy Policy changes on our Privacy Policy Page (this page) %s %s     %sHow does our site handle Do Not Track signals?%s %s %s     We honor Do Not Track signals and Do Not Track, plant cookies, or use advertising when a Do Not Track (DNT)      browser mechanism is in place.  %s %s     %sDoes our site allow third-party behavioral tracking?%s %s %s     It's also important to note that we allow third-party behavioral tracking %s %s     %sCOPPA (Children Online Privacy Protection Act)%s %s %s     When it comes to the collection of personal information from children under the age of 13 years old,      the Children's Online Privacy Protection Act (COPPA) puts parents in control.  The Federal Trade      Commission, United States' consumer protection agency, enforces the COPPA Rule, which spells out what      operators of websites and online services must do to protect children's privacy and safety online. %s %s     We do not specifically market to children under the age of 13 years old. %s %s     %sContacting Us%s %s %s     If there are any questions regarding this privacy policy, you may contact us using the contact information found elsewhere. %s %s     Last Edited on 2017-09-11]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1740</id>
	<key><![CDATA[Welcome to the official site for ! For docs, %sclick here%s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1741</id>
	<key><![CDATA[For the docs for the latest version, see %shere%s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1742</id>
	<key><![CDATA[Contributors like you help shoulder the cost of the servers that run this website, and allow for more exciting and ambitious projects in the future.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1743</id>
	<key><![CDATA[These sponsors are truly devoted to MethodScript.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1744</id>
	<key><![CDATA[Sponsor]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1745</id>
	<key><![CDATA[''There are currently no Gold Sponsors, be the first!'']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1746</id>
	<key><![CDATA[''There are currently no Sponsors, be the first!'']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1747</id>
	<key><![CDATA[Titanium Sponsors]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1748</id>
	<key><![CDATA[If you would like to help contribute to the development of MethodScript in a sustainable and continuous fashion, please see our Patreon campaign here: [%s %s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1749</id>
	<key><![CDATA[Gold Sponsors]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1750</id>
	<key><![CDATA[Platinum Sponsors]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1751</id>
	<key><![CDATA[Jason Unger%s %sVergilePrime - [%s Angel's Reach Minecraft]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1752</id>
	<key><![CDATA[thgilfodrol - [%s %s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1753</id>
	<key><![CDATA[These guys aren't the biggest sponsors, but they are still very much appreciated.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1754</id>
	<key><![CDATA[Please choose the version of  you wish to view:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1755</id>
	<key><![CDATA['''The page you were looking for could not be found. Check the URL and try again.''']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1756</id>
	<key><![CDATA[Syntax highlighting for non-MethodScript code is provided by highlightjs, under the following license:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1757</id>
	<key><![CDATA[Legal and Regulatory]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1758</id>
	<key><![CDATA[java -jar .jar site-deploy]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1759</id>
	<key><![CDATA[You must have a webserver set up to properly use the site, however, you may look at individual files in the web browser.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1760</id>
	<key><![CDATA[For more information about how this site is generated, or information about the templating syntax, see [[%s|this page]].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1761</id>
	<key><![CDATA[THE WEBSITE IS PROVIDED "AS IS" AND THE AUTHORS DISCLAIM ALL WARRANTIES WITH REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS. IN NO EVENT SHALL THE AUTHORS BE LIABLE FOR ANY SPECIAL, DIRECT, INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR PERFORMANCE OF THIS WEBSITE.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1762</id>
	<key><![CDATA[The methodscript.com website is tested via BrowserStack]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1763</id>
	<key><![CDATA[This site uses and is validated against HTML5 and CSS3]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1764</id>
	<key><![CDATA[Portions of the site are copyright &copy; 2016 -  by the  Team, based on works contributed under the license of the MethodScript project.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1765</id>
	<key><![CDATA[The site template is provided by %sTEMPLATED%s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1766</id>
	<key><![CDATA[This site may use cookies. See our privacy policy [[%s|here]].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1767</id>
	<key><![CDATA[This site is deployed via the site-deploy tool built in to . You can deploy your own version  of the site locally, if you wish, simply run]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1768</id>
	<key><![CDATA[The site is generated with Java, and uses Javascript, HTML5, and CSS to display what you see.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1769</id>
	<key><![CDATA[int - Any number that doesn't have a decimal point: 2]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1770</id>
	<key><![CDATA[This symbol followed by a literal denotes a command]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1771</id>
	<key><![CDATA[string - Any set of characters surrounded by single quotes or double quotes: 'string', "also a string".  \u0000 inside a string will allow for arbitrary unicode characters to be inserted into a string, and \n is a newline.  \\ (double slash) inserts a literal slash, and \' will insert a literal quote.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1772</id>
	<key><![CDATA[Block comments start with %s/*%s and end with %s*/%s This causes the compiler to ignore everything within the comment block, including newlines.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1773</id>
	<key><![CDATA[main.ms, auto_include.ms, and aliases.msa]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1774</id>
	<key><![CDATA[In aliases.msa:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1775</id>
	<key><![CDATA[T%sasks - Any tasks set with %s or %s are cleared.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1776</id>
	<key><![CDATA[Continued Learning]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1777</id>
	<key><![CDATA[Comments are a useful way to mark up your code for humans to read later. (With one exception) comments are ignored by the compiler, and you are free to put whatever information you wish in a comment. There are 4 ways to comment code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1778</id>
	<key><![CDATA[You can actually reload these sub-modules individually if you want, by passing parameters to the command. There are two  modes, whitelist, or by default, blacklist. In blacklist mode, all modules get reloaded except the modules that are  blacklisted, which aren't reloaded. In whitelist mode, only the specified modules are reloaded. You use the underlined  letter to refer to that specific module. For instance, if you want to reload everything but leave the exported variables  and execution queue alone, you can run %s/recompile -ge%s. If you ONLY want to reload tasks, you can run %s/recompile --whitelist -t%s. Note that reloading individual modules isn't normally encouraged, because it can put your server in an inconsistent and unreproducable state if you aren't careful. Running  %s/recompile%s by itself (which reloads everything) is recommended. You can also run  %s/recompile -h%s for the usage instructions and long options list.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1779</id>
	<key><![CDATA[Functions allow for very dynamic scripts to be run. There are many defined functions, including functions that provide  control flow functionality. For the full list of functions, see the [[API]]. A function is identified by a literal string, followed by parenthesis. So in %sfunc()%s, "func" is the name of the function, and "(" and ")" begin and end the function argument list (in this case, there are no arguments being passed in.) Functions can have zero, one, or two or more arguments passed to them. In the case of two or more arguments, each argument is separated by a comma. For instance:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1780</id>
	<key><![CDATA[&gt;&gt;&gt; and &lt;&lt;&lt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1781</id>
	<key><![CDATA[\&nbsp;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1782</id>
	<key><![CDATA[Anything not defined above is a lit]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1783</id>
	<key><![CDATA[Symbol Table]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1784</id>
	<key><![CDATA[newline]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1785</id>
	<key><![CDATA[Note that string concatenation happens automatically (known as autoconcatenation). Let's take the following example:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1786</id>
	<key><![CDATA[So, what is an execution unit? It is a unit of code that gets run, from top to bottom. You can think of it as an  '''insertion point''' to your code, or places that will start up your code. An execution unit is often times made up of  several parts, so let's create a multifile example, which demonstrates a few execution units.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1787</id>
	<key><![CDATA[aliases.msa is where your aliases go, and each alias is a fully separate '''compilation unit''', in fact, even a compile  error in one alias will not usually interfere with the other aliases.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1788</id>
	<key><![CDATA[lit]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1789</id>
	<key><![CDATA[In a script, there are several types of data. The language is currently loosely typed however, so the string '2' is  equivalent to the integer 2, is equivalent to the double 2.0, is equivalent to the boolean true. Values are cast just  before they are used. Note that sometimes data cannot be cast, for instance the string 'string' cannot be cast to a  number, so a runtime exception will be thrown if a function expects a number, and is given that. Also, arrays are not  able to be cast into other data types, but can contain values of any data type.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1790</id>
	<key><![CDATA[All other characters]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1791</id>
	<key><![CDATA[/reloadaliases%s is an alias to %s/recompile]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1792</id>
	<key><![CDATA[If inside an optional variable [$opt='val'], it's an opt_var_assign. Otherwise, it's a alias_end]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1793</id>
	<key><![CDATA[The start and end of a function. If a literal proceeds the func_start symbol, it is called func_name]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1794</id>
	<key><![CDATA[The built in %s/recompile%s command is used to reload just CommandHelper, though %s/reload%s will  also reload CommandHelper. However, using the recompile command can allow for finer grained control of what all gets  reloaded. By default, the command reloads the following things about CommandHelper:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1795</id>
	<key><![CDATA[Sometimes a script may sometimes cause an error that could be anticipated. Instead of just having the script die, it is  possible to catch these errors, and perform alternate functionality. MethodScript mirrors the functionality of languages  like PHP and Java with exception handling. For more information about exception handling in MScript, see  [[%s|this page]]. For a more general discussion on exception handling, see  [%s this page] on Wikipedia.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1796</id>
	<key><![CDATA[Separates arguments in a function]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1797</id>
	<key><![CDATA[Data Types]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1798</id>
	<key><![CDATA[separator]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1799</id>
	<key><![CDATA[[ and ]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1800</id>
	<key><![CDATA[the %s/test [$command=] = &gt;&gt;&gt; &lt;&lt;&lt;%s part is the alias markup, and is not actual MethodScript,  that is, the symbols and characters follow different meanings than inside the alias definition. In this example,  %sconsole($command);%s is pure MethodScript.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1801</id>
	<key><![CDATA[( and )]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1802</id>
	<key><![CDATA[array - An array of any other datatypes, including other arrays. Created by using the function %sarray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1803</id>
	<key><![CDATA[lsquare_bracket and rsquare_bracket]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1804</id>
	<key><![CDATA[Exception Handling]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1805</id>
	<key><![CDATA[Scripting Examples]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1806</id>
	<key><![CDATA[The %s#%s and %s//%s symbols are identical. They are line comments. When either is encountered, the remainder of the line is ignored by the compiler. %s//%s is preferred over %s#%s, however %s#%s is not deprecated, nor will it ever be. The only exception to this preference is when using a hashbang for cmdline code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1807</id>
	<key><![CDATA[S%scripts - Any changes that you have made to any scripts will be reloaded and applied. Main files are re-run,  and any new commands are re-registered.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1808</id>
	<key><![CDATA[double - Any number that has a decimal point: 2.0]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1809</id>
	<key><![CDATA[func_start and func_end]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1810</id>
	<key><![CDATA[- Created with the "%s" keyword:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1811</id>
	<key><![CDATA[Denotes that the rest of this line is a comment]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1812</id>
	<key><![CDATA[Here are a few more complex examples to get you started on how to use the advanced features of CommandHelper. Because of  the Turing completeness of the plugin, it is possible to do far more advanced things.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1813</id>
	<key><![CDATA[Pro%sf%siler - The profiler.config file is reloaded]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1814</id>
	<key><![CDATA[In your scripts, there are a few special symbols that are not treated as literals. In the event of a compiler error,  it may be helpful to know what each symbol is called. These are as follows:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1815</id>
	<key><![CDATA[Denotes that this variable is optional, if included on the left side of an alias, or accesses an element in an array  if used on the right.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1816</id>
	<key><![CDATA[boolean - Created with the "true" or "false" keywords: true]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1817</id>
	<key><![CDATA[Starts and stops a multiline construct]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1818</id>
	<key><![CDATA[Here, we have created 3 separate execution units. main.ms and aliases are implicitly created, simply by their existence,  but here we have also created an event handler, which will get run when some_event is triggered. main.ms is triggered  upon server startup (and /reloadaliases) and aliases are triggered when a command is run. When this script is compiled,  you can essentially visualize the execution units as ending up like this: (with some code removed to make things more  readable)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1819</id>
	<key><![CDATA[recompile]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1820</id>
	<key><![CDATA[When a single dollar sign, it is final_var, otherwise variable]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1821</id>
	<key><![CDATA[opt_var_assign or alias_end]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1822</id>
	<key><![CDATA[In main.ms:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1823</id>
	<key><![CDATA[New Line]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1824</id>
	<key><![CDATA[block comment]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1825</id>
	<key><![CDATA[This is a label for commands]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1826</id>
	<key><![CDATA[Smart comments are like block comments, but start with %s/**%s (two asterisks) instead. They are currently unused, but are reserved for future use. They are used for documentation generation functionality.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1827</id>
	<key><![CDATA[Third execution unit, the event handler created in main.ms:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1828</id>
	<key><![CDATA[Separates each macro command]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1829</id>
	<key><![CDATA[G%slobals - Global values, set with %s are cleared out.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1830</id>
	<key><![CDATA[First execution unit, main.ms:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1831</id>
	<key><![CDATA[In this simple example, you can think of each execution path as a line through your code (in reality, it's a tree, but  if that doesn't make sense to you, ignore that for now). That line follows very specific rules based on code structure,  so how you lay out your code is important to be able to visualize.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1832</id>
	<key><![CDATA[Second execution unit, the /test $alias alias:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1833</id>
	<key><![CDATA[Comments]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1834</id>
	<key><![CDATA[In auto_include.ms:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1835</id>
	<key><![CDATA[Everything inside this (newlines included) is a comment. The only thing you can't have inside a block comment is a */  (because that ends the comment)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1836</id>
	<key><![CDATA[If you are wanting to do more dynamic things other than variables, CommandHelper allows you to do this through the  use of Turing complete language, MethodScript. If you aren't familiar with any type of programming, you may wish to  find resources on languages like Java and PHP. The language mirrors both languages in certain ways, as well as  introducing its own methodologies.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1837</id>
	<key><![CDATA[Many of the scripting concepts are addressed in greater depth in the Learning Trail, shown below. The MScript topics are of great value to go through, and they build off what you have already learned in this tutorial. What is provided in this lesson should be enough to get you started with basic script writing, so start trying to apply these concepts to your own scripts, and continue going down the learning trail!]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1838</id>
	<key><![CDATA[Functions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1839</id>
	<key><![CDATA[label]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1840</id>
	<key><![CDATA[or //]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1841</id>
	<key><![CDATA[Pe%sr%ssistance-Config - Any changes to the persistance.config file are reloaded]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1842</id>
	<key><![CDATA[An 'enter' in the file]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1843</id>
	<key><![CDATA[This is a variable that can be defined and used on the right side of an alias]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1844</id>
	<key><![CDATA[E%sxecution-Queue - Any tasks queued up with the queue_* family of functions is cleared.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1845</id>
	<key><![CDATA[In the first run function, we see that '/run', 'this', and 'command' are all technically separate arguments, but because  they are not separated by commas, operators, or other symbols, they are automatically concatenated together, using the %s function, essentially yeilding: '/run this command', as you would expect. This is also the  behavior exhibited by a simple alias that uses non-strict formatting: %s/cmd = /real command%s.  '/real' and 'command' are automatically sconcatenated together, and then run.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1846</id>
	<key><![CDATA[E%sx%stensions - Extensions are reloaded]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1847</id>
	<key><![CDATA[Note that a lit and string are treated the same, however special characters must be put in a string to be treated as  literal character. Technically all other special characters are treated as literals, but to make your script compatible  with future versions, you must put any non-word character inside a string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1848</id>
	<key><![CDATA[comma]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1849</id>
	<key><![CDATA[The auto_include.ms file is also a pure MethodScript file, and it is as if in each '''execution unit''', it is  automatically %sed for you. There are a few different ways to make an execution unit. The first way is  to create a new alias. Each alias is it's own execution unit, and uniquely to the aliases, each alias is also it's own  compilation unit. A bound event handler is another execution unit, and the entirety of main.ms is an execution unit.  set_interval and set_timeout are also separate execution unit, as well as execution queue elements, and others.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1850</id>
	<key><![CDATA[ivariable - An ivarible (or simply a variable) is a variable that can be defined and used from within the script.  Constant variables ($var), are assigned by the user at command runtime, and are technically constants as far as the  rest of the script is concerned. IVariables can be defined by the script writer and assigned various values that can  change throughout the script running. To define and use an ivariable, use the assign() function, or the = operator.  If an ivariable is used without first being defined, the value of the variable will be 0, 0.0, ,  false, or %s, depending on how it is used. Most functions use the value in the ivariable without caring that it is  an ivariable, but it is possible that a function requires that a certain argument be an ivariable, such as the for()  function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1851</id>
	<key><![CDATA[Each of these files serve a separate purpose. main.ms is run at server startup, only once. Typically, you use this to  register bound events, using the bind() function, or anything else you want to run only once. Keep in mind, this is  re-run when you /reloadaliases, but bound events and intervals and such are stopped, so you won't have multiples of  anything. main.ms uses '''pure MethodScript''', that is, it has a slightly different syntax than aliases.msa. In aliases.msa,  each alias is defined, along with a snippet of MethodScript. For instance, in the alias,]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1852</id>
	<key><![CDATA[variable]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1853</id>
	<key><![CDATA[comment]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1854</id>
	<key><![CDATA[- Some functions return %s, which is actually a datatype. When viewed as a string, it is equivalent to an  empty string. Cannot be created directly.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1855</id>
	<key><![CDATA[multiline_start and multiline_end]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1856</id>
	<key><![CDATA[aliases.msa:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1857</id>
	<key><![CDATA[Those two functions, when added to auto_include.ms, will let you do something like this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1858</id>
	<key><![CDATA[Sign Editing]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1859</id>
	<key><![CDATA[Brand and Unbrand a user]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1860</id>
	<key><![CDATA[In auto_include.ms]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1861</id>
	<key><![CDATA[Instead of handling permission checking yourself, you can let CommandHelper do it using an alias permission label. This will display an error if a restricted function, like set_sign_text(), is ran without permission. Ensure that your base group (in our case, 'default') has the permission 'commandhelper.alias.safe']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1862</id>
	<key><![CDATA[Pagination]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1863</id>
	<key><![CDATA[This file goes into the same directory as your aliases.msa file, and is normally used for Procedures. You can put useful commands that you want in %severy%s alias here.  Here's a simple one, that is used by the example scripts below]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1864</id>
	<key><![CDATA[Let users see their regions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1865</id>
	<key><![CDATA[This lets you use the alias _bc in every alias, to do a Broadcast to the server, with a leading subject. You will see it used below.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1866</id>
	<key><![CDATA[Simple mail system]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1867</id>
	<key><![CDATA[This script lets anyone with the permission "command.fixspleef" reset a spleef arena. It also only lets it happen every 5 minutes, to stop people spamming it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1868</id>
	<key><![CDATA[You'll notice the last line relies on CH's greedy pattern matching. If someone tries %s/brand GrieferTest Is an idiot%s, it WON'T match on the %s/brand $user $brand%s alias, because it has too many parameters.  It will, however, happily match on the bottom line, and give a warning to the person who tried to brand to only use one word.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1869</id>
	<key><![CDATA[A toggle to let admins and mods join the server unannounced]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1870</id>
	<key><![CDATA[You could also have a script that moves EVERYONE off the server, like this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1871</id>
	<key><![CDATA[-added by russellsayshi In aliases.msa]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1872</id>
	<key><![CDATA[In main.ms]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1873</id>
	<key><![CDATA[And the third is to actually edit the sign. Note that the magic variable '$' is used here, which catches any number of words and returns it as a single string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1874</id>
	<key><![CDATA[auto_include.ms]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1875</id>
	<key><![CDATA[Reset a Spleef Arena]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1876</id>
	<key><![CDATA[You would then type "/sendall lobby" to send all players on the current server to the lobby.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1877</id>
	<key><![CDATA[Use BungeeCord with CommandHelper]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1878</id>
	<key><![CDATA[Main.ms:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1879</id>
	<key><![CDATA[This ties into WorldGuard, and uses the sk_region commands.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1880</id>
	<key><![CDATA[The second is when they use %s/fixsign 3%s to delete the third line of the sign]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1881</id>
	<key><![CDATA[This is made from three commands. The first is when someone types %s/fixsign%s without any options. It tells them the parameters. The 'text' is gray as a hint that it's an optional parameter.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1882</id>
	<key><![CDATA[Someone giving you problems? Want to make sure everyone else knows about it? Brand them. Note that this is written for use with [%s PermissionsEx] and you'll have to change the prefix commands for your own permissions system.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1883</id>
	<key><![CDATA[Auto_include.ms:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1884</id>
	<key><![CDATA[Annotation declarations (not the annotation usages) can be themselves annotated with various annotations. All annotations are available at runtime, so unlike Java, there is no Retention annotation. There is however the ability to restrict ''where'' an annotation is placed, (and if it can be placed more than once) based on the type of code structure being annotated.  The Target annotation, which takes a ElementType enum, can be used to restrict what elements this annotation is added to, and the Multiple annotation can be added to indicate that the annotation can be applied multiple times.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1885</id>
	<key><![CDATA[The key principal to take away here, is that annotations require immutable data, and are ways to add meta information to your code. They do not "execute" ever, that is, they are to be fully resolved at compile time, because in many cases, the compiler itself uses the annotations itself to do certain things.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1886</id>
	<key><![CDATA[Defining custom annotations]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1887</id>
	<key><![CDATA[Annotations may also have annotation parameters. The parameters must be immutable, and fully defined at compile time, which means that you can either hardcode the values in, or use an immutable variable. If the parameter takes an array, and you only have one value in the array, you may simply provide the single element. Additionally, if the annotation is defined with only one parameter, and that parameter's name is  'value', you may leave off the parameter name and it will be assigned to value,  otherwise you must label the parameters the same as you would when creating an array.  Here are some valid examples:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1888</id>
	<key><![CDATA[The basic syntax for an annotation uses the %s@{}%s syntax. If the annotation were named Annotation, and you were tagging a variable declaration, it might look like this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1889</id>
	<key><![CDATA[Annotations allow for meta data to be added to elements, and are used by the system in various places, and can also be defined and used by your code as well. Annotations are also referred to "tags" in MethodScript, and adding an annotation to an item is known as "tagging" an item.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1890</id>
	<key><![CDATA[To define your own annotation, define the public values in an %sannotations%s block in a class-like structure, and include default values if you like. Methods and constructors are not allowed, and you can in many ways think of an annotation like an interface, though there are some key differences. Annotations may extend from one another. All properties declared on an annotation are inherently immutable.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1891</id>
	<key><![CDATA[To use the annotation on an element, you must use the reflection methods. Since multiple annotations may be present on an element, you must select the annotations specifically (or you can iterate through all of them dynamically). Annotation parameters are immutable, though they do not work exactly the same as immutable class types, because the default value is not used if the value is provided by the user. Annotations may be applied to an element multiple times, (if the annotation is so configured) so reflect_annotation returns an array%s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1892</id>
	<key><![CDATA[Meta annotations]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1893</id>
	<key><![CDATA[PowerMock]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1894</id>
	<key><![CDATA[Maven]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1895</id>
	<key><![CDATA[You may have noticed that CommandHelper has a large base of unit tests. I take automated  testing very seriously; there is no way for me to scale up and maintain any semblance of  quality without automating as much testing as possible. This is where the unit tests come  in. Each time a new build occurs, all the unit tests are run, and failing tests are reported,  and very quickly fixed. If a unit test covers a use case, you can more or less bank on that  particular use case working in the final product. This allows you to have much higher confidence  in the product, despite most functionality not being manually tested before a release.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1896</id>
	<key><![CDATA[Annotation Processor and meta programming]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1897</id>
	<key><![CDATA[The question at this point is "which is more efficient?" Only through profiling can  we actually determine this, but constructs like this can be objectively measured and  transformed into the more efficient version, without the coder ever having to worry  about it. (BTW, turns out the second one is more efficient). In MethodScript, each  function is in charge of its own optimization. This makes it easier for core language  features to be added and optimized quite easily, as well as organizes the code a bit better.  Many functions can be optimized in a similar way too, so there is a framework in place for  handling much of the optimizations generically (and in fact ties into the documentation too).  To see if an individual function supports optimizations, check to see if it implements  , which will then tell you more about the optimization techniques it uses. Each function has the ability to transform itself, based on analysing its child nodes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1898</id>
	<key><![CDATA[Testing Architecture]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1899</id>
	<key><![CDATA[For the most part, because we use maven, building CommandHelper is as trivial as running  %smvn clean install%s, but it is nice to understand what actually happens when  you do that, and what things could cause that to go wrong.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1900</id>
	<key><![CDATA[Dependencies are downloaded from a variety of locations, but if none of them have the specified dependency, it may be that it is only installed locally on developer machines.  If this is the case, you'll have to find the source for the dependency, then  compile and install it manually, but usually I try to stay away from doing this,  as it also makes my life harder. Also, before you build a project for the first  time, you may notice compile errors in your IDE. This is because the dependencies  have not yet been downloaded. Try to build it, this should download the resources  for you, which should the make the compile errors go away. This is known as priming  the build.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1901</id>
	<key><![CDATA[You can see that it roughly corresponds with each token being it's own node, and  "(" denoting a child beginning, "," denoting a sibling, and ")" denoting the end of  a node's children. This is more or less how the compiler actually works. In the first  stage, things like symbols aren't fully parsed yet, and things like array access  notation  complicate things, so the tree looks a bit funny,  but the optimization step turns "1 + 1" into "add(1, 1)", and "@var[1]" to "array_get(@var, 1)"  which then finishes up creating a full parse tree where everything is a function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1902</id>
	<key><![CDATA[CommandHelper makes heavy use of annotations to provide functionality. Annotations are a [%s Java feature] that provides a way to "meta program" in Java. An annotation is a "tag" that can be use to mark various methods, fields, classes, or other constructs in that Java language. This meta programming allows for several different advantages, the main one in CommandHelper being the ability to maintain all information about classes in one place, instead of spreading the information around several different files. In general, when adding a new class, it is customary to copy paste another class, then modify it. The ability to do this in one place, instead of having to modify an existing list manually is following a principal known as the [%s open/closed] principal, and is one of the key components of a [%s SOLID] architecture. It also enables easier Dependency Injection, one of the other heavily followed design principles. In general, CommandHelper uses annotations to mark events, functions, and other resources for addition to the api, and inherently allows for one-to-many relationships between code. An additional feature that CommandHelper includes is a   utility class, which provides the means to dynamically discover the constructs that are tagged with the various annotations, as well as providing other methods for meta class discovery for java sources that aren't aware of CommandHelper.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1903</id>
	<key><![CDATA[Abstraction Layer]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1904</id>
	<key><![CDATA[Events]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1905</id>
	<key><![CDATA[JUnit]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1906</id>
	<key><![CDATA[Core Architecture]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1907</id>
	<key><![CDATA[[%s Lexing] looks at each individual character in the  source code, and turns it into tokens. So, for instance, given the source code "1 + 1"  it would parse the 5 characters into 3 separate tokens, a number, a plus symbol, and a  number. At this point, only a few compile errors can be caught, for instance, an incomplete  string, but from this point on, it's much easier to gather meaning from the tokens.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1908</id>
	<key><![CDATA[When Jenkins builds, if the build fails due to either compilation failures or unit  test failures, the IRC channel is notified. (Actually successful builds are pinged  as well.) When a successful build occurs, A link to the build is also posted in IRC.  Commits to the github account trigger a new build, so these builds are the freshest  you could possibly have, unless you're the developer.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1909</id>
	<key><![CDATA[The main dependency of CommandHelper is (of course) Spigot, but if you look  at it's dependency tree, you see almost 20 different dependencies! Not to worry,  most of those are not actually included by CH, they are transitive dependencies,  but anyways, with a few exceptions, they are not strictly required at runtime,  just build time. There are a few exceptions, but for the most part, for these  exceptions, I use a technique called %sshading%s. Shading allows you to  literally copy another dependency (or parts of a dependency) into the final jar  that is distributed. Doing this has both advantages and disadvantages. The main  disadvantage is that your distributable gets bigger, and you may end up distributing  code that they already have. To me, this is a non-issue, computer's hard disks are  huge and cheap, so even if you double the size of the jar, it won't make a dent in  the remaining free space for a person's disk drive. The advantage is that you only  need to distribute one single file instead of several, which tends to greatly  de-complicate the distribution process.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1910</id>
	<key><![CDATA[This is exactly equivalent to:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1911</id>
	<key><![CDATA[Dependencies]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1912</id>
	<key><![CDATA[The abstraction layer handles all communication between CommandHelper and Bukkit.  It is the only place in the code that should directly reference bukkit. All methods  of communication from CommandHelper to Bukkit are defined as interfaces, which  must be implemented once per server type, but are all that are required to be  implemented to add another server type. This will allow for easier migration to  and from Bukkit and other server mods, with minimal effort on the part of the  programmer. There is a disadvantage of code being harder to trace, but if you  use the tools available to you in an IDE, this should not be a huge barrier,  and the advantages far outweigh the problems.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1913</id>
	<key><![CDATA[Many functions cannot be optimized, because they inherently access inputs or outputs, and  other functions can only be optimized if the input to them is ''fully static'', that is,  there are no variables. Variable tracking is not yet implemented, but once it is, that  will allow for automatic detection of variables that are guaranteed to be a certain  value at certain points in the code. For instance,]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1914</id>
	<key><![CDATA[There are 5 main "components" to CommandHelper, each of which is addressed separately below,  and a final section speaks as to how they all integrate with each other. Pictures are good,  right? Here's a picture that shows on a high level how the various components work together.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1915</id>
	<key><![CDATA[Core]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1916</id>
	<key><![CDATA[For a function to exist, it must tag itself with @, and implement .  In most cases, it may extend , and most likely not have to override anything.  Details about what each method expects is covered in source comments. The main method however,  exec is worth discussing. It is passed a ,  an , and an array of s.  At this point, all the Constructs are guaranteed to be atomic values, and if preResolveVariables  returns true (the default) they will not be s either. This means that the function will  only need to be able to deal with the primitive types: integer, double, string (and as a side  effect, %s also, however that will act like an empty string), %s, and arrays. (Very special  cases may have to deal with other data types, but those are primarily optimized out, and in any  case can be handled like strings.) In most cases, the  class provides methods for converting  Constructs into Java primitives, and automatically throwing exceptions should a value be  uncastable to the said type. The code target indicates where in the codebase this function  is occurring in, and should be provided to any exception that is thrown, or can otherwise  be used by some functions. The Environment contains other information about the current execution  environment, which can be freely used inside the function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1917</id>
	<key><![CDATA[Optimization is the final compilation step. There is one step that is required to  finish up the parse tree, which is sort of still a part of compiling, but is in the  optimization stage nonetheless. The "" function is automatically placed  in the tree during compiling, which is what the compiler does to offload infix parsing  to other code, as well as other complicated constructs like .  The __autoconcat__ function isn't a function per se, but it implements Function so  that it can easily be integrated into the rest of the ecosystem. By the time  optimization is done, ALL __autoconcat__ functions will have been converted to something else.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1918</id>
	<key><![CDATA[Git/Github]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1919</id>
	<key><![CDATA[[%s Maven] is a build tool, similar in many aspects to  [%s Apache Ant] or [%s make],  but has several advantages over these other tools, once you know how to use it. It is  geared towards Java projects, which is one reason it is appealing for many bukkit plugins,  as well as its excellent dependency management system. The biggest advantage it has for  CH is that a new dependency can be added to CH, and as long as it is in any public repo,  there is zero extra configuration for you to build it. If you are curious for more details,  the [%s wikipedia article] has some good information  on the subject. A resource that I have found helpful is the  [%s maven model], which shows  many of the possible elements in a pom, which can at first be confusing.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1920</id>
	<key><![CDATA[Optimizing]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1921</id>
	<key><![CDATA[CommandHelper uses git as its version control system, and the code is hosted on github.  To get the source, you can use %sgit clone]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1922</id>
	<key><![CDATA[CommandHelper has grown into quite a large plugin from its humble beginnings as a simple alias plugin.  Due to this, if you desire to contribute to CommandHelper, you may not even know where to begin! This  document will hopefully get you at least pointed in the right direction, though there is no replacement  for digging through the code some yourself. This document is just going over the high level details, and  won't cover anything too specific, and is not aimed at the typical user, though it will not cover  anything too java specific. Also included are sections that cover the testing architecture, and build process.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1923</id>
	<key><![CDATA[You can also think of this as a ''code transformation'', which is the base functionality  of optimization. We want to transform all code into more efficient versions, without the  user having to know or care about these optimizations.  For instance, take the following code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1924</id>
	<key><![CDATA[currently is not optimized, because it is usually unknown what the value of @var  would be, but as you can see, at least at the point that the if statement is  checked, it will in fact always be 1, so we could optimize this to]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1925</id>
	<key><![CDATA[Jenkins]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1926</id>
	<key><![CDATA[The compiler takes the source code it is given, then lexes, parses and optimizes it. Lexing  turns the raw string into tokens, parsing turns the token stream into a tree, and the  optimizer takes out unneeded code paths, and converts optimizable function calls into single  values (such as turning "2 + 2" into 4). Then, it passes the parse tree to the execution  mechanism, which preprocesses the alias files, which stores each alias's execution tree in  memory. The main.ms file is also executed, and if it registers any events, those registrations  are also stored in memory, to be executed when an applicable event occurs. Technically,  this mechanism is part of the Compiler proper, however it is really a separate mechanism,  and could easily be split off from the actual compilation procedure, so in the future, if  the compiled tree were to be saved to disk for instance, this could easily be accomplished  in the future. In addition, because the Abstract Syntax Tree is separate at this point,  much of the battle is done to turning this into a full blown compiler; compiling to some  other platform's native code base (for instance, DCPU).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1927</id>
	<key><![CDATA[The core is what glues everything together. The core knows how to register the plugin with  bukkit and handles the builtin commands. When the plugin starts up initially, it starts in bukkit specific code, which sets the abstraction layer type, as well as hands control off to the more generic core.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1928</id>
	<key><![CDATA[Lexing]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1929</id>
	<key><![CDATA[Mockito]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1930</id>
	<key><![CDATA[Common Failure Reasons]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1931</id>
	<key><![CDATA[The compiler takes the tokens and turns them into a parse tree. So, given the following code,  it will be converted to this parse tree:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1932</id>
	<key><![CDATA[Compiling]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1933</id>
	<key><![CDATA[Build Architecture]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1934</id>
	<key><![CDATA[Optimization is a decent challenge, because you must ensure that any optimization  you do has zero side effects on the code's behavior. One of the simplest ideas  behind optimization though, is to go ahead and run code that can be run at compile time,  assuming it will ALWAYS have the same results, and does not require any external  inputs/outputs, including user input, dynamically linked functionality, or other  environment settings. So, for instance, if you put "1 + 1" in code, we know that  it will ALWAYS be 2, so we can go ahead and "run" that at compile time. This prevents  us from having to recalculate 1 + 1 each time the code is run. A good example of this  being used in practice is when a function takes milliseconds, and several seconds or  minutes are desired. Instead of putting the magic number 300000, a user might type 1000 * 60 * 5,  which is more easily read as "five minutes". However, there should be no performance  penalty for doing this, because 1000 * 60 * 5 is ALWAYS 300000, no matter what other  things the user types in. (Also, 1000 * 60 * @var is always 60000 * @var, so we can  do some optimization even if there is some user input.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1935</id>
	<key><![CDATA[Jenkins is a %sContinuous Integration Server%s, which automatically builds  the project based on the code currently in the github repository. This allows for  quick detection of failures, which also usually leads to quick resolutions. This  also has the benefit of providing a convenient place to download the newest development  versions, without having to compile the code yourself.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1936</id>
	<key><![CDATA[Argument parsing]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1937</id>
	<key><![CDATA[This system is (currently) optional, and by default, functions that extend AbstractFunction are opted out of the system. However, eventually, the mechanism will not be optional, and all functions will be required to implement the system. New code should be implemented to the new standard.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1938</id>
	<key><![CDATA[Using the arguments in execs]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1939</id>
	<key><![CDATA[Some methods may have entirely different signatures, and simply having optional arguments and type unions isn't enough to express the differences. In these cases, using multiple signatures is appropriate. By default, one signature is assumed. Multiple signatures must be distinguishable between each other.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1940</id>
	<key><![CDATA[There are 2 methods to implement in the function to provide support. If a function wishes to provide support for this mechanism, then the returnType and arguments methods should be implemented. By default, AbstractFunction implements these methods and overrides them with default implementations, so functions aren't automatically opted in. The core object in the argument system is the Argument class. An Argument is a descriptor that describes an argument in detail, including its name, its type, and a description of the argument, as well as any other information about the object, such as if it is a vararg, the default parameter, etc. There are various builder methods available to more concisely write out the information.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1941</id>
	<key><![CDATA[Signature validation]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1942</id>
	<key><![CDATA[Despite the no-confliction requirement, there will only be as many signatures as are defined. The signature that is ultimately selected will have all optional values filled in with their defaults if not provided by the user, so the signature selection process is fully opaque to the function. The signature that was matched can be determined by the function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1943</id>
	<key><![CDATA[There are three algorithms here at work. Firstly, determining if a function is allowed to register the given signatures (signature validation), and if not, causing an error at the level of the function definition. Secondly,  at script compile time, determining if the call to the function is correct (compile checks).  Finally, at runtime, we determine which signature was called, fill in the optional parameters with the defaults (if required), and executing the function (argument parsing).  Eventually, the third step will be rolled into compile time where possible.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1944</id>
	<key><![CDATA[There are two levels of validation. First, we have to generate each permutation of each signature that has optional values. Then, we need to compare this against each permutation/top level signature of all the other signatures. When comparing two signatures, we need to consider all of the following:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1945</id>
	<key><![CDATA[Return type]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1946</id>
	<key><![CDATA[Varargs are arguments that convert into an array, but can be passed to the function as an unspecified number of arguments (including no arguments, meaning they are technically optional). Ultimately, the argument type will be an array&lt;?&gt; where ? is the type specified in the argument. The argument will never be %s, though it could be an empty array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1947</id>
	<key><![CDATA[(Not currently implemented)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1948</id>
	<key><![CDATA[Compile checks]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1949</id>
	<key><![CDATA[This situation is however, allowed only if the conflict happens with optional values. If multiple signatures are conflicting, then this is an error with the function definition, and is reported as such. For instance, if the function registers two signatures: f(a) and f(a...), this is an error, and the function is not allowed to register these two signatures.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1950</id>
	<key><![CDATA[Signatures must not overlap. This can unintentially happen when optional arguments (and varargs) are used. Signatures with optional arguments are actually considered as permutations of themselves, so f(a, [b], [c]) actually has 4 permutations: f(a, b, c), f(a, b), f(a, c) and f(a). The number of permutations of a method is n ** n, where n is the number of optional arguments. Some argument combinations can cause some permutations to be ambiguous. This is allowed, however, it can create a situation where the user appears to be able to use a signature with various combinations of arguments, but they are in reality not. Consider the case of f([B b1], [B b2]). There are 4 permutations here: f(), f(B b1), f(B b2), f(B b1, B b2). f(B b1) and f(B b2) cannot be distinguished between each other by types alone, so the user cannot call the function with f(b), as we cannot determine if they mean to call f(b1) or f(b2). f() and f(b, b) are still acceptable. Thus, in this case, we signal to the user that only a call to f(b) is an error. The other, non-ambiguous signatures are allowed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1951</id>
	<key><![CDATA[Generics]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1952</id>
	<key><![CDATA[Accepted arguments]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1953</id>
	<key><![CDATA[Signature matching]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1954</id>
	<key><![CDATA[The next three sections describe the specific algorithms described above.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1955</id>
	<key><![CDATA[Optional parameters]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1956</id>
	<key><![CDATA[Multiple Signatures]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1957</id>
	<key><![CDATA[If the signatures have different number of arguments, we know they do not conflict, and we can continue. If they have the same number of arguments, then we need to consider each argument, one at a time. If any of the arguments have different types, we can continue, as they do not match. However, this is a bit tricky, because each argument must be shown to be disjoint types. If B extends A, the f(B) and f(A) are ambiguous signatures, because calling f(B) could possibly match either type. Thus, each argument is considered to match if either of the arguments in a given position can be cast to the other. (This is more complicated, but the same general principal with type unions.) Note that classes with different generics are considered different types. So array&lt;A&gt; is disjoint with array&lt;B&gt;. However, when using type wildcards, this can get much more complicated, so if B extends A, then array&lt;? extends A&gt; and array&lt;B&gt; are not disjoint.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1958</id>
	<key><![CDATA[Using the arguments in exec]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1959</id>
	<key><![CDATA[At runtime, we again check against the signature list to find the correct signature. Once again, if we cannot find the signature, we throw an error, though this time it is a runtime exception, not a compile error. The only difference is that this time we WILL find the correct signature, because there will be no auto values anymore, only real, runtime values, which are of course always of a concrete type. Once the signature is found, we call the function as normal.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1960</id>
	<key><![CDATA[Optional arguments are arguments that do not need to be specified by the user. Generally, if an argument is not specified, it is an error, but if the argument is marked as optional, the default value (or %s, if one isn't provided) is inserted for the user.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1961</id>
	<key><![CDATA[The ArgumentBuilder class allows for better, and more precise definitions of functions' return types, and arguments. In addition to providing the basis for the compiler's type checking, it also is used by the documentation generators to build the documentation for a function, as well as to allow easier argument parsing by the functions themselves.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1962</id>
	<key><![CDATA[The list of arguments that are accepted by the function is the second part. This list is in general more complex, and instead of returning an Argument, it returns an ArgumentList. The ArgumentBuilder class provides static methods that make building the ArgumentList easier. In general, classes may consider import static'ing the ArgumentBuilder class.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1963</id>
	<key><![CDATA[The returnType function should return a single Argument. Argument requires a name, but in the case of returnType, the name can be left blank, as it is not used. If the Argument is a vararg, this is an error.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1964</id>
	<key><![CDATA[Varargs]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1965</id>
	<key><![CDATA[There are several pieces of functionality provided by the system, and several optional features that certain functions may choose to take advantage of. As a broad overview, the following features are supported: Type safety for functions, and automatic detection and handling of CastExceptions, upward type safety (functions provide their return type), support for varargs, support for functions with multiple signatures, support for functions with generic types (though this is not yet supported by the rest of the system, functions can declare their support, which will be reflected in the documentation,  and it will be phased in in the future), type unions, and support for optional parameters with default.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1966</id>
	<key><![CDATA[General]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1967</id>
	<key><![CDATA[At compile time, checks are done against the user's code to ensure that ensure that the values sent to the functions are of the appropriate type. This validation is considerably easier than the validation of the signatures. Given a function with a certain set of arguments, first, signatures that don't match the correct size are  eliminated. (Not eliminating signatures that have varargs.) Next, each signature is matched one by one, until one is found that matches. If there are none that match, this is a compile error. Compilation is stopped, and the errors are reported to the user. Assuming the validation passes, these results are not used; it is merely meant to rule out the possibility of some errors. Additionally, values of type auto are essentially wildcards. We must assume that they will be of a correct type at runtime. There are still some checks that can be done at compile time, even with only auto values being passed in. Namely, if there are no varargs and there are no signatures that match the argument count given. But by and large, auto values cannot be checked. As long as there is at least one signature that could potentially match, we will allow compilation to continue.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1968</id>
	<key><![CDATA[Type unions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1969</id>
	<key><![CDATA[Arrays stored in variables are references]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1970</id>
	<key><![CDATA[Additionally, there is a shorthand syntax for the no argument array_get:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1971</id>
	<key><![CDATA[Because we are explicitly creating an associative array here, an unlabeled value is essentially pushed on.  1 is pushed onto index 6 because when pushing a value onto an array, the highest integer index + 1 is used as  the insertion point. If no integer indexes exist yet, it is inserted at 0, but if there are only negative indexes,  it is inserted at one above the highest negative index.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1972</id>
	<key><![CDATA[Negative Indices]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1973</id>
	<key><![CDATA[This is useful, because if you realize that you've misordered 3 and 4, you can cut and paste the entire line, and not have to worry about adding or removing a comma. Double commas are not allowed, however.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1974</id>
	<key><![CDATA[Only strings are acceptable for keys. If you use another data type, it is interpreted perhaps differently than you would want,  so note the following conventions:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1975</id>
	<key><![CDATA[arrays will cause a runtime exception to be thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1976</id>
	<key><![CDATA[Arrays are a way to group multiple pieces of data together into one variable. Arrays are created with  the %s function, and can be manipulated with the array_* series of functions.  Arrays also function like a map, or an [%s associative array].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1977</id>
	<key><![CDATA[Trailing Commas]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1978</id>
	<key><![CDATA[Array Creation]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1979</id>
	<key><![CDATA[Associative Arrays]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1980</id>
	<key><![CDATA[Consider the following examples:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1981</id>
	<key><![CDATA[There are two ways to create an associative array. One is to create a completely new array, and the other  is to take an existing array and turn it into an associative array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1982</id>
	<key><![CDATA[Cloning an array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1983</id>
	<key><![CDATA[This creates an array with two values. Note that it is required to put quotes around the key if it contains  spaces. Otherwise, bare strings are acceptable (and usually preferred). To access the values, one would use:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1984</id>
	<key><![CDATA[The other approach is to take an existing array, and set an out-of-order key into it, or a string key.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1985</id>
	<key><![CDATA[@array[subtract(length(@array), @n)]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1986</id>
	<key><![CDATA[In addition, you may use negative indices in either slot.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1987</id>
	<key><![CDATA[Negative indexes don't work the same in an associative array, but that's not to say that negative indexes  don't work at all. If you insert a negative index into the array, it will be available when you select it  with a negative index.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1988</id>
	<key><![CDATA[In all cases, this is exactly equivalent to the following notation:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1989</id>
	<key><![CDATA[Iterating Associative Arrays]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1990</id>
	<key><![CDATA[You can also chain gets:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1991</id>
	<key><![CDATA[If the last index is less than the first index, an empty array is returned]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1992</id>
	<key><![CDATA[The above is exactly identical to:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1993</id>
	<key><![CDATA[If you want to convert an array back to a normal array, you may use the %s  function. This will return a new, non-associative array with the elements in their natural order,  starting with index 0. All information about the keys will be lost however.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1994</id>
	<key><![CDATA[Is the same as]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1995</id>
	<key><![CDATA[Trailing commas are allowed in arrays (and actually all functions, however, this is most useful in arrays). For instance, you can do the following:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1996</id>
	<key><![CDATA[There are also two shortcuts when you want to select from the beginning of the array, or to the end of the array:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1997</id>
	<key><![CDATA[If you use %s on an associative array, it will take the largest integer + 1 in the array to be the next key.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1998</id>
	<key><![CDATA[In addition to the simple case of retrieving a single value from an array, MScript has support for negative indices, and array slices.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>1999</id>
	<key><![CDATA[This works for all data types that implement the [[%s|ArrayAccess]] interface, not just strings.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2000</id>
	<key><![CDATA[Creating an associative array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2001</id>
	<key><![CDATA[If you start to use multi dimensional arrays and associative arrays, this advantage becomes clearer:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2002</id>
	<key><![CDATA[Retrieving values]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2003</id>
	<key><![CDATA[Array Slicing]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2004</id>
	<key><![CDATA[Strings are sort of arrays]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2005</id>
	<key><![CDATA[Arrays can also be used like an associative array. Typically, a simple array is indexed with zero-based,  consecutive integers only. However, in an associative array, you may also use strings to index the array,  or out-of-order integer offsets. Arrays by default operate in normal mode, and once they are switched to  associative mode, certain features (namely negative indexes) will no longer work. Further, once an array is  switched to associative mode, it is not possible to switch them back. Technically, all indexes are stored as strings.  This means that @array[0] and @array['0'] refer to the same thing. If you are familiar with other languages,  this behavior is slightly different.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2006</id>
	<key><![CDATA[To create an array, you use the %s function. Sending no arguments creates an empty array,  or you can also send any number of arguments, and the array will be initialized with those elements.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2007</id>
	<key><![CDATA[It is worth noting that this square bracket notation is just a shortcut to using %sarray_get%s. In fact, the compiler just uses a little magic under the covers to convert the bracket notation into the array_get notation. This means that if you mess up the syntax somehow, you will still get an error for array_get, even if you aren't actually using that function. In all the following examples, this guide will use the bracket notation, though you are free to use whichever method you like.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2008</id>
	<key><![CDATA[There is special syntax to do an array push as well. The following two blocks of code are equivalent.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2009</id>
	<key><![CDATA[In typical fashion, the element %sa%s has an index of 0, and %se%s has an index of 4. These two elements could also be referenced with -5 and -1, respectively. Therefore, when considering indexes, %sarray(0, 1, 2, 3, 4)%s and %sarray(-5, -4, -3, -2, -1)%s are equivalent. Note that when counting with negative indices, -1 refers to the right most element, because -0 and 0 are the same thing. If this is confusing, think of it this way: %s@array[multiply(@n, -1)]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2010</id>
	<key><![CDATA[If you need a distinct copy of an array, you can make one by calling %s with just one parameter, the array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2011</id>
	<key><![CDATA[Note that this is different than the array clone operator, as it only works as an array push when used on the left hand side of an assignment, so %s@array[] = 5%s is an array push operation, and %s@newArray = @array[]%s is an array clone operation.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2012</id>
	<key><![CDATA[Now, the %s function is how you retrieve a value from an existing array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2013</id>
	<key><![CDATA[integers are taken as a string]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2014</id>
	<key><![CDATA[array_push using operators]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2015</id>
	<key><![CDATA[Otherwise, if you don't need the key, you may use the foreach normally.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2016</id>
	<key><![CDATA[true and false are taken as string '1' and '0', respectively.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2017</id>
	<key><![CDATA[Alternatively, to create an empty associative array, you can use %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2018</id>
	<key><![CDATA[Using this method of slicing requires the numbers to be hardcoded in, since this is a language construct.  This makes it impossible to do dynamic slices using this method. Instead, you must use the %s  function if you wish to do this dynamically.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2019</id>
	<key><![CDATA[Strings behave like an array of characters, to an extent. You can access a character in a string as if  the array were an array of characters. Also, slicing works in a string as well, so you can get a substring  easily also. Strings are immutable however, so trying to set a character in a string will not work.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2020</id>
	<key><![CDATA[Alternative syntax exists for %s. See the documentation for more information.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2021</id>
	<key><![CDATA[Once you create an array, you typically store it in a variable for further operations, like so:  %sassign(@array, array())%s. Once you have created an array like this, it is a reference to  the array itself, so if you were to assign it to another variable, and then set the value in that variable,  it will change the original array too. So, this would be the case:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2022</id>
	<key><![CDATA[As stated earlier, some functionality is not available to an associative array. Typically though, if you are  using an associative array, you aren't thinking of it as an ordered set of elements, you are thinking of it  more like an object that has properties. Iterating through all the elements doesn't usually assume any particular  order. This is where the %s function comes in most handy. The elements are sorted according to  their ''natural ordering'', that is, 1 comes before 2, a comes before b, etc, however there may be gaps in the  array, i.e. 0, 1, 4, 5, 10. Therefore looping through the array with %s usually isn't useful. There  is one drawback to using foreach however, if you also need to know the key when iterating through, it isn't possible.  That's where the %s function comes in. This returns a normal array of all the keys in the array.  This array can be iterated against, and then used to pull out the value as well.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2023</id>
	<key><![CDATA[Note that this is a ''deep copy'' operation, which means that the clone is recursive. So arrays within the array are also cloned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2024</id>
	<key><![CDATA[Because in particular this behavior is different, if you aren't sure if an array is associative or not,  you can use the %s function. Array slicing doesn't work either, because you might  in fact have a key with the index "0..1". If you do need to slice an associative array, and you don't care  about the keys, you can use the %sarray_normalize()%s function, and slice that. To copy an  associative array, use the empty bracket notation.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2025</id>
	<key><![CDATA[To make a deep copy of an array, you can use the array clone mechanism.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2026</id>
	<key><![CDATA[You can also get a sub array from an array with array slicing. Using the %s..%s notation, you can specify the range of elements you wish to include in the sub array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2027</id>
	<key><![CDATA[array_set using  (or assign())]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2028</id>
	<key><![CDATA[It is also possible to set the value of an array directly, with %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2029</id>
	<key><![CDATA[Much quicker. The only place this might be slightly confusing is the case of the single parameter %sarray_get()%s. %sarray_get(@array)%s is equivalent to %s@array[]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2030</id>
	<key><![CDATA[One word of warning, the following will not do what you expect:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2031</id>
	<key><![CDATA[is taken as an empty string:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2032</id>
	<key><![CDATA[Complex Retrievals]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2033</id>
	<key><![CDATA[doubles are taken as a string]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2034</id>
	<key><![CDATA[Consider the following array:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2035</id>
	<key><![CDATA[Additions of new items before the iterated item]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2036</id>
	<key><![CDATA[Array iteration is an often overlooked aspect of programming. At first glance, iterating an array and making modifications to it as you are iterating it seems like a trivial operation. However, this is not the case, as several unrelated operations can cause the iteration to cause undefined behavior. MethodScript has some automatic controls to make this operation easier in straightforward cases, while preventing accidental behavior caused by concurrent modification operations. All the specified operations involve the builtin foreach loop; for loops, while, and do/while loops do not support these behaviors, as it is up to the programmer to manage the counter loops in those cases.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2037</id>
	<key><![CDATA[Without the special behavior, these two examples would cause an infinite loop, as the key would constantly be set to the last item in the array. The special behavior prevents newly inserted items from being processed, essentially adding them to a "blacklist" of values to ignore when the iterator gets to that item. The blacklist is automatically managed as the iteration occurs, so that even if those values shift due to future operations, that particular value is still not iterated. The assumption is that newly inserted values have already been "processed" by user code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2038</id>
	<key><![CDATA[Or additionally:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2039</id>
	<key><![CDATA[Associative arrays are handled by "freezing" the keyset as soon as iteration begins, and so insertions and removals do not affect iteration order. As associative arrays are maps, rather than sequential arrays, this does not present an issue while iterating.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2040</id>
	<key><![CDATA[The iterators are globally managed automatically by MethodScript, and nested iterations will not affect this. If an array is being iterated by two different loops at once, all operations will apply to both internal iterators, and each loop will follow the rules as specified below, depending on where in the iteration each loop is. Each loop is otherwise independent of other loops. The array itself is not changed during the iteration by the automatic iteration handling, just the key/value that is assigned during each iteration. Insertions/deletions are handled with the indexes of the array as they currently exist at that particular moment. The key in the foreach isn't adjusted accordingly either, so you must account for this manually, if you perform multiple operations within the iteration, and the key is used multiple times as a reference point.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2041</id>
	<key><![CDATA[To fix this issue, MethodScript tracks the changes in the array, and decreases the counter by 1. This causes the item at index 1 to be iterated "again" which in this case points to an entirely different value. So in reality, this code will remove all the items in the array, without skipping items. The same logic applies to deletion of items before the current index, as the same behavior (shifting items left one) causes the same problems.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2042</id>
	<key><![CDATA[Insertion of new items after the index]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2043</id>
	<key><![CDATA[Also of note, if a continue() is used, this will account for and skip these blacklisted values, including if a number greater than 1 is used.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2044</id>
	<key><![CDATA[Without the special behavior, this would cause an infinite loop, as the key would increment each time, and would cause the 'last value' item to be iterated each time. The special behavior prevents this however, as the assumption is that the newly inserted item has already been "processed" by user code, and so essentially, the counter is increased by 1, making the next iteration bypass the item which is currently the "current" item.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2045</id>
	<key><![CDATA[Let us consider what this code would do without the special behavior provided by MethodScript. @key would start out being 0. We would then remove the 0th element in the array, in this case, 1, which would cause the values to shift to the left 1. The array would then be array(2, 3). The loop would start over, and the key would increment to 1. The next call to array_remove would remove the item at index 1, at this point, now 3. The size of the array would now be greater than the iterator count, and we would exit the loop. But 2 would still be left in the array!]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2046</id>
	<key><![CDATA[The behavior of other languages can be matched by using the following code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2047</id>
	<key><![CDATA[The behavior of the foreach loop covers typical behavior, and will not suite the needs of every case. If the behavior is not acceptable, use of the for loop is preferred, as finer grained control of the looping mechanism can be controlled that way.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2048</id>
	<key><![CDATA[Current item deletion/Deletion of index before current item]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2049</id>
	<key><![CDATA[This simple code demonstrates the problem:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2050</id>
	<key><![CDATA[There are a few cases that have special handling: Current/previous item deletion, insertion of new items before the iterated item, and insertion of new items after the iterated item.  Removal of items after the iterated item, and changes to any values, including the one currently being iterated doesn't have any effect on the iteration order, and therefore won't cause any issues.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2051</id>
	<key><![CDATA[Inside of the class, look for the "examples" function. It may not be present, if not, that's ok, go to the bottom of the class, and add the framework:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2052</id>
	<key><![CDATA[Contributing Examples]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2053</id>
	<key><![CDATA[For real scripts, just make sure that the script compiles and runs. They system will take care of making sure that the output is correct. Once you have completed your examples, (add as many as is necessary) then save the file, and submit a Pull Request (PR). Your example will be reviewed, then added to the code base, and finally the wiki!]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2054</id>
	<key><![CDATA[The examples you see in all the function's detail pages are generated automatically,  in many cases. This ensures that the documentation and how the code ''actually''  works virtually always be consistent, if not working as originally intended.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2055</id>
	<key><![CDATA[If you would like to help add examples to functions, great! Here's a quick primer that will show you the process. You only need to know a tiny bit of java to help. To begin with, find the function in the source. You can find it by starting  [/com/laytonsmith/core/functions here], finding the "class" that the function is in. Click the "Edit" button at the top. You can then looking for the function in the file. It will probably look something like]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2056</id>
	<key><![CDATA[Examples sometimes aren't really possible to show in text, and so in some cases,  output is "faked", but you can tell, because code that is automatically generated]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2057</id>
	<key><![CDATA[and code that has "faked" output]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2058</id>
	<key><![CDATA[{{TakeNote|text=Be sure that if you fake the output, you actually run the exact script first, so that you know exactly what will happen. Don't assume anything!}}]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2059</id>
	<key><![CDATA[There are two versions of the examples. In some examples, it's ok to let the engine generate the output itself, but in others, since it's not actually running in game, it won't work, so we have to fake the output. Use the appropriate version for each. (Examples of both are shown above.) You can figure out which one to use by determining if the function interacts with the game. If so, you need to use the fake example. If the output of the function will always be the same, and doesn't depend on the server actually running, you can use the automatic examples.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2060</id>
	<key><![CDATA[While examples will always be "correct" compared to the results you will actually  see in your code, the handwritten documentation is the de facto standard, and if  there is an inconsistency between the generated output, and the desired output,  the handwritten documentation indicates the designed behavior, and it the actual  implementation will be considered a bug, subject to change as soon as it is fixed.  In other words, don't rely on the behavior of a bugged example, but you can at  least use that as a way to be aware of possible issues.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2061</id>
	<key><![CDATA[An array is a "collection" of other data types.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2062</id>
	<key><![CDATA[A boolean is a true/false value.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2063</id>
	<key><![CDATA[auto]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2064</id>
	<key><![CDATA[TODO: Add inheritance tree image]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2065</id>
	<key><![CDATA[A byte array wraps a native byte array object, to allow for more efficient byte array manipulations, and to allow for translation to external processes that communicate at the lowest level.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2066</id>
	<key><![CDATA[primitive]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2067</id>
	<key><![CDATA[A string is created in code with quotes, either single quotes or double quotes. 'string', for example.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2068</id>
	<key><![CDATA[Inheritance Tree]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2069</id>
	<key><![CDATA[The primitive class defines all data types that can be "typed in" directly into code, so 'string', 5, 3.1415.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2070</id>
	<key><![CDATA[The number class is the super class for all data types that support numeric operations.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2071</id>
	<key><![CDATA[A map is a "dictionary" of string to mixed mappings.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2072</id>
	<key><![CDATA[The auto type isn't a type per se, it works as a bridge between scripting language and compiled language. If a type is marked as auto, casting is not required, and it will attempt to cast to the correct data type at runtime, and only throw an exception then. This is discouraged from normal use, except in the case of receiving user input, or very small one time scripts. Additionally, string constants and numeric constants work as if they are declared as auto. Variables declared as auto are eligible to use the cross-casting system.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2073</id>
	<key><![CDATA[MethodScript has several "built in" types. They work just like user definable types, but it is worth mentioning them specifically, since they form the basis of all objects.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2074</id>
	<key><![CDATA[A double is a floating point number.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2075</id>
	<key><![CDATA[An int is a integral number.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2076</id>
	<key><![CDATA[An Object is the superclass of all user defined types, and is the first type in the hierarchy that requires instantiation with the "new" keyword.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2077</id>
	<key><![CDATA[Object]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2078</id>
	<key><![CDATA[map]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2079</id>
	<key><![CDATA[Mixed is the root of all possible types. It is an interface, which defines a very few methods, which are common to all objects, built in and user defined types.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2080</id>
	<key><![CDATA[For a command to "match" an alias, the following factors are taken into consideration. Any literals must match exactly.  Non-optional variables must be present, but can be anything. Optional variables may be present, but extra arguments will  make the match fail. (Except in the case of a final variable being present.) Let's look at the following two command  signatures:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2081</id>
	<key><![CDATA[The advanced guide covers more of the scripting elements of CommandHelper, and can be used to jump start learning the scripting basics. The API and other concepts are covered in the learning trail, at the bottom of this page.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2082</id>
	<key><![CDATA[however, the best practice method is more guaranteed to work in future versions. For scratch or temporary aliases  however, the less verbose method is acceptable. The rest of the examples in the wiki will generally conform to the best practice method.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2083</id>
	<key><![CDATA[A macro is a series of scripts that are all run at the same time (in order). Each script is ''completely'' separate from  each other, so things like variable declarations and such won't carry over from each macro. If you have a more complex  script, consider using multiline scripts and the %s function. In general, you should use the best practice method of writing scripts, even for simple scripts:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2084</id>
	<key><![CDATA[you would use]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2085</id>
	<key><![CDATA[This corresponds to the same simple script:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2086</id>
	<key><![CDATA[{{TakeNote|text=Macros are not recommended for use, as they become difficult to read if the command becomes more than, just a few lines. See below for alternate syntax to do the same thing with a more programmatic approach.}}]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2087</id>
	<key><![CDATA[Variables]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2088</id>
	<key><![CDATA[In the config file, lines that begin with a %s#%s or %s//%s are comments, and are ignored by the  compiler. This is useful for commenting complex scripts, and being able to add freeform text within the code to show what exactly they do. When the plugin starts, it attempts to compile all the  scripts. If the compilation fails, it will try to give you a useful error message to let you know where the error was in  your script. Commands on the right side must be commands that the player could have simply typed in themselves.  CommandHelper does no permission checking at all before running commands using run(), but simply runs commands as that  user. If a real command is provided by a plugin, that plugin must be installed and working for the command to run  successfully. (Having said that, the built-in functions do provide alot of functionality that is not strictly alias  related). Once you have added a new alias or new scripts, you must use /reloadaliases to refresh the aliases.  If you messed up the syntax, you will get a compiler warning, in which case, you should carefully read the error,  which will give you a line number and file to look at, and see what it is that you messed up.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2089</id>
	<key><![CDATA[Final variables allow you to specify a variable number of arguments be assigned to one variable. There is a special  variable defined for this purpose, "$". This is particularly useful for writing some sort of message alias. Say we want  to create an alias for /tell.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2090</id>
	<key><![CDATA[Built-In Commands]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2091</id>
	<key><![CDATA[Note that we are defining the literal "gold" here. The command will not be intercepted without the user running "/kit gold", simply running "/kit" will not trigger this alias.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2092</id>
	<key><![CDATA[As well as providing alias functionality, there are a few built in commands. These commands provide meta-functionality  for dealing with aliases and other useful features.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2093</id>
	<key><![CDATA[Another common use is to accept the entirety of the user's command into the $ var, and use the %s function to use a more "standard" command line type argument.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2094</id>
	<key><![CDATA[When using global aliases, each alias is defined on it's own line, meaning that a newline separates the aliases from  each other. The exception to this rule is that when using macros, each macro can be on a line of its own, as long as  the previous line ends in a backslash. (Another exception is when you use the "multiline construct", which is covered below.) Global aliases go in the aliases.msa file, located at the root of the CommandHelper folder, and everybody can use them.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2095</id>
	<key><![CDATA[Macros allow you to run several commands with only having typed in one command. One common use may be to create "kits"  for players to use, which spawn several items at once. Here is an example for that:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2096</id>
	<key><![CDATA[Now, in the event the player types "/i 1", $qty would still get assigned 64. The square brackets denote an optional  argument. We could have not assigned anything to the variable %s[$qty]%s, and by default we would have assigned  an empty string. Sometimes this may be useful, but most of the time, you will want to actually assign some sort of value.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2097</id>
	<key><![CDATA[Both of these signatures are ambiguous, because the command "/cmd one two" would match both signatures.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2098</id>
	<key><![CDATA[Only static values can be assigned as default. Function calls or other dynamic code cannot be assigned, however, strings (with or without special symbols) may be assigned using %s[$var='the-string']%s. If literal portions of the alias have special symbols in them, they may also be quoted, for instance:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2099</id>
	<key><![CDATA[The above two commands would not be ambiguous however, because the command "/cmd one two" would only match the second  one.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2100</id>
	<key><![CDATA[What if we want to provide a default value for a variable? We can do that too. Suppose the player by default would  want 64 of an item. We can do that with the following syntax:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2101</id>
	<key><![CDATA[To better understand how to write a script and debug a potential problem, it may be helpful to understand the basics of  how the alias engine works. When the config file is initially parsed, it is checked for compile errors, but no commands  are being run at that time. It is however compiled into an intermediate stage that can more quickly be processed when a  user runs a command. Once a user runs a command, this sequence is followed:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2102</id>
	<key><![CDATA[Note that a user's command is parsed into sections based on spaces but any arguments not specifically captured by variables will be put in the final variable. Another common approach is to trigger an alias based on the first command verb, and ignore the rest of the arguments, whether or not they provided them.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2103</id>
	<key><![CDATA[Fairly simple! Note that we MUST quote this (though using run() is technically optional) because the %s-%s symbol would cause a compile error otherwise.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2104</id>
	<key><![CDATA[Multiline Construct]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2105</id>
	<key><![CDATA[If you need a literal multiline construct, you must break it apart and concatenate it, for instance, instead of using]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2106</id>
	<key><![CDATA[Since complex alias scripts would be hard to read if they were only on one line, the multiline construct allows you to  put as many newlines in the middle of your alias definition as you want. To use the multiline construct, use the following syntax:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2107</id>
	<key><![CDATA[Alias Signatures]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2108</id>
	<key><![CDATA[The command is checked against the signatures of all defined aliases (the left side of the alias) to see if it matches.  It is not possible to have the same signature for two aliases within the config file. If a match is found, any variables are assigned, then filled in on the right side, and functions are resolved, then each command in the macro (possibly only one command) is run.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2109</id>
	<key><![CDATA[In general, macros are not recommended for use. Instead, use the multiline construct and multiple %srun()%s calls. The same code from above can be written as such (using full strict syntax with operators):]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2110</id>
	<key><![CDATA[This gives the player $qty blocks of $data. So, if they typed "/i 1 64" then $data would be assigned 1, and $qty  would be assigned 64. Note that all variables start with a dollar sign ($).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2111</id>
	<key><![CDATA[Macros]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2112</id>
	<key><![CDATA[Final Variable]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2113</id>
	<key><![CDATA[A simple alias maps one command to another. For example, in the vanilla server, there is the command /save-all,  which for brevity sake, we may want to shorten to /save. The alias for this command would be:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2114</id>
	<key><![CDATA[There is no runtime penalty for doing this concatenation, the compiler is smart enough to figure out what you mean at compile time, but since these symbols are part of the lexer, they cannot be used normally in any other context.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2115</id>
	<key><![CDATA[and macros are specified as such:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2116</id>
	<key><![CDATA[In general, an alias is specified as such:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2117</id>
	<key><![CDATA[The special symbols &gt;&gt;&gt; and &lt;&lt;&lt; are the "multiline start" and "multiline end" symbols. They may not appear in any other  context throughout your script (even in strings). Newlines inside the construct are simply ignored, and do not denote  the end of the alias. The multiline end symbol does not have to be on a line of it's own, but the multiline start symbol  must come directly after the equals sign.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2118</id>
	<key><![CDATA[/recompile - Reloads the global alias file, while the game is running (ops only) [[%s|(See the advanced page for usage options)]]. /reloadaliases is an alias to this command.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2119</id>
	<key><![CDATA[The %splayer()%s is a function. Using all the functions is a more advanced feature, but the player() function  is fairly simple; all it does is give you the name of the player issuing the command. So, specifically,  "/give player() golden_shovel" would be turned into "/give playerName golden_shovel".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2120</id>
	<key><![CDATA[The advantage of this is that the code is easier to read, and details like variable assignments work as expected.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2121</id>
	<key><![CDATA[This page assumes you have already installed and are running CommandHelper. Note that the instructions here are designed  for the master alias file, but in general will work for LocalPackages as well.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2122</id>
	<key><![CDATA[Sometimes we want to use the input provided by the user to put into our aliased command. For instance, if we wanted to  shorten a /give command, we could do this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2123</id>
	<key><![CDATA[/runalias - Certain configurable plugins might not use the standard method to call commands, so you would get "Unknown Command." for commands that otherwise work when entered normally. Instead use "/runalias /myalias".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2124</id>
	<key><![CDATA[Simple Aliases]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2125</id>
	<key><![CDATA[closures]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2126</id>
	<key><![CDATA[and %s can both be "combined" and use a typical if-else if-else chain:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2127</id>
	<key><![CDATA[are all valid examples.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2128</id>
	<key><![CDATA[for/foreach]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2129</id>
	<key><![CDATA[procedures]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2130</id>
	<key><![CDATA[foreachelse/forelse can also be used as such:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2131</id>
	<key><![CDATA[In MethodScript, just about everything is a function. In many cases, this makes the language easier to learn, and in small, self contained examples, it often makes the code easier to read: if(condition, do this, do that) for instance is perfectly valid code, and it's reasonably easy to learn. However, this can lead to ''unreadable'' code in large sections of code. Due to this, a C-inspired brace syntax is also available for some "functions", which should increase the readability of your code. In most all cases, using brace syntax is highly preferred over functional syntax, and thus should almost always be used.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2132</id>
	<key><![CDATA[API Additions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2133</id>
	<key><![CDATA[[[%s|Arrays]] are much more flexible now]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2134</id>
	<key><![CDATA[Boss bar management]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2135</id>
	<key><![CDATA[Added case-sensitive option to make it possible to toggle command matching being case sensitive or not]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2136</id>
	<key><![CDATA[Added "verify" command to [[%s|cmdline tools]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2137</id>
	<key><![CDATA[Switch statements. Rewrite large chains of if/else if into the better looking switch statement.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2138</id>
	<key><![CDATA[Your persistance database is in the wrong format. Unlike previous versions, you do not need to delete the database, you simply need to upgrade it. (Unless you're upgrading from before 3.2.0, in which case you still do need to delete the persistance.ser file, and then you're set.) If you have not used user aliases or persistance in the past, this step is unnecessary. Rename/copy/symlink your bukkit jar to bukkit.jar for this to work. From a command prompt, change to the plugins directory and run %sjava -jar CommandHelper.jar --manager%s. This will launch the Data Manager, at which point you can run the upgrade command. Once this is complete, your data is now converted to the new format! Do not run the data manager while your server is up. In lieu of this, you may also simply delete your persistance.ser file, in which case all data will be lost, but it will re-create the db in the correct format in the future, without any interaction from you. Be sure to check out the other features in the data manager while you're there!]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2139</id>
	<key><![CDATA[Closures were added. Many methods require a closure, but you can use closures in custom code as well.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2140</id>
	<key><![CDATA[0b1111]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2141</id>
	<key><![CDATA[Updated for Bukkit.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2142</id>
	<key><![CDATA[Email support. Easily send an email from your scripts with the %s function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2143</id>
	<key><![CDATA[Significantly improved startup and compile times]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2144</id>
	<key><![CDATA[New "synchronized" keyword and functionality]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2145</id>
	<key><![CDATA[Brace Syntax. Use braces in more places: if(@condition){ }, for instance. Makes your code much easier to read.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2146</id>
	<key><![CDATA[MSLP files. Use the MSLP maker cmdline tool to distribute your code in a single file.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2147</id>
	<key><![CDATA[Byte Arrays. Manage bits and bytes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2148</id>
	<key><![CDATA[76 events were added.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2149</id>
	<key><![CDATA[function_exists/event_exists/compile_error. Using these special functions, make your code work with different versions of MethodScript.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2150</id>
	<key><![CDATA[Shell functions. Run other executables on the system.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2151</id>
	<key><![CDATA[Added "new" command to cmdline tools]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2152</id>
	<key><![CDATA[Player's pitch and yaw (the way they're facing) is preserved when using set_ploc]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2153</id>
	<key><![CDATA[Adds support for Minecraft 1.9 - 1.12.2]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2154</id>
	<key><![CDATA[Persistence Network. Store your data in lots of different formats, not just the built in serialization format.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2155</id>
	<key><![CDATA[10 new events have been added.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2156</id>
	<key><![CDATA[Added $$ mode in cmdline]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2157</id>
	<key><![CDATA[New Feature Overview]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2158</id>
	<key><![CDATA[Extensions. Not officially supported yet, but generally quite useful. Add your own functions, or get extensions from other people to extend MethodScript.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2159</id>
	<key><![CDATA[Added [[%s|interpreter mode]]!]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2160</id>
	<key><![CDATA[Script optimization. Many backend changes have been made to make your scripts run even faster, with no effort on your part]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2161</id>
	<key><![CDATA[Added several new functions, including a foreach loop, and the g function. See the [[%s|upgrade notices]] for information about upgrading your scripts from 3.0.0 to 3.0.1.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2162</id>
	<key><![CDATA[PN Viewer UI. View your data using a GUI, instead of messing around with command line stuff. Connect to a remote server even, so you can run the GUI on your desktop, and manage your headless server.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2163</id>
	<key><![CDATA[Event API Additions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2164</id>
	<key><![CDATA[Events added - Events are now here! Read up on the [[%s|Events overview]] for basic information relating to all events, and check out the [[%s|Event API]] for details on specific events, as well as what events are available. This list will continue to grow as more events are added!]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2165</id>
	<key><![CDATA[3.3.0 is a massive update that contains a huge number of new features. There are a few things that are incompatible with the previous version, so you should carefully read this release notice before upgrading. If you are starting from scratch, there are (of course) no incompatibilities.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2166</id>
	<key><![CDATA[More defined data types, in addition to casting and converting functions - Data types were loosely defined before. Now the definition is well defined, and there are functions to help you manipulate this data.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2167</id>
	<key><![CDATA[and %s take different formatted arguments. Check the API for the new usage.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2168</id>
	<key><![CDATA[substr() now works properly if the last argument is left off]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2169</id>
	<key><![CDATA[Completly reworked the engine. Essentially a new plugin.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2170</id>
	<key><![CDATA[Added include and procedures. See [[%s|this page]] for more details.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2171</id>
	<key><![CDATA[Well definied array iteration. When adding and removing values while iterating arrays in foreach, they do what you want in more cases.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2172</id>
	<key><![CDATA[In addition, you can give multiple groups permission, in one go, like this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2173</id>
	<key><![CDATA[Removal of PermGen requirements. No longer will you need to edit your PermGen settings, a new backend is now in use.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2174</id>
	<key><![CDATA[Fixed a bug where no argument functions in the root of the command would give a compile error.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2175</id>
	<key><![CDATA[The compiler for the scripting language has been broken out of the CommandHelper core. The language itself is now called MScript, and CommandHelper simply hooks into MScript to generate commands to run. This allows me to more easily add other events in the future. Also, in future versions, I will make it so that other plugin authors can hook into MScript to allow their plugins to run MScripts, so that plugin authors can give users more control over the plugin, when applicable. Let's look at the structure of an alias again:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2176</id>
	<key><![CDATA[You can now define the name/location of your config file. In the preferences.txt file, the script-name property defines this value.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2177</id>
	<key><![CDATA[scriptas and has_permission - scriptas() allows you to run scripts as another player, similarly to how you can run a command as another player with runas(). has_permission() allows you to dynamically check to see if a player has an arbitrary permission or not.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2178</id>
	<key><![CDATA[Here's a full list of all the new functions. Check out the API for details on each:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2179</id>
	<key><![CDATA[New ||| and &&& syntax for new %s and %s functions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2180</id>
	<key><![CDATA[bitwise operations - binary operations! Check the API page for details.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2181</id>
	<key><![CDATA[Abstraction layer - While you won't see this directly, know that it's much easier to move CH from server type to server type, should bukkit or whatever other server mod become obsolete. This means that CH should live on past server mods, with your scripts safe from the changes!]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2182</id>
	<key><![CDATA[Compiler re-organized and modified. The g() function is no longer necessary, but is still defined, so scripts will remain backwards compatible. Also, scripts with compiler errors will most likely only break the individual command that has the error, the entire script will no longer fail. Of course if the compiler can't determine where the end of the command is (for instance a missing multiline end symbol) more of the script will fail. The sconcat() function is no longer necessary. Let's look at the following code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2183</id>
	<key><![CDATA[3.3.1 is a culmination of almost 4 years of work. There are hundreds of new functions, and tons of bugfixes and new functionality.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2184</id>
	<key><![CDATA[World time controls - Control the time in a world with the new world time functions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2185</id>
	<key><![CDATA[MethodScript Additions:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2186</id>
	<key><![CDATA[0b and 0x. Write hex and binary numbers directly in code. 0xF]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2187</id>
	<key><![CDATA[msg() and all other applicable Echoes functions now handle newlines and linebreaks properly. Besides being able to use a \n character to mean a newline character, word wrapping now occurs at word boundaries instead of arbitrarily. Thanks to Reil for the code to do that! Also, if a file is read in with read(), and it has newlines in it, newline characters are passed through to the other functions properly.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2188</id>
	<key><![CDATA[The portions of an alias that are actually part of the MScript language are shown. All other parts are simply identifiers for CommandHelper specifically. While there is still a great deal of integration with the alias engine, the MScript portions can now be used standalone in future applications.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2189</id>
	<key><![CDATA[// is a line comment. Use the traditional C-style line comment in your code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2190</id>
	<key><![CDATA[When using an ivar as the second parameter in assign(), it works properly now.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2191</id>
	<key><![CDATA[Fully supported try/catch blocks. Catch multiple exception types and do different things for each. Finally clauses also supported.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2192</id>
	<key><![CDATA[Added several new functions, including eval, set_ploc, time, nano_time, break, continue, get_worlds, pworld, pinfo, and kick. Also, reorganized the source code, and made it so that if one command would cause a compiler error, the entire script won't be affected, but just the one command. Also, concatenation automatically happens now, the g() function is no longer necessary. Debug mode now outputs what real command is being run, if debug mode is on. It is now possible to define the location of your config file, in the preferences.txt file. See the [[%s|upgrade notices]] for information about upgrading your scripts from 3.0.2 to 3.1.0.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2193</id>
	<key><![CDATA[Sign api - Change the text of signs with functions! This function allows you to colorize the text on the sign as well, when used in combination with the color() function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2194</id>
	<key><![CDATA[CommandHelper and Minecraft Additions:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2195</id>
	<key><![CDATA[Namespaces in persistance, and improved performance in persistance - Persistance is now much more efficient. In addition, namespace support has been implemented. If you namespace your data using periods, you can much more easily manipulate the data that has been stored. Be sure to re-read the API in the Persistance section, as all the functions have new features now.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2196</id>
	<key><![CDATA[More inventory controls - Previous versions had pinv and set_pinv, and that was all the control you needed to do whatever you like, but it is unwieldy, and complicated to use. These functions arguments have changed as well, but you can now use a few other functions to more easily do things: phas_item, pitem_slot, pgive_item, ptake_item. Check out the API for more information for each of these functions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2197</id>
	<key><![CDATA[Debug mode now outputs what real command is being run, if debug mode is set to true]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2198</id>
	<key><![CDATA[Enchantment api - You can now control enchantments in a player's inventory]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2199</id>
	<key><![CDATA[In previous versions, you had to group the "if" and "else" portions seperately, in this case, you would likely have used sconcat() though g() would have worked. Now, the commas separate the arguments, with tokens between commas automatically being sconcatenated together.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2200</id>
	<key><![CDATA[Smart Strings. Variable interpolation in strings quoted with double quotes, "@likeThis".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2201</id>
	<key><![CDATA[Further, you can ''revoke'' permissions by putting a dash in front, like so:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2202</id>
	<key><![CDATA[API additions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2203</id>
	<key><![CDATA[eval() functions are now available. As implied, eval() allows arbitrary MScript to be executed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2204</id>
	<key><![CDATA[Basic crypto functions - If you need to hash things, this is now possible.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2205</id>
	<key><![CDATA[comments work even if they aren't the first character on the line. C style block comments are also available.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2206</id>
	<key><![CDATA[New website and documentation [[%s|deployment tool]] for methodscript.com]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2207</id>
	<key><![CDATA[New "notinstanceof" keyword]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2208</id>
	<key><![CDATA[Operators. Instead of using add(2, 2), use 2 + 2.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2209</id>
	<key><![CDATA[Permissions handling just got easier. In addition to being able to label a command, and giving that group/user permission to commandhelper.alias.label, you can give groups permissions to certain commands by doing:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2210</id>
	<key><![CDATA[read() and include() are subject to the base-dir restriction now]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2211</id>
	<key><![CDATA[The \u escape sequence is implemented in the lexer. This allows insertion of arbitrary unicode characters into scripts.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2212</id>
	<key><![CDATA[Local Packages. Group your code into logical batches.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2213</id>
	<key><![CDATA[Added exception handling, and fixed more bugs with command matching and  optional variables. Also added more advanced permission syntax for commands.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2214</id>
	<key><![CDATA[Note that permissions take priority from left to right. So, say that a user is in the 'mods' and 'builder' groups. If the setup were in this order: ~mods/-builder, then the user would have permission, but if it were ~-builder/mods, they would not. If the user is not in one of the listed groups, that group name is ignored.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2215</id>
	<key><![CDATA[Updated to work again.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2216</id>
	<key><![CDATA[Colors work in the terminal now. The exception is if you're on a windows machine, in which case, no colors for you :( sorry. Also, CH has a cool new splash screen (you can disable it in the preferences).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2217</id>
	<key><![CDATA[play-dirty mode is currently broken due to the new event system implementation. This will be fixed at a later date, but you may not need it any more, since plugins have all been updated now.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2218</id>
	<key><![CDATA[[[%s|File Options]] file headers and initial [[%s|Strict Mode]] support]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2219</id>
	<key><![CDATA[Fixed a bug when dealing with offline players in pinfo (as well as a few other functions)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2220</id>
	<key><![CDATA[Secure strings added]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2221</id>
	<key><![CDATA[include/read now require paths that are relative to the location of the current file. This should be an easy fix.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2222</id>
	<key><![CDATA[More math functions - Just about every math operation you could need is now implemented. Be sure to also check out the very cool expr() function, which should simplify complicated math formulas.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2223</id>
	<key><![CDATA[Update Breakages]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2224</id>
	<key><![CDATA[HTTP functions. Connect to a website, and download information from the web, then use it in your application. Allows for SOAP, REST and other web based connections]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2225</id>
	<key><![CDATA[data_name (reverse data_values)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2226</id>
	<key><![CDATA[407 new functions have been added:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2227</id>
	<key><![CDATA[Virtual inventories]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2228</id>
	<key><![CDATA[Commands can be run from the console. If the command doesn't make sense to run without a player, the command should fail gracefully.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2229</id>
	<key><![CDATA[Arrays are associative - Now you can store a value in an array not only with a numeric index, but you can also use strings! Many functions now use this feature, since it's much easier to read and use, but you need to be familiar with the changes for them to make sense. Check out the additional section in the wiki page [[%s|on arrays]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2230</id>
	<key><![CDATA[The WG/WE series of functions are implemented now]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2231</id>
	<key><![CDATA[Basic entity control - You can now control entity health and tame wolves. This is just the first phase of more complex entity controls.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2232</id>
	<key><![CDATA[New feature overview]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2233</id>
	<key><![CDATA[ifelse and switch - Now it is much easier to chain if statements. Check out the [[%s|wiki page on logic]] for more information.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2234</id>
	<key><![CDATA[Added functions: set_display_name, reset_display_name, try, array_index_exists, is_array, is_boolean, is_double, is_integer, is_%s, is_string, substr, to_lower, to_upper, length, throw]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2235</id>
	<key><![CDATA[76 new functions have been added.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2236</id>
	<key><![CDATA[Type hinting. Make sure your variables pick a type and stick with it. Type hinting is now implemented, and will eventually be upgraded into strong typing. int @int = 'not an int'; is now an error.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2237</id>
	<key><![CDATA[while/dowhile loops. Some loops can be more easily written using these mechanism.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2238</id>
	<key><![CDATA[Potion Effects can now be accessed with set_peffect. See [%s the guide] on the minecraft wiki for ID numbers and other information]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2239</id>
	<key><![CDATA[Added new functions to allow scripts to interact with the environment around the player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2240</id>
	<key><![CDATA[is_* (%s, %s, etc) functions are slightly altered. Most people weren't using these functions, but if you were, you will want to check the API for information on the changes to this function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2241</id>
	<key><![CDATA[Developed over two and a half years, CommandHelper 3.3.2 compatibility stretches from Minecraft 1.7.10 to 1.12.2, and offers many new features, fixes, and optimizations.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2242</id>
	<key><![CDATA[Added user defined procedures]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2243</id>
	<key><![CDATA[Event API additions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2244</id>
	<key><![CDATA[Cmdline. Like MethodScript? Use it anywhere! Run scripts from the command line, and do some neat cmdline only things.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2245</id>
	<key><![CDATA[Checking that you are passing the correct number of arguments to a function is now done at compile time. This will potentially help reduce the numbers of errors in a script.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2246</id>
	<key><![CDATA[Added functions: sqrt, include, proc, return, pinv, set_pinv, min, max, is_proc, call_proc, pexp/set_pexp (experimental), ptexp/set_ptexp (experimental), plevel/set_plevel (experimental), pmode/set_pmode, set_peffect (requires CraftBukkit), array_resize, range, Economy Functions, call_alias, item_drop, set_phealth, equals_ic, sk_all_regions, sk_pos1, sk_pos2, sk_region_info, sk_region_overlaps]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2247</id>
	<key><![CDATA[SQL. Connect to MySQL, SQLite, and PostgreSQL databases.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2248</id>
	<key><![CDATA[creature_spawn, block_grow, food_level_changed, world_save, entity_interact, block_dispense, entity_change_block, item_despawn,  inventory_click, vehicle_move, block_break, exp_change, note_play, shutdown, cmdline_prompt_input, player_interact_at_entity,  player_leave_bed, block_ignite, world_load, item_pre_enchant, entity_death, item_enchant, world_unload, projectile_hit, item_held,  player_quit, player_move, item_drop, tree_grow, weather_change, entity_damage_player, entity_damage, block_place, world_changed,  player_toggle_sneak, projectile_launch, player_fish, server_ping, entity_explode, player_prelogin, inventory_close, lightning_strike,  player_teleport, redstone_changed, inventory_drag, target_player, player_enter_bed, item_pickup, player_interact_entity, block_burn,  vehicle_leave, vehicle_collide, thunder_change, gamemode_change, async_player_chat, item_pre_craft, piston_retract,  player_toggle_flight, tab_complete_chat, pressure_plate_activated, inventory_open, player_login, vehicle_enter, player_command,  player_consume, player_kick, tab_complete_command, sign_changed, piston_extend, entity_enter_portal, player_portal_travel,  player_toggle_sprint, item_spawn, hanging_break, book_edited, and plugin_message_received]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2249</id>
	<key><![CDATA[Typing. typeof() instanceof() and other methods have been added to allow you to more easily manage your data types.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2250</id>
	<key><![CDATA[Code Profiler. Profile your code, to find where the slow spots are.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2251</id>
	<key><![CDATA[OAuth support]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2252</id>
	<key><![CDATA[Better international language support for variable and procedure names]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2253</id>
	<key><![CDATA[Extensions that worked previously can now only work with the latest builds. All extensions will need to be updated.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2254</id>
	<key><![CDATA[import/export - Import and export work like the persistance functions, except they are in-memory only, and won't survive past server restarts (or /reloadaliases, for that matter). There are two modes of operation, so read the API carefully if you use these functions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2255</id>
	<key><![CDATA[block_from_to, block_fade, entity_toggle_glide, firework_explode, entity_regain_health, entity_portal_travel, item_swap, server_command, broadcast_message, and vehicle_destroy]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2256</id>
	<key><![CDATA[Data Manager - You can now view the persistance data much easier, thanks to the data manager. Be sure to explore all the options. Read up on it at the [[%s|page on the data manager]].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2257</id>
	<key><![CDATA[When we think about the %s function, we then realize that it's much like a closure. When we define the procedure, nothing is run at that time. And in fact, internally, it does create a type of closure. Procs are slightly special though, because they do not save environment information (at least variable scope). Let's observe the more complicated case with an if statement:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2258</id>
	<key><![CDATA[So, why is that? That's because the code in the if function is ''lazily'' evaluated. That is to say, it's not evaluated until it is determined that it is needed. Other functions do this too, some for optimization reasons, others, because it's just the nature of the function. For instance, %sfor()%s does as well. In most cases, the "special" functions, (functions that have a language construct dedicated to them in other languages) implement closures. Some functions, such as %sand%s also are lazily evaluated, for performance reasons. Consider the case: %sand(false, true, true, true, ....lots of trues)%s. If we evaluate from left to right (which we do), after we determine that the first argument evaluates to false, we know for a fact that the %sand%s will return false, regardless of what the rest of the arguments return. Same with %sor%s and true values: %sor(true, false, false, false)%s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2259</id>
	<key><![CDATA[This is because when we execute the closure, the values have already been bound, and can no longer be changed, as the closure sees it. This doesn't mean that something can't pass in extra values though, that's where the extra arguments come from. Let's modify the previous example some.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2260</id>
	<key><![CDATA[The most common usage that you will find is likely when you use a built in function that requires use of a closure. You may also use them in a library project, where you are wanting to create a callback of some sort, or as a way to abstract up a loop, for instance.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2261</id>
	<key><![CDATA[Explanation]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2262</id>
	<key><![CDATA[This is because arrays are passed by reference, not by value, and it's simply the reference that is getting copied into the closure's @array variable. So, if inside the closure, we change the values pointed at by the reference, those changes are visible from outside the closure. However, in the second example, we're changing the reference to the array, and simply putting something else inside of it. This doesn't affect the outside code having a reference to the array though, it still is pointing to the same empty array it created earlier.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2263</id>
	<key><![CDATA[So, you may ask yourself, what's the difference between this and a proc, other than the name is missing? A huge difference. With a proc, all variables go out of scope, other than what you pass in. With closures, everything that was in scope remains in scope. The only thing that may get overridden is if you named a variable that is passed in, and in addition, the meta scope values, such as the current player also remain in scope.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2264</id>
	<key><![CDATA[Closures can be serialized too! They get output as a basic string, however, so it's important to note the advantages/disadvantages of this. When they get serialized, they completely loose their scope. They become a standalone string. If you output the string, it may not look precisely like it did when you put it in either, in fact it will have sconcats added, and be minified, however, the guarantee is that it is functionally equivalent. However, do note that if you import/export the closure, the scope will remain, it is only if you move the closure outside of CH that it will lose it's scope (for instance, with store_value/get_value). If the closure is to-string'd, you will have to use eval() on it, instead of execute, and if previously it had accepted values, you'll have to manually assign them yourself. They are not meant for out of memory storage, and so they do not support that very well, however, it is important to note what their behavior would be if you attempt to serialize them.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2265</id>
	<key><![CDATA[In the first example with procs, we get an empty message. With the second example, we get msg'd "variable", because @a remained in scope when we executed the closure.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2266</id>
	<key><![CDATA[As you can see, we are able to change the environment at execution time if we put a little more thought into it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2267</id>
	<key><![CDATA[Any values returned from the closure are returned by %sexecute%s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2268</id>
	<key><![CDATA[If you define more parameters than are passed in, they take the default values that are assigned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2269</id>
	<key><![CDATA[execute()]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2270</id>
	<key><![CDATA[Using the %s and %s functions allows you to harness the power of closures yourself, however you wish.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2271</id>
	<key><![CDATA[An iclosure is the same thing as a closure, except the variable scope is different. The variable scope works like a procedure; no variables from the parent scope are retained. An iclosure with no arguments passed to it, then, has no variables in scope (other than @arguments). This is useful as an optimization technique, when you have a closure in a large program, it has to copy all the references of all the currently in scope variables. If all the values you need are going to be passed into the closure, there's no point in doing all that copying. Instead, you can just use an iclosure, thus possibly reducing your memory footprint. An iclosure is identical to closures in all other ways, and they can be used in any case that a closure is required.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2272</id>
	<key><![CDATA[closure()]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2273</id>
	<key><![CDATA[Combined Usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2274</id>
	<key><![CDATA[The signature of the %sclosure%s function looks quite similar to %sproc%s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2275</id>
	<key><![CDATA[We also have access to variables that are passed in, if we named them:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2276</id>
	<key><![CDATA[Also, note that the code inside the closure has access to the special variable @arguments, which is an array containing all the arguments passed to the closure.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2277</id>
	<key><![CDATA[The vars passed in must be ivars, but much like procs, you may %sassign%s default values to them.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2278</id>
	<key><![CDATA[The if function internally implements closures, transparently to you. Let's take a look at some code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2279</id>
	<key><![CDATA[Also, we can implement vararg functionality with the special @arguments variable:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2280</id>
	<key><![CDATA[So, what is a closure? You can [%s read the wikipedia article] if you wish, but it's fairly complex. So, instead, we'll discuss something that you probably are already familiar with; the %sif()%s function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2281</id>
	<key><![CDATA[The closure function actually returns a special data type, a '''closure'''. This data type has all the same qualities of other data types, that is, it can be stored in a variable, passed around to procedures, returned, imported/exported, persisted. It's very much like an anonymous procedure, and in fact has nearly the same signature as the %sproc%s function, minus the name. That's because you essentially give it a name when you store it somewhere, for instance in a variable.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2282</id>
	<key><![CDATA[Execute is used as follows:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2283</id>
	<key><![CDATA[However, in the case of the %sarray()%s, this has to be ''hastily'' evaluated, that is, we need to know how ALL the arguments are going to resolve, before we send them to the array function itself. So if we break it down, with %sif%s, we are sending ''code'' to the function, and with %sarray%s we are sending ''values'' to the function. When we are sending ''code'' to a function, as an executable set of instructions, we say we have created a '''closure'''.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2284</id>
	<key><![CDATA[Recall the example above:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2285</id>
	<key><![CDATA[Values may also be returned from the closure, using %s:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2286</id>
	<key><![CDATA[Another important point to make here is to remind you that arrays are passed by reference, so the following is possible:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2287</id>
	<key><![CDATA[Common usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2288</id>
	<key><![CDATA[Assigning a variable inside of a closure will not affect the external variable table however, so this code will function as follows:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2289</id>
	<key><![CDATA[Serialization of closures]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2290</id>
	<key><![CDATA[Now, it is important to note that the scope is frozen at closure bind time, NOT at execution time, so the following will happen:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2291</id>
	<key><![CDATA[If you notice, this code will only message you "Hello World", it will not message the other code. However this will message you twice:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2292</id>
	<key><![CDATA[Using closures]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2293</id>
	<key><![CDATA[This will send us a blank message, because @a is not ''in scope'' inside of the proc. This makes it not a true closure, by the technical definition, but it's pretty close. The difference is that the '''environment''' is not stored along with the code. A mscript closure uses this concept, but also adds an extra feature, the ability to pass in extra environment information upon actual execution of the code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2294</id>
	<key><![CDATA[The values may be any value, but the closure must be a closure created with the closure function. A small, self contained example then:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2295</id>
	<key><![CDATA[Scope]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2296</id>
	<key><![CDATA[A closure is a block of code that is treated as ''code'', not as a ''result'' of code. Closures are actually used quite frequently in your code already, and you just aren't aware, however, with the closure architecture, you yourself can harness the power of a closure, and in fact they are required to be used in many of the newer, more powerful functions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2297</id>
	<key><![CDATA[If we rewrite this with closures, we can see the difference:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2298</id>
	<key><![CDATA[iclosures]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2299</id>
	<key><![CDATA[This works, and messages "variable" like we would expect. However, the following does not work the same:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2300</id>
	<key><![CDATA[Tool listing]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2301</id>
	<key><![CDATA[Linux]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2302</id>
	<key><![CDATA[First, open a command prompt. Hit WindowsKey+R, type "cmd" in the box, then hit  enter. A black box should appear. %scd%s to the directory your plugins are in, for instance, if your server was located at %sC:\Server\%s then you would run %scd C:\Server\plugins%s. Type %sdir%s to verify the name of the CommandHelper jar. This may be different depending on what you named it, but you'll use whatever it's named in place of %sCommandHelper.jar%s. Skip ahead to the next section.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2303</id>
	<key><![CDATA[Run %sjava -jar CommandHelper.jar%s from your prompt. You will see the help listing. Each tool is it's own "verb". The syntax for running a particular tool is %sjava -jar CommandHelper.jar &lt;verb&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2304</id>
	<key><![CDATA[CommandHelper has a rich set of command line tools for various tasks. To use the command line tools, run]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2305</id>
	<key><![CDATA[Step 2]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2306</id>
	<key><![CDATA[Open a terminal. Depending on your linux distribution, this will be different, but the program is likely called "Terminal". Change to the directory your plugins are in. For instance, if your server was located at %s/server/%s then you would run %scd /server/plugins/%s. Run %sls%s to verify the name of the  CommandHelper jar. This may be different depending on what you named it, but you'll use whatever it's named in place of %sCommandHelper.jar%s. Skip ahead to the next section]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2307</id>
	<key><![CDATA[Explain Like I'm 5]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2308</id>
	<key><![CDATA[See the section below that shows the help listing for more details about each tool.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2309</id>
	<key><![CDATA[Run the command:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2310</id>
	<key><![CDATA[This will install MethodScript to your system, as a globally accessible interpreter. To uninstall, run:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2311</id>
	<key><![CDATA[To use the cmdline tools, there are three methods. First, the cmdline interpreter can be accessed by simply running  %smscript%s. This simply runs the command line interpreter, which is in fact the engine for all the other  methods. The second method is to use %smscript %s. This executes the file, assuming it is a valid  pure mscript file.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2312</id>
	<key><![CDATA[The main difference between MethodScript being run from CH scripts and running on your system is that Minecraft specific  functions will not work. All other functions will work, or at least attempt to work just the same. To facilitate  commandline usage, a few extra features have been added, namely the sys_out, sys_err, and exit functions. These  functions will not be quite as useful in game, but will still work to some extent. Additionally, command line parameters  can be sent to your script, and those are placed into the @arguments variable, which is defined before your script runs,  as an array, as well as the $ vars, which will be populated from $1 - $[x] where the number is the position of the  variable on the command line. $, the final var, is also defined, and it contains all the arguments passed in,  concatenated together. $0 is a specially defined variable, and is the same as Bash's $0 variable, which is the path that  this script was executed with. Due to its less often usage, it is excluded from @arguments and $.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2313</id>
	<key><![CDATA[Many of the features MethodScript offers are valid to be used from the command line. As more and more features are  added, the potential for MethodScript to be a scripting language used throughout your system, even for non-minecraft  related things, increases. To this end, MethodScript now has all the basic capabilities needed to write scripts from the  command line.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2314</id>
	<key><![CDATA[Please note that while probably already massively useful, this is an work in progress feature, and may have plenty of  bugs, and is not intended for widespread adoption yet, though is being officially supported.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2315</id>
	<key><![CDATA[This currently only works on unix systems, but Windows will be supported eventually.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2316</id>
	<key><![CDATA[Finally, you may execute a MethodScript file on unix systems by executing it directly. To do so, be sure to put  %s#!/usr/bin/env /usr/local/bin/mscript%s at the top of your file, then set the file's execution bit,  using %schmod +x %s. Then, you may simply run %s./script.ms%s (assuming the filename is  script.ms). Using the cmdline tool "new" you can create a blank file with the file set up correctly.  [[%s|See this page]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2317</id>
	<key><![CDATA[All functions work basically the same, minor differences may exist, but they are noted in the documentation. The glaring  exception to this is that calls to Minecraft functions will not work at all, and in fact, may simple error out by  throwing a stack trace or something. This is not a bug per-se, you must simply not use those functions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2318</id>
	<key><![CDATA[Arguments may be passed to the program as such: %s./script.ms "Argument 1" "Argument 2"%s, which will be  available via the means outlined above.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2319</id>
	<key><![CDATA[To install MethodScript on your system, download the CommandHelper jar, and place it in a sensible location. If you are  already running a Minecraft server with CommandHelper installed, the jar file there will suffice, though you may wish to  place a copy of it elsewhere, as otherwise your persistance databases and settings will be combined. (Keep in mind that  using serialized persistance is NOT thread safe, and so you run the risk of corrupting your database by having two  instances of CH running at once, if they are both writing to the persistence db.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2320</id>
	<key><![CDATA[Updated several dependencies:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2321</id>
	<key><![CDATA[jsch: 0.1.50 Testing only:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2322</id>
	<key><![CDATA[com.jcraft:jsch ..................................... 0.1.51 -> 0.1.54]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2323</id>
	<key><![CDATA[Updated for Minecraft 1.7.9 (should still be compatible with 1.7.2 builds, excepting that Sound.BREATH and Sound.HURT have been removed).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2324</id>
	<key><![CDATA[log4j: 1.2.17]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2325</id>
	<key><![CDATA[mail: 1.5.0-b01]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2326</id>
	<key><![CDATA[Updated for Bukkit 1.13]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2327</id>
	<key><![CDATA[mockito-core: 1.9.5]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2328</id>
	<key><![CDATA[Bukkit 1.7.8 - 1.8.8]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2329</id>
	<key><![CDATA[Java 8]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2330</id>
	<key><![CDATA[[%s 676db513]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2331</id>
	<key><![CDATA[mysql:mysql-connector-java ........................ 5.1.30 -> 8.0.9-rc]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2332</id>
	<key><![CDATA[powermock: 1.5.1]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2333</id>
	<key><![CDATA[org.yaml:snakeyaml ...................................... 1.13 -> 1.20]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2334</id>
	<key><![CDATA[org.ow2.asm:asm-all ................................ 5.0.4 -> 6.0_BETA]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2335</id>
	<key><![CDATA[[%s 4d970d0]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2336</id>
	<key><![CDATA[[%s f8953eb]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2337</id>
	<key><![CDATA[Removed WorldEdit dependency (See %s SKCompat] extension)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2338</id>
	<key><![CDATA[sqlite-jdbc: 3.7.15-M1]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2339</id>
	<key><![CDATA[commons-codec:commons-codec .............................. 1.9 -> 1.11]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2340</id>
	<key><![CDATA[org.mockito:mockito-core ............................. 1.9.5 -> 2.15.0]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2341</id>
	<key><![CDATA[Bukkit: 1.5.1]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2342</id>
	<key><![CDATA[Bukkit 1.7.2 - 1.7.9]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2343</id>
	<key><![CDATA[Bukkit 1.7.2 - 1.7.8]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2344</id>
	<key><![CDATA[Updated third party dependencies]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2345</id>
	<key><![CDATA[Updated for Bukkit 1.8.6]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2346</id>
	<key><![CDATA[powermock-module-junit4: 1.5]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2347</id>
	<key><![CDATA[[%s fd35d2e]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2348</id>
	<key><![CDATA[This page lists compatibility of various milestone versions of CommandHelper. Note that this chart was created starting with build 1498, so earlier builds may not be accurate. In general, the compatibility requirements, if not listed, are the same as the previous milestone build. The minimum requirements for the current builds are:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2349</id>
	<key><![CDATA[Backport of the latest build of CH, backported to be compatible with 1.4.7. Not officially supported, community maintained.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2350</id>
	<key><![CDATA[Removed vault dependency (See [%s CHVault] extension)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2351</id>
	<key><![CDATA[Updated to bukkit 1.4.6]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2352</id>
	<key><![CDATA[Bukkit: 1.5.2]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2353</id>
	<key><![CDATA[Updated to bukkit 1.4.7]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2354</id>
	<key><![CDATA[powermock-api-mockito: 1.5]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2355</id>
	<key><![CDATA[Bukkit 1.7.10 - 1.12.2]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2356</id>
	<key><![CDATA[[%s Redis 2.6.13]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2357</id>
	<key><![CDATA[[%s 7cbdf86f]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2358</id>
	<key><![CDATA[Removed remaining backwards compatibility for versions prior to 1.7.10]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2359</id>
	<key><![CDATA[Updated to Minecraft 1.7.8 (should still be compatible with 1.7.2 builds, however)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2360</id>
	<key><![CDATA[json-simple: 1.1.1]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2361</id>
	<key><![CDATA[Bukkit 1.7.8 - 1.12.1]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2362</id>
	<key><![CDATA[Updated to Minecraft 1.7.2]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2363</id>
	<key><![CDATA[Bukkit 1.7.8 - 1.9.0]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2364</id>
	<key><![CDATA[WorldEdit: 5.5.6]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2365</id>
	<key><![CDATA[[%s 7277e87c]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2366</id>
	<key><![CDATA[Updated for Bukkit 1.8]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2367</id>
	<key><![CDATA[jsch: 0.1.51]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2368</id>
	<key><![CDATA[CommandHelper 3.3.2 Release]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2369</id>
	<key><![CDATA[Updated for Spigot 1.14]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2370</id>
	<key><![CDATA[[%s cda686f]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2371</id>
	<key><![CDATA[Spigot 1.13.2 - 1.14.1]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2372</id>
	<key><![CDATA[Bukkit/Spigot version as specified below (when used as a plugin)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2373</id>
	<key><![CDATA[Bukkit 1.7.2]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2374</id>
	<key><![CDATA[[%s 8086fe]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2375</id>
	<key><![CDATA[Updated bukkit (Many other deps were updated at this time as well)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2376</id>
	<key><![CDATA[Added optional redis dependency]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2377</id>
	<key><![CDATA[Bukkit 1.7.6 - 1.8.6]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2378</id>
	<key><![CDATA[mysql-connector-java: 5.1.25]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2379</id>
	<key><![CDATA[junit:junit ............................................. 4.11 -> 4.12]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2380</id>
	<key><![CDATA[junit: 4.11]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2381</id>
	<key><![CDATA[[%s 1.4.7 Backport]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2382</id>
	<key><![CDATA[[%s 484c064]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2383</id>
	<key><![CDATA[Updated to Minecraft 1.6]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2384</id>
	<key><![CDATA[jedis: 2.5.1]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2385</id>
	<key><![CDATA[[%s aca997c]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2386</id>
	<key><![CDATA[commons-codec: 1.9]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2387</id>
	<key><![CDATA[[%s 279381f]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2388</id>
	<key><![CDATA[commons-codec: 1.8]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2389</id>
	<key><![CDATA[[%s cc0f80e]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2390</id>
	<key><![CDATA[activation: 1.1.1]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2391</id>
	<key><![CDATA[[%s 90d3bc1b]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2392</id>
	<key><![CDATA[[%s 8b08d139]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2393</id>
	<key><![CDATA[Bukkit 1.6.1]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2394</id>
	<key><![CDATA[WorldGuard: 5.7.3]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2395</id>
	<key><![CDATA[mysql-connector-java 5.1.30]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2396</id>
	<key><![CDATA[Updated for Bukkit 1.12.1]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2397</id>
	<key><![CDATA[[%s 896165c]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2398</id>
	<key><![CDATA[[%s 7450f621]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2399</id>
	<key><![CDATA[Bukkit 1.13.1]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2400</id>
	<key><![CDATA[First tracked compatibility]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2401</id>
	<key><![CDATA[[%s 8c4b165]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2402</id>
	<key><![CDATA[WorldGuard 5.9]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2403</id>
	<key><![CDATA[Updated several dependencies]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2404</id>
	<key><![CDATA[Also note that CommandHelper may still be backwards and forward compatible to a large degree, many of the advanced features that normally have hard dependencies on certain versions of external dependencies have been configured to "soft" fail, that is, individual components may not work, but in general the plugin should continue to function. Regardless, only the most current dev builds are officially supported.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2405</id>
	<key><![CDATA[[%s 6304f91]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2406</id>
	<key><![CDATA[redis.clients:jedis ................................... 2.5.1 -> 2.9.0]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2407</id>
	<key><![CDATA[org.xerial:sqlite-jdbc ......................... 3.7.15-M1 -> 3.21.0.1]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2408</id>
	<key><![CDATA[[%s 773d877]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2409</id>
	<key><![CDATA[3.3.2 snapshots start. All extensions need to be updated.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2410</id>
	<key><![CDATA[CommandHelper 3.3.3 Final]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2411</id>
	<key><![CDATA[[%s c14f67a]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2412</id>
	<key><![CDATA[snakeyaml: 1.12 Testing only:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2413</id>
	<key><![CDATA[jline:jline ........................................... 2.11 -> 2.14.5]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2414</id>
	<key><![CDATA[WorldEdit: 5.6.2]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2415</id>
	<key><![CDATA[Finished updating for Bukkit 1.9]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2416</id>
	<key><![CDATA[Vault 1.4]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2417</id>
	<key><![CDATA[[%s 765e75f]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2418</id>
	<key><![CDATA[[%s 40dc779e]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2419</id>
	<key><![CDATA[Bukkit 1.7.2 - 1.8.0]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2420</id>
	<key><![CDATA[[%s 4b485fd]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2421</id>
	<key><![CDATA[Bukkit: 1.4.7]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2422</id>
	<key><![CDATA[Bukkit: 1.4.6]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2423</id>
	<key><![CDATA[If you intend on submitting code changes, you'll need a fork of the project. You can create a fork on github, and then  clone from there. Don't worry, if you clone directly from the main repo (which you won't have commit access to) you can  easily create a fork later, and point the remote to there instead. The main repo is read only, so if you only want to  build and make changes locally, it is ok to just use the main repo's access url. The access url can be found on the  project's github page at the top, and looks like %sgit@github.com:user/project.git%s. This is the address  you'll need. If you don't have a public/private key set up with github, or you don't have a github account at all  (you'll need one to contribute, though not to simply pull), you'll need the http url instead:  %s and will have to enter your password (or leave it blank for anonymous  access). This url will vary depending on whether or not you are checking out from the main project, or your own fork.  Click next. You'll probably want to start off with the "master" branch, though you can select any other branches you  want too. If you don't get a particular branch right now, that's ok, you can get them later. Set the destination  directory (probably ~/NetBeansProjects) and project name, then click finish. It will ask if you want to open the project  afterwards. Since CommandHelper is a maven project, it will identify it properly without any extra requirements, so go  ahead and open it at this time.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2424</id>
	<key><![CDATA[CommandHelper uses [%s git] and [%s maven] for source  control and build system, respectively. If you need to do more advanced things with the project, you'll need to download  these tools separately and use them from the command line. Follow the directions to download and install them. If you  can run %sgit --version%s and %smvn --version%s from the command line, you have successfully set them  up. It is assumed that you know the basics of [%s git] and  [%s maven], and so topics like commiting and pulling won't be addressed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2425</id>
	<key><![CDATA[Submitting a PR]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2426</id>
	<key><![CDATA[Cloning with NetBeans]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2427</id>
	<key><![CDATA[In NetBeans 7.3, you can right click the project and select Git -> Remote -> Pull from upsream... to pull from another  remote.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2428</id>
	<key><![CDATA[Pulling from upstream on command line]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2429</id>
	<key><![CDATA[To clone the project directly in NetBeans, go to the Team -> Git -> Clone... menu. Enter the access url in the  Repository URL field. Depending on whether or not you are using HTTP or SSH, you will see a different interface below.  Enter your connection details to continue. If you don't have a public/private key set up with github, you'll need to use  the HTTP access url, and you'll enter your username and password.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2430</id>
	<key><![CDATA[Rebasing]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2431</id>
	<key><![CDATA[Pulling from upstream in NetBeans]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2432</id>
	<key><![CDATA[Advanced Tools]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2433</id>
	<key><![CDATA[Cloning the project]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2434</id>
	<key><![CDATA[All contributions must be released according to the  [%s MIT submission license], including the  [%s special license] for core code, and is expected  to conform to the [%s code standards]. All code must be  submitted as a pull request via github to be considered.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2435</id>
	<key><![CDATA[To clone from the command line, create a new directory, cd into it, and run %sgit clone ACCESS_URL .%s where  the access url is the one we found above. After a moment, all the files will be checked out into this folder. Since the  project is a maven project, you won't need to do anything extra for NetBeans (or other IDEs) to recognize it properly.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2436</id>
	<key><![CDATA[If you wish to contribute code to CommandHelper, first of all, thank you! CommandHelper has grown into a very large  project, and the user base is expanding faster than a single person can develop for. While there are many ways to  actually write code, this article outlines the only "officially supported" workflow. You'll need knowledge of a few  tools, and a good command of Java to get started though, and so many concepts may be beyond the scope of this article.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2437</id>
	<key><![CDATA[Building the project]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2438</id>
	<key><![CDATA[Building from the command line is equally simple. Run %smvn install%s to do the equivalent of the "Build"  option in NetBeans, or %smvn clean install%s to clean and build. If you need to set the build profile, use the  -P option, so %smvn -Pprovisional-build clean install%s for instance. You can also use the other targets, such  as %spackage%s to create a release zip, which can't be done from NetBeans.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2439</id>
	<key><![CDATA[Building in NetBeans]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2440</id>
	<key><![CDATA[To submit a PR, you must have created a fork, and set up a remote for your fork. NetBeans 7.3 allows for all of this to  be done from directly inside the GUI, but previous versions required the command line to do some of these things. First,  you'll want to make sure that your code is up-to-date against the "upstream" repo, that is, the main repository. Finish  all your changes, and commit them to your local repo. Then, pull from the upstream repo to ensure the commit can be  cleanly merged (fix any conflict should they arise) and then push to your fork. Once you have pushed, go to your fork in  github and click Pull Request. Enter a description of the PR, and submit. Once submitted, you can continue to update  this branch, and the new commits will be reflected in the existing PR, however, adding more commits may slow the time it  takes to process your PR, so it is a good idea to create a branch and work on that if you need to continue working while  the PR is being reviewed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2441</id>
	<key><![CDATA[Cloning from the command line]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2442</id>
	<key><![CDATA[First, you must add the upstream repo as a remote. To add a remote, run %sgit remote add NAME ACCESS_URL%s The  name can be whatever you like (maybe "upstream" is a good choice) and the access url is the url of the repo you forked  from. From that point on, you can run %sgit pull upstream master%s to pull from the master branch of the  upstream repository. You will not be able to push to CommandHelper's main repository, but in general to do so you would  run %sgit push upstream master%s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2443</id>
	<key><![CDATA[When submitting a PR, you may have to rebase. If you have several commits, and they are all logically a part of the same  code change, and they haven't yet been reviewed, you'll want to ''rebase'' your commits.  [%s This article] goes in depth about how to  squash your commits, but the gist is this: If you have 4 commits that you need to rebase, then you would run  %sgit rebase -i HEAD~4%s to combine the previous 4 commits. If the commit has been reviewed, do NOT rebase at  that point, because then the reviewer will have to look at the entire diff again, instead of just looking at the diff  from the last time they reviewed the changes. Additionally, if you have several logically separate code changes, it is  ok to have them remain separate commits, and is in fact encouraged, so they can selectively be reverted if need be.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2444</id>
	<key><![CDATA[Due to the shear size of CommandHelper, it may not be a good starting point for someone that is wishing to get into open  source development. However, with dedication, patience, and some critical thinking, you'll definitely be able to  contribute. The code in CommandHelper is fairly well organized, follows good  [%s software engineering design patterns], is unit tested, abstracted,  and is generally geared towards long term stability and maintainability. Generally speaking, it is not important to  fully understand the entirety of the code base before working on it, but you'll need to understand the  [[%s|Basic Architecture]] before you'll be able to understand where to even begin. The  purpose of this article is not to help you understand how to add code to the project, but instead is meant to help you  get set up and building the code locally.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2445</id>
	<key><![CDATA[To build the project in NetBeans, right click the project, and select "Build". If you have just switched branches, or  something else if going wrong with the build, select "Clean and Build" instead. Cleaning the project clears out all  compiled files, and recompiles all sources, but is otherwise the same as a normal build. Notice on the top toolbar,  there is a dropdown box that says &lt;default config&gt;. Among possible choices, there will be the "provisional-build"  option, which is provided to maven by CommandHelper's pom file. This ''build profile'' causes maven to skip tests, which  is useful if you are constantly rebuilding during development, or there are failing tests preventing you from actually  compiling a binary. You may select that build profile before building, if desired. Note though that you should build in  the default config before committing, to make sure that none of the unit tests fail on your code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2446</id>
	<key><![CDATA[For the most part, the only tool you need is NetBeans. You can download NetBeans [%s here].  The Java SE version is sufficient for CommandHelper, so download that version. NetBeans comes integrated with all the  tools we normally need to do things with CommandHelper, but you may want to look at the Advanced Tools section below if  you have to do more advanced things from the command line.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2447</id>
	<key><![CDATA[Building from command line]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2448</id>
	<key><![CDATA[Building the project is equally straightforward, since it uses maven. Maven manages downloading all dependencies, which  are specified in the pom, automatically. The first time you build the project it will take a very long time, because it  must initially download all the dependencies, which for a completely clean install will be a very large number. You must  be connected to the internet for the initial build, but the dependencies are all cached on your system, so future builds  won't take nearly as long, and won't require a network connection.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2449</id>
	<key><![CDATA[Continual Server Broadcast]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2450</id>
	<key><![CDATA[This shows how to add a cooldown to any command, so that it won't be able to be run by a player until after a certain amount of time.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2451</id>
	<key><![CDATA[auto_include.ms:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2452</id>
	<key><![CDATA[Delayed Looper]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2453</id>
	<key><![CDATA[Command Cooldown]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2454</id>
	<key><![CDATA[A cookbook has many small, short recipes in it, that tell you how to cook a single dish. With each given recipe, you  are expected to modify it to suit your needs, as well as know which recipes to combine to make an entire meal. Just  like a cookbook, this page lists common tasks that are small, generic examples that need a bit of modification to suit  your needs, but should otherwise complete one small portion of a more complex task. Feel free to take and modify these  snippets to fit your needs, and put them in a larger ecosystem of scripts that make up the whole of your server. The  examples in this cookbook may only work with development features, so if it doesn't work, try updating to a dev build.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2455</id>
	<key><![CDATA[If you want to continually broadcast a message to the server, you can add this little snippet:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2456</id>
	<key><![CDATA[If you want to run some code in a loop a limited number of times, but put a delay between runs, you can use the  following code: (Note the [[%s|Execution Queue]] is a much more elegant solution to  this problem)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2457</id>
	<key><![CDATA[In your actual command:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2458</id>
	<key><![CDATA[would necessarily have to be runtime errors. In this case, since the type is programmer specified, it is reasonable to assume that it is meant to be used as a generic string, not the enum type. Additionally, when hard coding strings or numbers, the compiler can check to ensure that the type is a valid cross cast type, at compile time.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2459</id>
	<key><![CDATA[If this were allowed, this would make the following code ambiguous:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2460</id>
	<key><![CDATA[Because this code is at a glance unclear on whether or not we are actually trying to allocate space for a new Label object, or simply point to the existing object, this is not allowed. Supertypes are also restricted, because then both of these would be allowed:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2461</id>
	<key><![CDATA[@a2. Put more succinctly:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2462</id>
	<key><![CDATA[This is because while string constants (and indeed all values that are not contained in a variable) are declared as auto, variables declared as string are not. This is because when hardcoding the string in, it is quite obvious what the intention is; you are intending for the string to take on the  enum constant value. However, when you declare it in a variable first, it is assumed that the input is programmer specified, and therefore is not intended to be cross cast. If cross casting were generally allowed, then obvious bugs like this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2463</id>
	<key><![CDATA[Then it must be true that @a]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2464</id>
	<key><![CDATA[If the procedure _func accepts a single Compass argument, it is acceptable to do %s_func('NORTH')%s, but it is not acceptable to first define a string, then attempt to cross cast:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2465</id>
	<key><![CDATA[As a simple example, we can consider the conversion of string to enum. Assume we have the following declared:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2466</id>
	<key><![CDATA[There is a caveat to this process. An object cannot cross cast an object of the same type, or a supertype or subtype. Otherwise, this would make reference vs copy ambiguous. Consider the following:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2467</id>
	<key><![CDATA[Cross casting is a feature of MethodScript that allows for rapid scripting, while maintaining strong type safety elsewhere. Cross casting is less stringent than a fully strongly typed system though, so it should be used sparingly, and only if there is a strong case for automatic casting. Generally it should only be used to cross cast from primitives, instead of other objects. The cross casting system goes hand in hand with multiple inheritance, but is not to be confused with it. Cross casting may be taken advantage of by using the auto keyword.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2468</id>
	<key><![CDATA[Cross Casting]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2469</id>
	<key><![CDATA[@f must be true.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2470</id>
	<key><![CDATA[Assume we have 2 classes, A and B, and they can each be cross cast to the other.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2471</id>
	<key><![CDATA[The compiler will attempt to check the validity of the cross casting at compile time, if the cast method is determined to be a constant expression, so you should keep the logic to a minimum to allow for the compile time error checking to work. Once this occurs, the following code is now valid:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2472</id>
	<key><![CDATA[If data loss would occur when cross casting, this is a violation of the underlying contract, and in that case, cross casting should not be used. It does not have to be true that (@a as B)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2473</id>
	<key><![CDATA[It is also worth noting that when using the auto keyword explicitly, this can open the door to failure to catch errors at compile time, as demonstrated in the above example with the auto keyword usage. Generally speaking, well maintainable software should not need to use the auto keyword explictly, though it is ok to take advantage of the cross casting features when using hardcoded instances of objects, such as in example 4 above.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2474</id>
	<key><![CDATA[Cross casting can be done explicitly, using the same mechanism as a normal cast:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2475</id>
	<key><![CDATA[You can also take advantage of the cross compiling system, should it suit your classes needs. You declare your class to be cross compilable from various types, by annotating it with the @{CrossCast} annotation. If this annotation is declared, you must override the cast() method, (which should be protected) and return a new instance of the object, given the type to convert. Say you have a class, Label, which you want to be cross castable from a string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2476</id>
	<key><![CDATA[In multiple inheritance, an object actually IS multiple other objects, there is no conversion required. For instance, assume Label extended both class One and class Two. Then the following code is not a cast of any sort, it's just a simple assignment.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2477</id>
	<key><![CDATA[Cross Casting vs. Multiple Inheritance]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2478</id>
	<key><![CDATA[Cross Casting User Classes]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2479</id>
	<key><![CDATA[@a, however. A good example of this would be temperature classes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2480</id>
	<key><![CDATA[This runs the risk of a CastException however, in the event the value cannot be cast or cross cast.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2481</id>
	<key><![CDATA[This demonstrates that the equals operator does not attempt cross casting before attempting the equality check. TODO: Should it though? If so, then the above paragraph should be changed to state that it @c]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2482</id>
	<key><![CDATA[This further demonstrates why cross casting to a super type isn't allowed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2483</id>
	<key><![CDATA[Namespaces]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2484</id>
	<key><![CDATA[THIS FEATURE IS NOT YET IMPLEMENTED. The import tool works opposite of the export tool. Given an xml, ini, or yml file,  it reads it in, and merges the data with your existing database. This can be used to import information from an external  application, or to add information en masse. The format of the imports much exactly match the respective export format.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2485</id>
	<key><![CDATA[federation.**: The Federation system stores values here. The namespace should never be set to read only, and should be in a transient data source.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2486</id>
	<key><![CDATA[The %sstorage.%s bit simply namespaces the data. This way we can reserve other namespaces for future use.  The part that you typically have control over from your scripts is this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2487</id>
	<key><![CDATA[site_deploy.**: Information used by site-deploy tool is stored in this namespace.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2488</id>
	<key><![CDATA[l10n.**: Settings related to the Localization UI Tool.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2489</id>
	<key><![CDATA[The data manager is a tool that is built directly in to CommandHelper that assists you in managing your persisted data. There are several functions available to help you view, edit, and move your stored data around. Before you jump into using the data manager, it is important that you understand the lower level details, so you don't mess anything up. The data manager gives you direct access to the underlying data, so you could possibly screw things up if you aren't careful, so please read this documentation carefully, and be sure you understand what's happening before you try it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2490</id>
	<key><![CDATA[custom.**: CommandHelper will not ever touch any values stored in here, and you may use this however you wish with external scripts.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2491</id>
	<key><![CDATA[The edit command allows you to directly edit the data in your database. While this feature works similarly to the  store_value function, this method gives you direct access to the information, and doesn't do any error checking at all,  so be sure you understand the underlying mechanisms before using this feature.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2492</id>
	<key><![CDATA[merge]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2493</id>
	<key><![CDATA[oauth.**: Refresh and access tokens stored by the OAuth scripts]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2494</id>
	<key><![CDATA[This clears out your database entirely. This is most useful for map resets. Currently, with just the default backend,  it is a trivial matter to clear out your database already; just delete the database file. However, if you have other  backends in place, this may become a more complex task, but no worries, when using the Data Manager, it will always be  just a few commands.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2495</id>
	<key><![CDATA[cleardb]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2496</id>
	<key><![CDATA[The %sstorage%s namespace is reserved for values that are created and accessible from our script's store_value  and get_value functions. If you manually edit the data from the data manager, or import other external data, if you  want this data to be accessible from your scripts, you must include the correct namespace in the key name. The  following namespaces are reserved for future use, and should not be used outside of their given scope:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2497</id>
	<key><![CDATA[Currently, several methods of data storage are available. Usage of the actual Persistence Network is described  [[%s|here]], and explains how to configure the different backends. Conversion between the types is also be possible, so if you begin storing values now, these will be portable later. The data in each row is stored as a partial [%s JSON], but otherwise follows all rules of JSONs.  and  are supported.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2498</id>
	<key><![CDATA[If you intend on putting in your own values, the only namespace you should use is custom. All other namespaces are not  currently planned to hold data, but are not guaranteed to remain unused in the future.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2499</id>
	<key><![CDATA[THIS FEATURE IS NOT YET IMPLEMENTED. The export tool allows you to move your data out of CommandHelper, and in to a  standardized, text based file. Currently, you have the option of exporting the data as either XML, plain text, INI  format, or YML. Once the data is out of CommandHelper and in to one of these formats, it becomes a very straightforward  thing to programmatically parse or otherwise manipulate this data with an external application. The plain text export  can also be used if you simple want to read over your data in an external program.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2500</id>
	<key><![CDATA[print%s command allows you to print out the data currently stored to your console. Running the command  will simply return the same thing as %sjava -jar CommandHelper.jar print-db%s. However, the interactive print  command will also allow you to specify a namespace as an argument, which will allow you to narrow down a result set,  similar to %sget_values()%s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2501</id>
	<key><![CDATA[upgrade]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2502</id>
	<key><![CDATA[''Note:'' The %sstore_value()%s function allows for namespaces to be added, but that, %sget_value()%s  and %sget_values()%s namespaces are all children of the underlying %sstorage%s namespace, and should  not be referenced when using the functions from code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2503</id>
	<key><![CDATA[edit]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2504</id>
	<key><![CDATA[If you have a script that runs %sstore_value('MyKey','MyValue')%s, then the following entry would be created  in the database:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2505</id>
	<key><![CDATA[This will print all the stored values to the console. Using pipes and redirects, you can further manipulate this  output if desired. Let's take a look at the output and explain it further:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2506</id>
	<key><![CDATA[The key for the data is on the left, and the value is on the right. Each piece of data (other than arrays) are stored  as ''partial JSONs'', which by themselves aren't any kind of standard thing, but can be combined to form a true JSON.  You can determine the datatype of each node by noting the [%s rules that JSONs follow]. In the  future, CommandHelper will allow you to create your own JSONs from internal data structures, which will be usable  by all sorts of neat advanced functions. Also, once values are stored in databases, you'll be able to manipulate this  data from external or even remote applications, which will allow you to do all sorts of cool things.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2507</id>
	<key><![CDATA[If CommandHelper upgrades the persistance storage format, the upgrade function will automatically upgrade your data to  the new format. Simply run this command if the upgrade notices tell you to, or if an error message tells you to. Due to  the nature of the persistance files, it will no longer be necessary to delete the database when changes are made, you  will simply have to run this command. After running this command, no data will be lost, and nothing should change from  your script's perspective. Before doing the upgrade, a backup is created automatically, however, you should always  create your own backup before, just in case.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2508</id>
	<key><![CDATA[refactor]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2509</id>
	<key><![CDATA[To access the data manager, open up a terminal (command prompt in Windows) and cd to the plugins folder of your server,  and run the following command:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2510</id>
	<key><![CDATA[Persistence Details]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2511</id>
	<key><![CDATA[Using the Data Manager]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2512</id>
	<key><![CDATA[The manager should then load up. Type "help" at the prompt to view the possible functions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2513</id>
	<key><![CDATA[THIS FEATURE IS NOT YET IMPLEMENTED. Refactoring allows you to transfer your data from one backend to the other. By  default, CommandHelper uses the SerializedPersistance backend, but say after running your server for a while, you  decide to switch to another backend type, perhaps MySQL. You can use the refactor tool to easily transfer all of your  data from the SerializedPersistance backend to the new MySQL backend, without any hassle, and without losing any data.  As new backend providers become available, this tool will be updated, so you are able to switch around as often as  desired.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2514</id>
	<key><![CDATA[extension.&lt;extension name&gt;.**: Extensions may store data in this namespace.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2515</id>
	<key><![CDATA[The merge tool allows you to move entire databases around. It works by you specifying a source database, and a  destination database, and it moves ALL the keys over to the new database, without touching the source. If there are  key conflicts, it will prompt you for a decision, so it should be safe from accidental data loss. The merge tool isn't  necessarily a replacement for the import and export tools, because it doesn't work transparently; it will only operate  on entire databases at a time, as opposed to namespaces and such. However, it can be used as a crude method of importing  and exporting, and if your entire persistance network is contained in one database, it will work exactly like a full  import/export. -->]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2516</id>
	<key><![CDATA[The data manager is an interactive shell program that runs as a standalone program. Before using the data manager to  edit your data, you should first ensure that nothing else is using your persistance files (so, shut down your server).  The only exception to this is for locking databases, such as SQL based backends, there should be no issues with  read/write access, even if the server is running, and read access for all other backends.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2517</id>
	<key><![CDATA[storage.**: Values accessible from your main script's store_value and get_value functions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2518</id>
	<key><![CDATA[The simplest and quickest way to view all the currently stored values is to open up a terminal, and change to the directory the CommandHelper jar is in, and run the following command:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2519</id>
	<key><![CDATA[Know the assumptions you are making, and test assumptions that matter]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2520</id>
	<key><![CDATA[These types of errors are usually more straightforward to fix, since the compiler can usually point us right at the code in question. Regardless, the code isn't actually running at this point, so our runtime debugging techniques aren't applicable here.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2521</id>
	<key><![CDATA["Debugging is twice as hard as writing the code in the first place. Therefore, if you write the code as cleverly as possible, you are, by definition, not smart enough to debug it." --Brian Kernighan]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2522</id>
	<key><![CDATA[We don't know offhand what @value is, so it may be useful to output the value before we use it, especially if it's involved in part of the stack trace chain.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2523</id>
	<key><![CDATA[Bugs in MethodScript itself]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2524</id>
	<key><![CDATA[You can also use %s for a more detailed output, which includes the variable name. So, assuming @value contained 'string', then %strace(@value)%s would output: %s@value: string%s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2525</id>
	<key><![CDATA[If when we trace(@value1), we see that it is "test1", then we can safely assume that @value2 is 0. However, if we did not have that trace() present, (allowing us to know the value of @value1 for sure) we must be aware that we have two assumptions here. If the assumptions matter, that is, they are involved in the code that is having problems, we would be wise to test those assumptions, in order to rule out the problem.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2526</id>
	<key><![CDATA[MethodScript is itself written in code, and is prone to bugs as well. These debugging techniques are not meant to be useful when you get a java stack trace, and in fact, the java stack trace often doesn't help you identify the problem at all. In these cases, you may be able to find a workaround which prevents the error, but in ALL cases if you get a Java stack trace, this is a bug which should be reported. An example Java stack trace looks like this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2527</id>
	<key><![CDATA[These debugging techniques do not help with syntax errors. There is a difference between compiler errors and runtime errors. Syntax errors do not require testing values or anything, because they are a problem with your syntax, not your logic. For instance, in the following code, we are missing a parenthesis.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2528</id>
	<key><![CDATA[As you look at the problem code, it is likely that you won't test all your assumptions. Sometimes, it's obvious what a particular value is, for instance, given this code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2529</id>
	<key><![CDATA[The most important thing for you to know is how the code is supposed to work. Granted, there may be a problem with how it is actually working, but if you don't know what the code is supposed to do, you can't know what is wrong with it. This includes usages of the builtin API, as well as your own code. Stack traces are important to understand as well. Lets examine the components of a stack trace, given the following source code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2530</id>
	<key><![CDATA[If @b is zero, then this would certainly cause the error. However, there is more to the stack trace, which is useful, because this line may not be where we actually want to fix the error. The next element in the stack trace tells us that _proc2 was called from _proc1, on line 4.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2531</id>
	<key><![CDATA[This is our ''stack trace''. The problem is that we are dividing by zero. The first line of the stack trace tells us what the error type was, and gives us the exception message as well. As you can see, the root of our problem is on line 8, if @b is 0. @b ends up being 0, so we end up dividing by zero, thus the exception. The root cause is always  the first element in the stack trace. Each stack trace element follows the format &lt;code description&gt;:&lt;file path&gt;:&lt;line number&gt;. In this case, the example was run from the command line, so the "main" file is run from the Interpreter, but normally this will contain a file path. The important information is the code description and the line number. The code description tells us that this is code defined in the procedure "_proc2", and the error is on line 8.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2532</id>
	<key><![CDATA[When we run this script, we get the following error:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2533</id>
	<key><![CDATA[Understand code flow]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2534</id>
	<key><![CDATA[Ok, so this still doesn't help us much, because we don't know where @a came from, so lets dig down again into the stack trace. The last element is &lt;&lt;main code&gt;&gt;, which means that this is the "top level" of the execution unit. In this case, it means that the code is "loose" code, that is, it is not contained inside a procedure.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2535</id>
	<key><![CDATA[Debugging your code is an important, but challenging part of writing working code. Currently, MethodScript does not have an interactive debugger (though this is planned in the future) however, this does not stop you from debugging scripts anyways. When debugging, there are several key concepts]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2536</id>
	<key><![CDATA[If you can determine what was done to cause this error, please include that information in the bug report, but often times, this error can be fixed without any information other than the stack trace.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2537</id>
	<key><![CDATA[Aha! Now we see where the 0 is coming from, it is hard coded in at this point. Sometimes your code is more complicated though, and it's not so obvious where a value is coming from, which leads us to our next section:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2538</id>
	<key><![CDATA[Sometimes it's not obvious where a variable's values come from. In this case, you can use runtime checks to gather the value of variables. The simplest way to do this is to use %s or %s to output the value of the variable at that moment in time. Say you have a value that is brought in from storage:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2539</id>
	<key><![CDATA[Syntax errors]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2540</id>
	<key><![CDATA[Understand variable's values]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2541</id>
	<key><![CDATA[When DI::construct is called on a class, the parameters are automatically constructed, using the rules defined in the configuration. Classes that have the default injectability are constructed using the %s@{Inject}%sable constructor. This process happens recursively, until all paramters required are constructed. In general, there should only be one call to DI::construct per entry point in your program. This helps ensure that your entire ecosystem is correctly configured to handle DI properly, though there are a few legitimate reasons to call this manually.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2542</id>
	<key><![CDATA[All classes where exactly one constructor is marked as @{Inject} are considered a contract and service in and of  themselves. The default constructor provided if no constructor is defined in the class is automatically marked as injectable.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2543</id>
	<key><![CDATA[Runtime Configuration]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2544</id>
	<key><![CDATA[In this example, in order to construct A, we must first construct an instance of B. But in order to construct an instance of B, we must first construct an instance of A! This cycle is detected at compile time, and if such a cycle is detected, it will cause a compile error.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2545</id>
	<key><![CDATA[This annotation is required to be placed on a single Service, if there are more than one. This is the instance that will be provided if no Qualifiers are specified.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2546</id>
	<key><![CDATA[While the bulk of the setup for the system must be done with annotations or a config file, as this information must be available at compile time, there are a few settings that can be tweaked at runtime. Particularly, for contracts, the services available may be changed, though they must be changed in a compatible way (i.e. contracts can't be removed, and services with various qualifiers can only be replaced if they have the same qualifiers.). This is mostly useful for unit tests, but it can be used for non-test code as well, if the occasion demands it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2547</id>
	<key><![CDATA[This can only be placed on an interface, and declares that this interface is Injectable. That means that code can use this as an injectable interface. Only Services (that is, concrete classes) can be injected without configuration, so if we want to expose an annotation to the ecosystem, we must label it with the Contract annotation.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2548</id>
	<key><![CDATA[In MethodScript, a contract must be an interface. Every registration of the contract must be accompanied by one or more service (otherwise, it is useless). A concrete class may also be registered as a service in and of itself, though it's generally more flexible to use a contract/service pair. There are 2 ways to declare this setup, using autoconfiguration with annotations, or configuration using a config file, and can be modified further at runtime. In general, for your own code, using the annotations is preferred, but when working across multiple libraries, you may find it more useful to use a config instead. The actual system configuration is loaded in this order: annotations, then config. If a value is defined in annotations and config, then the config definition stands. This makes it possible to provide expected configuration through annotations, but still allows flexibility to override these assumptions later, as well as providing a config at all for library code that doesn't natively provide the configuration.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2549</id>
	<key><![CDATA[The Service annotation can only be applied to a concrete class, though in some cases, is optional. The required case is when there is a Contract, at least one Service must implement that Contract. However, you may have Services without a Contract, and in many cases, even without the configuration, a class is useable as a Service. When it comes to using the DI framework (rather than configuring it), Services (explicitely declared or assumed) can be used as a Contract, so the following is valid:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2550</id>
	<key><![CDATA[We could also not use DI at all, and simply manually construct an instance of the MailerServiceStub, and pass that in, but that would require a change to the class itself, to accept that parameter in the constructor of Main.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2551</id>
	<key><![CDATA[Now, if we try to test this code, we don't actually want to send an email every time we run the test, so we can create a stub, and then at runtime in our test code setup, replace the MailerService with a new MailerServiceStub, which does nothing.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2552</id>
	<key><![CDATA[Let us assume we have the following ecosystem:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2553</id>
	<key><![CDATA[Qualifiers are optional if there is only one service that implements a contract, though they are required when more than one Service implements a Contract. (We can nonetheless do more complex selection with code during runtime using the addSelector method, though this bypasses the helpful compile errors. See below.) The Qualifier is placed on other annotations, which are themselves placed on Services. They are then used along with an Inject annotation in the main code to provide a "selection strategy" for a deciding which of a Service to use for the injected Contract. For instance:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2554</id>
	<key><![CDATA[Circular dependencies are not allowed in the DI system. Consider the following example:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2555</id>
	<key><![CDATA[While the above example is demonstrating stubbing in unit tests, this feature can be used at runtime as well, and as you can see, it makes your code much more flexible than when you use the '''new''' keyword all over the place.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2556</id>
	<key><![CDATA[Qualifier]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2557</id>
	<key><![CDATA[We can also add a dynamic service selector, which is only possible using a runtime configuration. The parameter that is attempted to be loaded will sent to the closure, and based on that, the runtime may dynamically select the service that is selected:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2558</id>
	<key><![CDATA[In this configuration, we define a Counter Contract, and a CounterImpl Service. In general, we could implement this as a static methods, but that becomes less flexible down the road, particularly if we end up changing our design later. Instead, we mark it as @{Singleton}, which means 2 things. One, it is lazily constructed, i.e. it won't be constructed until we actually need it, and two, we will only ever construct it once. We could instead label it with %s@{EagerSingleton}%s, which means that it will be constructed at startup, even if nothing requires it yet, but otherwise works the same as Singleton.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2559</id>
	<key><![CDATA[Once set up, this makes it possible to remove most/all uses of the '''new''' keyword in your code, which makes your code more flexible and easier to write. Every use of the '''new''' keyword adds a point of  '''[%s tight coupling]]''', which makes your program less flexible down the road. Instead, using dependency injection essentially allows you to delegate the creation of objects to a centralized place, allowing for easy and quick changes down the road. However, in order to make use of these features, the code you write must explicitely opt in to this system, using the built in dependency injection framework. Configuration will be covered below, but let's assume that we have already configured the system, in that case, we can use the following in our normal code to take advantage of it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2560</id>
	<key><![CDATA[Consider this configuration:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2561</id>
	<key><![CDATA[Inaccessible Services]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2562</id>
	<key><![CDATA[And voila! We are done configuring the system. Let's discuss each annotation in a bit more detail, however:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2563</id>
	<key><![CDATA[Default Service]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2564</id>
	<key><![CDATA[Keep in mind that using a Service as a Contract is less flexible though. In the above example, in class A, we can only provide an instance of Red, regardless. In class B, the system will normally provide an instance of Red, but the runtime and general configuration can be tweaked to provide something other than Red, including providing classes that have yet to be defined, but will be defined in the future.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2565</id>
	<key><![CDATA[Singleton and Eager Singleton]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2566</id>
	<key><![CDATA[We have an interface, Color, three classes, Red, Green, Blue, and three annotations, R, G, and B. If we want to make these globally available to the DI system, we can instead add the following annotations:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2567</id>
	<key><![CDATA[Service]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2568</id>
	<key><![CDATA[Below is a sample file, which demonstrates the configuration.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2569</id>
	<key><![CDATA[Configuration File Setup]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2570</id>
	<key><![CDATA[We can also much more easily provide stubs to a unit test, by overriding the value that is configured to be constructed. Assume we have a contract that defines a Mailer, along with a service that implements that contract.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2571</id>
	<key><![CDATA[Since DI relies heavily on use of the type system, it is not usually allowed to leave off types. There is one exception to this, if there are qualifiers provided, and there is no ambiguity, it is allowed to leave off types. In the color example, for instance, we could do the following with no problems:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2572</id>
	<key><![CDATA[If exactly one constructor is marked with @{Inject}, or only one constructor is defined (default constructors are considered to "use injection" for this purpose)  and all the parameters of the constructor are themselves injectable, a neat feature is that that class is itself injectable in other places, with no additional configuration needed. It is a compile  error to try to inject a parameter of a type that is not injectable. To sum up, a class is considered injectable if  exactly one constructor is injectable, it has only a default constructor, or it is correctly configured using the below configuration mechanisms. Members marked with the %s@{Inject}%s annotation are injected one by one after the constructor is executed. They may be private and final, and the DI system ignores these modifiers. It is guaranteed that between the constructor code being run, and the members being injected, no other code in the class will run, the object isn't considered being done constructed until both phases are complete. This is normally not possible, but the runtime itself provides support for this particular case. Still though, it is possible to construct a class without DI, so the final value must nonetheless be provided with a default value, though this will be ignored if the DI system is doing the object construction.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2573</id>
	<key><![CDATA[Circular Dependencies]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2574</id>
	<key><![CDATA[Weak Typing and DI]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2575</id>
	<key><![CDATA[Configuration files may be inherited, so multiple config files may be created, and the final config is a composition of all of the config files combined. However, the first location that the DI system looks at is the prefs folder, in a file named dependency_injection.json. Ultimately, existing annotations are read in first, then the config files that are inherited, and finally, the dependency_injection.json file. Thus, if information is overridden, this is the order of priority.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2576</id>
	<key><![CDATA[In this example, given the above configuration, where Red is the default service, the injected instance would be Red. It is possible to change this value separately at runtime, so that future injections will be a different value.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2577</id>
	<key><![CDATA[All of the concepts described in the section on annotations can instead be configured via a configuration file. There are a few cases where this is desirable. First, if you are wanting to backport a third party library to use Dependency Injection, and it doesn't provide the annotations natively. Secondly, if a library does provide annotations, but you wish to override their selections, or third, if you wish to reconfigure your own code, without having to make code changes. It is more difficult to configure using a text file, however, which is why annotations are preferred. However, in some cases, it is the only option.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2578</id>
	<key><![CDATA[Contract]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2579</id>
	<key><![CDATA[[%s Dependency Injection] (not to be confused with  [%s Dependency Inversion] despite going hand in hand), is a general programming paradigm that supports more flexible and maintainable code. Generally speaking, dependency injection is the practice of programming against a contract, which defines a set of behaviors, rather than the implementation, (known as a service) which implements the prescribed behaviors. As this is a good programming practice, MethodScript has direct support for following these practices.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2580</id>
	<key><![CDATA[Annotation Configuration]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2581</id>
	<key><![CDATA[In general, if multiple Services are defined which implement a Contract, and none of them provide qualifiers, then when attempting to inject the Contract, it may not be possible to ever be provided an instance of a particular Service. This is not strictly an error, however, because this can be changed dynamically at runtime, as well as libraries providing multiple implementations of a Contract, which are intended to be selected from by the user as a configuration (either in a config file, or at runtime.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2582</id>
	<key><![CDATA[Often times, this is not actually mutually exclusive, you can usually make things correct, easy to use, and perform well, but if one must sacrifice one or the other, the performance should be sacrificed. More obscure, but performant mechanisms can be added later, for the cases where performance really matters, but the default should be correct and easy to use. Having a compiler can very often provide a way to optimize automatically, take the easy to use input, and output a more performant, harder to read version.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2583</id>
	<key><![CDATA[Don't worry about the implementation, until the last minute. Program against intentions first and foremost. Eventually, you do have to worry about the implementation, but that should be the last thing on your mind, unless the implementation will cause practical problems for the design. This should be a last resort however, as most poor designs are poor because the designer catered to the implementation, instead of making an elegant design first. In the commercial world, there usually is a balance to be struck between design and practical implementation, but in language design, where the stakes are much higher, a%sing a good design due to a complicated implementation translates into exponentially greater complication for users of the language, and so is to be a%sed at all costs.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2584</id>
	<key><![CDATA[However, a programmer shouldn't have to specify every last little detail when telling a program what to do. Reasonable defaults should be used, though they should always be able to be overridden. A good example of this is in day to day speech. When speaking with another human, if we give them a task, we often times leave off details that don't really matter. For instance, if I told you to go water the lawn, and there are two hoses in the garage, you're not going to need to come back and ask me which host to use, you would just select one. However, if one were broken, I would have to go out of my way to tell you to use the one on the left, but this is an exceptional circumstance, and I shouldn't have to explicitely tell you every detail in the typical case.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2585</id>
	<key><![CDATA[Correctness and ease of use come before performance]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2586</id>
	<key><![CDATA[Abstract]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2587</id>
	<key><![CDATA[This principal is quite deeply embedded into the language as a whole, for instance, keywords are not implemented in the compiler, they are added to a list, and the compiler processes them generically. This leads to increased ability to expand functionality, and makes it easier to add new keywords to the language, without having to worry about whether this will break any other code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2588</id>
	<key><![CDATA[Designing a language isn't straightforward. However, there are a few guiding principals that are used in the design of the language, though these are guidelines, not hard and fast principals. Whenever possible, when making design choices, these principals are followed, which hopefully make a better language. As more principals are codified and discovered, they will be added here later.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2589</id>
	<key><![CDATA[Fail fast]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2590</id>
	<key><![CDATA[When creating a new feature, first check to make sure that there is no design that fits into existing paradigms. If there truly isn't, or there are justifiable exceptional circumstances, then it's ok to special case it, but don't special case by default. When this happens, it makes users have to learn a new paradigm, thus increasing the complexity of the system, and making it take longer for users to become proficient. One example of this in MethodScript is that almost everything is a function, so at least when learning things initially, you don't need to know about operators.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2591</id>
	<key><![CDATA[Use reasonable defaults]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2592</id>
	<key><![CDATA[Try not to special case things]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2593</id>
	<key><![CDATA[Whenever relying on outside code that is subject to changing, abstract against it. This provides greater flexibility for you if it should change later. In general, you should program for ''your'' intentions, not the external libraries intentions. This is known as  [%s Aspect-oriented software development] and is a great way to reduce future maintenance. Barring bug fixes, the general idea is that already written code should never have to be changed, unless the core design changes. However, practically, implementations do change, and if your code relied on that, even if your code was designed perfectly, would still have to change. Therefore, we want to minimize the code that has to change, by restricting the code changes to a single module, that is, the interface between the bulk of your code, and the 3rd party code. In cases where this is too huge a burden, you should at least be aware of how tightly coupled your code is to the other code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2594</id>
	<key><![CDATA[Optimize last]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2595</id>
	<key><![CDATA[Design for intention, not implementation]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2596</id>
	<key><![CDATA[Whenever possible, determine if a condition will cause errors later, and fail at that point, instead of waiting until later. Be proactive in detecting errors, not passive. For instance, if a condition can be checked at compile time, do the check then, instead of runtime. A good example is the regex functions. If you hardcode a regex, the compiler checks to see if the regex is invalid. If so, it produces a compile error at that point, instead of waiting until runtime (which is how most languages work).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2597</id>
	<key><![CDATA[Assuming the previous two principals are followed, then the places to optimize should  be clear. Places where the implementation was inefficiently coded, or overly complicated tend to happen in the case of expressing a very elegant design that isn't catered to the implementation. However, it may not be as important to optimize as you think, and there may be much bigger bottlenecks causing performance problems. For a much more in depth discussion of this, [%s see here].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2598</id>
	<key><![CDATA[Benchmark]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2599</id>
	<key><![CDATA[Don't use cryptic error messages. Use plain english error messages where possible, and provide as many hints and tips as reasonable to help the programmer fix the error. Distinguish between programmer errors and user input errors. Programmers make mistakes, but the language shouldn't make assumptions either, if something is unclear, report it, and ask the user to clarify before continuing.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2600</id>
	<key><![CDATA[This is not to say that performance is not important, but it is to say that it is less of a priority than ensuring that things are correct, and that they are easy to use.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2601</id>
	<key><![CDATA[''Premature optimization is the root of all evil'' -- Donald Knuth]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2602</id>
	<key><![CDATA[Help the programmer]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2603</id>
	<key><![CDATA[Don't assume something is efficient or not. Benchmark it! There are so many factors that can't be taken into account in the realm of theory, so the only way to get a real answer for "Is this efficient?" is to run actual code, and get real, concrete timings.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2604</id>
	<key><![CDATA[Design and History FAQ]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2605</id>
	<key><![CDATA[Currently, analysis is not done on variable paths, so even though @a = 5 add(@a, 2) will always result in 7, since it uses a variable, it is assumed that it is completely dynamic, and will not be optimized. This behavior WILL change in the future however, so it should not be relied on.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2606</id>
	<key><![CDATA[Why are trailing commas allowed?]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2607</id>
	<key><![CDATA[Additionally, actually implementing the functions becomes much easier, because even things like if() with bracket notation can use a the same functional style  syntax processor, and the bulk of the work to changing over to functional notation from bracket notation can be left to the compiler, so new language features can easily be added, without having to rework the entire compiler each time.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2608</id>
	<key><![CDATA[If the second usage is actually desired, the following would be required:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2609</id>
	<key><![CDATA[Regardless, this change is still in the future, and may be changed depending on what features actually get added, however, semicolons will be added long before these changes, and will be highly encouraged, then required in all cases in strict mode. Additionally, autoconcat may be removed after this change (in strict mode), and explicit concatenation required. It is unlikely that these shorthand features will be available outside of strict mode, which is an additional reason that strict mode being on is highly encouraged.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2610</id>
	<key><![CDATA[Trailing commas are allowed in all functions, but their primary use is for arrays. Consider the code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2611</id>
	<key><![CDATA[It is worth noting however, that in the rare cases where you absolutely must require the function to be evaluated as if it were dynamic, but you also want to hardcode in a value, you can use the dyn() function. This is meant to be used during testing, to ensure that code is optimized properly, and is not documented in the API, but is available to user code nonetheless.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2612</id>
	<key><![CDATA[As you can see, this ambiguity is only introduced when you have several "operator-like" features in the language; the code shown with only functions is not ambiguous at all,  so until those features are added, it is not necessary to require any sort of statement separator. However, with the addition of a semicolon after the brace, this is no longer ambiguous, and does not require any sort of weird parenthesation anymore:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2613</id>
	<key><![CDATA[As you can see, there is no way for us to completely run this function at compile time, because the user input may vary, so we cannot predict if it will match or not. However, since the regex itself ''is'' hardcoded, we can examine it, and see that it will ''always'' throw an exception.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2614</id>
	<key><![CDATA[Quite simply, they aren't yet needed. Take javascript for instance, it does not have them either. Javascript will however "insert" them for you wherever you have a newline. Eventually, MethodScript will require them in a very few cases, at which point they will be introduced. Additionally, it will be possible to detect when an ambiguous situation is present, and trigger a compile error, instead of using javascript's approach and inferring where the seperators are needed. They will be required once execution of closures via () is added. Consider the following theoretical syntax:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2615</id>
	<key><![CDATA[If you are not familiar with this, consider that this code causes an error at ''compile time'', not ''runtime''.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2616</id>
	<key><![CDATA[Now it becomes less obvious whether or not we meant to do this instead:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2617</id>
	<key><![CDATA[Why are things that are simply warnings in other languages compile errors in MethodScript?]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2618</id>
	<key><![CDATA[Now, if we want to sort the array into alphabetical order, we can just copy the 'd' line, and paste it below the 'c' line, without having to add and remove commas. Because arrays are created using a function, it would require a special condition in the parser to make this an error in other cases, so it was decided to not prevent this in other cases. So, add(1, 2,) is also valid. However, there is logic for detecting ''duplicate'' commas, so add(1, ,2) is a compile error, since this indicates a missing parameter, not the standardization of argument syntax.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2619</id>
	<key><![CDATA[When you boil it down to making everything a function, it becomes much easier to learn for new programmers. The only syntax they have to learn is "function name", "parenthesis", and "arguments", instead of having to learn brace syntax, array syntax operators, etc. This allows for a much easier learning curve, even if it makes for less readable code. Luckily, there is no reason that the code cannot be automatically refactored into using brackets, operators, etc. The compiler internals have to do it one way, it's in fact even easier to go the other way. So eventually, once all the tools are written for it, a new developer will be able to "graduate" to the advanced syntax, and the tools can automatically convert the existing code to the new format.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2620</id>
	<key><![CDATA[Why are bare strings autoconcatenation supported?]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2621</id>
	<key><![CDATA[Generally speaking, this output will be ignored, and so it doesn't really matter that it is concatenated, then ignored. This ''does'' cause a performance hit however, because the sconcat function does take a non-zero amount of time to run, so at some point, this will likely be further optimized, but that requires strict typing first, at which point it can be determined that some of the values in the sconcat are not intended to be sconcated because they are functions that return %s. Alternatively, this feature may just entirely be deprecated except for the ability to auto concatenate literals and variables, but this would only happen in strict mode.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2622</id>
	<key><![CDATA[Bare strings are a holdover from the initial design of CommandHelper; a simple way to specify aliases. This is also why variables have an identifier character, instead of just being a-z characters. For the time being, bare strings are allowed, and likely always will be, but a strict mode has been introduced that fixes most of the problems that come from this. Additionally, there is no reason not to support autoconcatenation. Some languages actually do support this general idea anyways, for instance, C. "Hello " "World" is the equivalent of the MethodScript 'Hello' 'World'. Granted, in C, this only works with string literals, not variables, but the general idea is there. One thing that MethodScript has a distinct lack of is formalized "statements". Consider the code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2623</id>
	<key><![CDATA[Besides making this more readable anyways, neither of these cases are ambiguious anymore, and an error can be raised if a loose parenthetical is used alongside an actual function, and it will only attempt to call the procedure if two loose parentheticals are next to each other.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2624</id>
	<key><![CDATA[There are no good reasons for forcing a function to throw a runtime exception, if it can reliably be determined at compile time that it will always do so. There can be exceptions to this rule only in a very few meta cases, for instance, testing the function's performance in runtime vs compile time, but these reasons are all non-typical, and do not justify the removal of such a feature. So, to this end, functions are able to do optimizations during the compilation process, and even if some of the parameters are variable, if some of them are constant, they are able to go ahead and do some processing on them to see if they are guaranteed to throw an exception at run time, and if so, they go ahead and cause a compiler error. Additionally, this same mechanism is used to fully resolve some functions, if there is no user input, and the function needs no external inputs to do the processing. This speeds up the script at execution time, and even if the code is only run once (say, in interpreter mode) the process will take the same amount of time. So, functions like add() can run during compile time if the numbers to be hard coded are constant.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2625</id>
	<key><![CDATA[Why is everything a function?]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2626</id>
	<key><![CDATA[If you were to wrap all that code in an output, you would actually get "10 5", which is a side effect of the fact that when fully compiled, the code actually looks like this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2627</id>
	<key><![CDATA[However, once we rearrange the whitespace:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2628</id>
	<key><![CDATA[Finally, adding infix operators is more difficult to write a parser for, so the first versions of MethodScript did not support them, however, doing all the operations that the operators provide is essential to even the most basic programs, so they had to be added either way. The initial design opted to make them functions, and so that standard framework could be reused, instead of duplicating code for both approaches, or removing the old approach.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2629</id>
	<key><![CDATA[When written like this, you might assume that the following is intended:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2630</id>
	<key><![CDATA[Why aren't there semicolons?]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2631</id>
	<key><![CDATA[If you are interested in running the dev versions, you can find the latest build at the  [%s Build] site. Dev builds are usually stable, however, should the light  next to the build be red or yellow instead of blue, you should probably a%s that build. In general, you should stay in  the IRC channel ([%s irc.esper.net #CommandHelper]) in case there are  issues, so they can be quickly resolved, and you can be notified of potential problems, and new builds. The website  is for the dev build, so you can have documentation for the newest builds. IRC is the preferred method of bug reporting,  however the forum or dev.bukkit.org are also ok.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2632</id>
	<key><![CDATA[@{NonNull}]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2633</id>
	<key><![CDATA[The annotations that are supported by either the compiler or runtime are listed below, but all of them must implement  GET_SIMPLE_CLASS|.*compiler|CompilerAwareAnnotation to be valid parameter annotations. Each annotation has it's own documentation in the normal API.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2634</id>
	<key><![CDATA[Adding an event]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2635</id>
	<key><![CDATA[Compilation]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2636</id>
	<key><![CDATA[Individual functions have the opportunity to optimize themselves, either by running during compile time (should they have the ability to) and therefore completely removing themselves from the AST, or by simply emitting warnings/errors for whatever conditions they can check for.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2637</id>
	<key><![CDATA[Once initial code compilation has occurred, linking happens. Since the linking process happens after control structures have been analysed, this allows for "meta programming" using existing control structures familiar to the coder. In addition to the ${} compiler directive statements, this allows for meta programming to be accomplished much in the same way C++ provides #define, #ifdef, and other preprocessor directives, but there is no way for the user to go beyond the intended cases of simple function substitution, for instance, conditionally #ifdefing out a closing bracket. This is because this substitution occurs AFTER the lexer runs, not before it, as happens in C++.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2638</id>
	<key><![CDATA[Restrictions work like parameter annotations in Java, for instance, if you had the following method signature in Java:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2639</id>
	<key><![CDATA[@{Ranged}]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2640</id>
	<key><![CDATA[Parameters tagged with this cannot be assigned %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2641</id>
	<key><![CDATA[Adding an event is only slightly more complicated than adding a function, though the addition of platform specific abstraction layers may complicate the process some, both for events and functions. In general, adding an event only requires two steps, though in practice it may require additions in several places. The first step is to provide the event object via implementing  (or extending ) and tagging it with @api. The second step is to actually hook into whatever system there is for actually triggering the events, and calling  TriggerListener method, with the event name and event driver, and the actual event object that it will process. This method will then find all the user bound events, and decide if they actually need to be triggered, then call the appropriate methods in the Event object.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2642</id>
	<key><![CDATA[Restrictions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2643</id>
	<key><![CDATA[Each function has embedded java doc and type information. This is extremely important to keep accurate, both for the sake of the user, and for a technical need. The docs() method should return the plain text user readable documentation, which summarizes the  behavior of the function. This information isn't used programmatically in any way by the compiler, but it is used of course by the users, and should accurately reflect the behavior of the function. Previously, the docs() method needed to return a string in the format %sreturnType {argumentList} documentation%s, however, this is no longer necessary, since the return type and argument list are used programmatically elsewhere, and therefore specified in different methods.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2644</id>
	<key><![CDATA[The commonality between all implementations of MethodScript is limited to the core functions including procedure related functions, exception related functions, control flow related functions, basic logic and operator functions, object creation related functions, and data handling functions. All implementations must accept that the compiler will use the default implementation of all these functions during compilation, for static code analysis. Most of these functions are deeply integrated with the compiler anyways, and cannot be generically separated from the compilation process regardless.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2645</id>
	<key><![CDATA[Adding a function]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2646</id>
	<key><![CDATA[Lexing is a standard process that converts the source code into a token stream. This process follows fairly standard algorithms, and uses a generic mechanism to add new tokens easily. This mechanism could potentially be dynamically expanded per platform, should the need arise.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2647</id>
	<key><![CDATA[Documentation and argument builder]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2648</id>
	<key><![CDATA[The parameter "y" is tagged with the @Annotation tag, which may provide meta information to some reflective library. In MethodScript, the MAnnotations available in Java will eventually be available to scripts, but in the meantime, they are only available to built in functions. Regardless, the parameter restrictions will all work the same, they work to reduce the effort required to checking rote aspects of the parameter, and provide a way for the runtime to generically handle those cases. Additionally, the compiler is aware of many of these annotations, and where possible, will provide the same functionality, but at compile time, where possible, allowing errors to be caught more quickly.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2649</id>
	<key><![CDATA[The factors that can further complicate this are the fact that you will likely be using abstract event handlers for all of the actual event objects, and that some events are not as straightforward to modify. These pain points will hopefully be corrected in the future.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2650</id>
	<key><![CDATA[This page is intended for developers of the backend MethodScript engine, not for assistance with writing scripts in MethodScript. Before beginning development with MethodScript, you should have a firm grasp of Java, including concepts like inheritance, abstraction, reflection, annotations, generics, etc. Additionally, you should have a firm grasp of how the language itself works, from the scripting perspective.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2651</id>
	<key><![CDATA[The new argument builder greatly simplifies argument parsing, by providing generic type safety, range, and other compile time and runtime checks. This also provides the advantage of putting the documentation right next to the elements, and creating more documentation from the elements themselves, instead of relying on the programmer to provide the data correctly. This makes it so that if the documentation doesn't list a restriction, for instance, but the restriction being missing is a bug, then the bug will be in both the documentation AND the code, and will therefore be much easier to catch. Besides restrictions, which are discussed below, the biggest thing this provides is type safety. Until strong typing is fully supported, the system will be mostly a runtime-only check, though hard coded values that are incorrect will be able to be caught at runtime. Generics are also supported,  and are required for return types that return closures and arrays, and eventually all parameters that are closures or arrays. These restrictions will be caught via unit test, as Java has no way to make this a compile error. Additionally, several restrictions (used as MAnnotations) may be added, which will provide runtime checks on the data passed in, or will check at compile time if possible. These restrictions are built in to the typing system, and ensure that the data passed in with be within those restrictions, whether they were checked at runtime or compile time. Using the new argument builder itself is optional. Providing the return type and arguments with the returnType() and arguments() methods is not optional, but using it to re-parse the data is. The way it works is that the function's arguments list is retrieved by the typing system once, to verify the arguments, using generic algorithms. The function itself can then use the builder to cast the data into the correct types, which is guaranteed to succeed at that point (barring programmer error, which will cause an Error to be thrown), and the code after that can safely assert that the restrictions placed on the parameters is true. However, if the code itself duplicates these checks, or manually casts the values, that will continue to work, since the raw arguments are passed in to the function as is. However, new code is strongly advised to use the builder, since eventually, backwards compatibility may be broken, and the parameters may not be passed in except as a list. Additionally, if the code simply requires the arguments to be processed manually, it is a sign that the arguments themselves are too complicated, and should be simplified.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2652</id>
	<key><![CDATA[Parameters tagged with this must be between a given range. There is the option of setting the limits to be either inclusive or exclusive.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2653</id>
	<key><![CDATA[Adding a function is simple. Create a new class that implements  , (or more probably extends  and tag it with @api. It is important to read and be very familiar with the methods in , so you know which methods that are optional should be overridden.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2654</id>
	<key><![CDATA[In general, the compiler works under the assumption that the end runtime is unknown. When compilation is initialized, only a few key functions are strictly required to be "core" functions. That is, they MUST have the same implementation in all implementations. Once the Abstract Syntax Tree (AST) is created in memory, it is then linked to a particular platform, which can then be either used as an in-memory binary, or can be cross compiled to something else.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2655</id>
	<key><![CDATA[Abstraction]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2656</id>
	<key><![CDATA[The returnType() method should return an , using the "nameless" constructor of the Argument class. This simply provides the documentation and return type of the function, no "name" is needed. There is a pre-constructed Argument.VOID object that should be used in the case where the function returns %s. Additionally, there are a few low level functions that cause execution to terminate in a non standard way, for instance, the die() method, or return(). These must use the Argument.NONE member, and should also likely provide the .TERMINAL optimization.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2657</id>
	<key><![CDATA[The arguments() method returns the function's signature. For some functions, this will be quite complex, for others, it should be straightforward. By design, no arguments are passed to this method, because all arguments (and their defaults) should be constant, and should never vary based on runtime parameters. (This complicates the design, but more importantly prevents  certain optimizations from occurring.) Functions may have multiple signatures, that is, completely conflicting signature types, though this behavior is only provided for backwards compatibility, and should not be used for new functions. Disjoint types are recommended instead, or general simplification of the function instead. See the methods in the   class for more information on the various options available when creating arguments, and  for information about the ArgumentBuilder as a whole.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2658</id>
	<key><![CDATA[Parameters tagged with this must match a regex. It is only taggable on CStrings.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2659</id>
	<key><![CDATA[There are 3 distinct stages during compilation. Lexing, Compiling, and Optimizing/Linking.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2660</id>
	<key><![CDATA[Optimizing/Linking]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2661</id>
	<key><![CDATA[Optimization of the core functions occurs before linking, so actually this step can be thought of as optimization/linking/optimization. By optimizing the core functions however, we generally only ''remove'' code from the AST. Some data transformations do occur, but most of the core functions do not "run" at that time. Once the initial optimization happens, we link to the actual runtime requested, by passing control to the individual functions that are linked to that particular runtime. In combination with the environment, the platform is able to perform whatever actions it needs to complete the process with the generic compiler, while still custom tailoring the output to suit that particular platform.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2662</id>
	<key><![CDATA[Compilation converts the token stream into a Abstract Syntax Tree (AST). This step can emit only a few errors, (mostly mismatched parenthesis/braces) because the  lexer will have already halted if the syntax is wrong, and the optimizer is what  actually causes linking errors. The compiler is a typical recursive decent parser, only it offloads the complexity of the infix notation parsing to the __autoconcat__ function, which runs separately later, during optimization.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2663</id>
	<key><![CDATA[Using the new argument builder]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2664</id>
	<key><![CDATA[@{FormatString}]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2665</id>
	<key><![CDATA[The above code will cause a compile time error, indicating that the SUNDAY enum was not provided for. This provides for better error checking, in the case where each enum should have definite handling code, and is subject to new enum values being added in the future, instead of a generic handler that throws a runtime exception.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2666</id>
	<key><![CDATA[The default implementation of mask() looks like this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2667</id>
	<key><![CDATA[Often times you may find yourself with a unique set of predefined constants, for instance,  compass directions NORTH, SOUTH, EAST, and WEST, or days of the week. Additionally, you may have a set of these enums, which can be represented as a bit mask. For these two situations, you should use the ''enum'' and ''mask'' types, respectively.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2668</id>
	<key><![CDATA[However, you may override this to return a different value, depending on the circumstances. Do note however, that overriding this method incurs a performance penalty, because you could dynamically change the mask values, when fromInt is called, it will not cache the mask values for your enum, like it will for the default.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2669</id>
	<key><![CDATA[Use of enum constants sometimes have special type inference. If the compiler can definitely determine the enum to use, the class name can be left off. So, if the procedure _func() is defined as such: %sproc _func(Compass @direction, ...)%s Then both %s_func(Compass::NORTH)%s and %s_func(NORTH)%s are acceptable. This is only possible when the declared type is a concrete enum type, and not the Enum or mixed superclasses. Additionally, auto string types are cross castable to an enum, so %s_func('NORTH')%s is also valid.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2670</id>
	<key><![CDATA[Often times, you have a switch statement, which you need to be sure to update, if a new value is added. For this, you may use the %s function. This function requires that all enum constants have a case, and no default may be used.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2671</id>
	<key><![CDATA[All enums inherit a few static methods from the enum superclass as well, the most important being valueOf() and values(). valueOf() converts a string to the corresponding enum, and values() returns an array of all enum values in the enum.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2672</id>
	<key><![CDATA[An enum is a specially declared class, which follows certain extra rules, but otherwise behaves just like a normal class. It may have data members and methods, just like any other class. The exceptions are that the class is effectively final (it cannot be extended by other classes/enums),  and the constructor, if provided, must be private. The default constructor for enum values are private as well. Essentially, there must be no way to instantiate the enum object outside of the context of the enum itself, and it can't be overridden. To declare a simple enum, use the following syntax:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2673</id>
	<key><![CDATA[The enum values are considered as if they are %spublic static final Day%s members of the class Day. Therefore, you cannot have member variables with the same name as the enum. To use the enum value, you would use it the same as any other static member:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2674</id>
	<key><![CDATA[Enum Types]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2675</id>
	<key><![CDATA[Mask implements Set, so all the operations available with a Set are also available to the Mask, but of note are two extra methods, toInt(), and the static fromInt().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2676</id>
	<key><![CDATA[An enum mask is used when you could have a set of enums. The Mask class provides methods for converting a set of enums to an integer, and vice versa. Enums that have 64 or less enums may be used as a mask. The default integer mask value of each enum is based on the ordinal value, 2 ** ordinal. However, this default may be changed by overriding the mask() method, and returning whatever integer value you like. It is worth noting that changing existing enum order (besides simply renaming them) causes any old integer masks to be incompatible with the new versions. To use a mask, you must use Mask's static method create(), and provide the enum class, if it can't be inferred.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2677</id>
	<key><![CDATA[To see if an enum value is in the mask, use contains().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2678</id>
	<key><![CDATA[You may also have more complicated enum class definitions, and you may implement interfaces as well. If a constructor is provided, it must be private, but otherwise is acceptable. The special constructor syntax is demonstrated in the example below as well. As you can see, each parameter is passed in separately for each enum, so getInfo() for each one would return different data.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2679</id>
	<key><![CDATA[Note that there is no "@" symbol here, even though they in some ways act like a member variable. By convention, the names of enum values are all caps, with words separated by underscores, but this is not enforced. Enums can be %s'd over, as such:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2680</id>
	<key><![CDATA[Mask Types]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2681</id>
	<key><![CDATA[Running inside an event handler]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2682</id>
	<key><![CDATA[@event['location']: The (x, y, z, world) location of the block they clicked]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2683</id>
	<key><![CDATA[set_timeout%s allows you to wait x seconds, then run some code. %sset_interval%s allows you to run  some code every x seconds. Much the same way %sbind%s works, a unique id is returned that represents this  interval or timeout's closure, and you may %sunbind%s the interval or timeout. If you need to know the the id  of the event, you may also force an id on the event, subject to the same restrictions as %sbind%s's  restrictions on ids. These functions are much like Javascript's setInterval and setTimeout functions if you are familiar  with that language, and in fact are modeled after it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2684</id>
	<key><![CDATA[Event handlers (the code inside a %sbind%s) are fired off in order from highest to lowest, then monitor. All  CommandHelper events are cancellable; that is to say that if an event is cancelled, a flag is set and  %s will return true, and if the underlying minecraft event is also cancellable, it will also be  cancelled. To cancel an event, call %scancel([state])%s in your code. The rest of your code will continue  running, so if you need to stop after cancelling, you should %sreturn()%s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2685</id>
	<key><![CDATA[The rest of the data in the event is dependent on the event type, and this information can be looked up in the event  table.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2686</id>
	<key><![CDATA[Highest: Highest level handlers receive the event first. Handlers that need to have absolute say about the event should register at this level.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2687</id>
	<key><![CDATA[Events have the same type of scope as functions, i.e. only variables passed in are assigned. This is what the custom  params are for. If you need to have these values passed in to the event, you may do that with these extra parameters.  The values are copied over ''at bind time'', not at event run time. Though the values in the variables may be changed  during the execution of the script, they are reset to the bind time values each time the function is triggered. Using  %s and %s is a good way to get data in and out of the event handlers, if needed,  though you may consider redesigning if you're doing it this way, because there is likely a simpler way.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2688</id>
	<key><![CDATA[Any values %sed from the code are ignored, but will cause the event handler to stop running, which can  be a convenient way to stop the handler short.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2689</id>
	<key><![CDATA[Lowest: Lowest priority handlers should expect to not be able to edit parameters, or even run, but should instead be a "default" occurrence, should nothing else choose to deal with this event.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2690</id>
	<key><![CDATA[Manually Triggering Events]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2691</id>
	<key><![CDATA[Handler priorities are handled as such: Suppose we have three events registered, at high, low, and lowest. The handler  at high gets the event first. The handler is free to modify event parameters, which will then be passed to the low  priority handler, which is then allowed to further modify the event as required, and then it is passed on further to the  lowest priority handler, which is also free to edit the event parameters. Finally, the monitor level handlers are  allowed to see a read-only version of the event. This chain can be modified in two ways. First, a handler may call  %s on an event, which will cause calls to %smodify_event%s by lower priority handlers to fail.  Events essentially become read only at that point, however handlers may still react otherwise. In addition, parameters  may be sent to %slock()%s, which will only lock the specified event parameters, leaving the rest of the  parameters freely editable by lower priority handlers. The second option a higher priority handler has, is to  %s an event. If an event is consumed, it is not even passed to lower priority handlers (except  monitor). This will prevent lower priority events from even seeing the event in the first place.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2692</id>
	<key><![CDATA[@event['block']: The id of the block they clicked, or 0 if they clicked the air. If they clicked the air, neither facing or location will be present.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2693</id>
	<key><![CDATA[If you are having trouble getting a script to do what you want, especially if you have many scripts running, it may be  helpful to use some of the debugging tools at your disposal. %s will print out all the currently  bound events, including their exact location in your script, so you can easily refer to it. Also, if you need to get  meta information at runtime, you can use the following code snippet:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2694</id>
	<key><![CDATA["macrotype" - This determines what kind of data there will be in the rest of the event]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2695</id>
	<key><![CDATA[Unregistering an Event]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2696</id>
	<key><![CDATA[In the case where we assign our own id, so that we can persist, or otherwise always know what our event's id is, we can  use the following syntax]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2697</id>
	<key><![CDATA[To register an event, use the %s function. Let's take a look at the function's signature:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2698</id>
	<key><![CDATA[Example]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2699</id>
	<key><![CDATA[High: Handlers that play an important role, but don't need absolute say over an event should register as a high priority handler.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2700</id>
	<key><![CDATA[In order to initially register an event, you must include a hook inside a "main" function. Upon server startup, any  script in main.ms will be run. This should be used as an opportunity to register your initial hooks. Now, this doesn't  prevent you from registering a hook elsewhere in a script, but for the common case, you'll want to put your hooks in  here. You can also use this opportunity to do other things, perhaps writing out to the console or something, but  typically only event registrations will be in here. This does work as a "server start" event, but it gets re-run  whenever you /reloadaliases also.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2701</id>
	<key><![CDATA[Normal: Normal priority handlers intend on being run as they expect, but there would be not be a big loss if they weren't able to run as intended.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2702</id>
	<key><![CDATA[Registering an Event]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2703</id>
	<key><![CDATA[Monitor: Monitor level handlers receive the event last, and cannot edit the event in any way. This should be used for logging type handlers. In general, if the handler hooks in to game functionality (even if it doesn't intend on modifying the event) it should register at Lowest or Low. The exception to this is if a handler wants to get the event even if it is cancelled or consumed, at which point it is appropriate to use monitor. Monitor level handlers still receive cancelled and consumed events, and can check the status of those flags with the %sis_cancelled()%s and %sis_consumed()%s functions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2704</id>
	<key><![CDATA[player_interact:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2705</id>
	<key><![CDATA[@event['facing']: The (lowercase) face of the block they clicked.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2706</id>
	<key><![CDATA[Low: Handlers that don't need to run at all, but would like to be able to edit and see at least some events should register at low priority.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2707</id>
	<key><![CDATA[Return]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2708</id>
	<key><![CDATA[So, what's going on here? @event contains the event data. It is an associative array that contains at least the  following information:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2709</id>
	<key><![CDATA[Each event returns some piece of data that uniquely identifies this registration. To unregister an event, you need to  know this data (i.e., store it in a variable). This data is not guaranteed to be unique across reloads of the server  however, so persisting it across reloads doesn't make sense. If you need to always know what the event id is, you can  force a particular id on the event. This id must be unique across all events. To ensure the data is unique compared to  automatically generated event ids, you may not register an id with the following syntax: "string:int". This formatting  is enforced by the function. To unregister the handler, use the %s function. Let's look at actual code  to more clearly see usage.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2710</id>
	<key><![CDATA[So, what is the purpose of all this complexity in handler priorities? When handlers fight, things can get messy, and  simply having 5 or 6 priority levels isn't usually enough flexibility to specify the desired behavior. For instance,  if a handler absolutely needs to read the original value of an event parameter and act on the event externally, but only  trigger something else as long as some other parameter is some value upon it actually triggering, this would be  impossible without the callbacks. Or if a handler wants to act on some event, and other events also acting on it would  cause issues, it can consume the event, and not have to worry about undesired behavior. This is why choosing a priority  is important, and the priority you choose should be based on the following guidelines:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2711</id>
	<key><![CDATA[Order of events]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2712</id>
	<key><![CDATA[Debugging]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2713</id>
	<key><![CDATA[Sometimes it may be desirable to manually trigger an event. Each event has it's own requirements for exactly what is  required to fire it, but all the events use the %s function. The exact requirements can be found in  the documentation with the event in the Event API.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2714</id>
	<key><![CDATA[In addition, an event may unregister itself from within the handler by running %sunbind()%s without any  arguments. This will cause the handler to no longer run, but it will finish running this last time. This is useful for  onetime event handlers, perhaps if the event was registered in a command.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2715</id>
	<key><![CDATA[The context of events are sometimes different than when a command is run. For instance, in a mob spawn event, no player  is involved, so %s will return %s. For player based events however, player() does return the player  that triggered the event.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2716</id>
	<key><![CDATA[@event['player']: The player associated with this event]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2717</id>
	<key><![CDATA["type" - The event type. Normally you've already got this data, because you registered it, however, wildcard events may be possible in the future.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2718</id>
	<key><![CDATA[In the event that two or more handlers register at the same priority, other handlers will receive the event even if it  is consumed (however, they can not cause it to stop being consumed) and they can still modify the event parameters  (though they cannot "unlock" the event for lower priority handlers). The order that handlers fire in within priorities  is determined by bind order.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2719</id>
	<key><![CDATA[So, what happens? If the player left clicks a block, it will tell them the block id they just clicked. Not terribly  useful by itself, but that should give you an idea of how events work in general.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2720</id>
	<key><![CDATA[If you note, this looks very similar to the %s function. In essence, it's basically the same, except  CommandHelper is responsible for calling the function, when the specified event occurs, not you. The options object  allows you to set certain options for this event, including setting a custom event id, and event priority. The prefilter  allows you to tell the event handler to pre-filter which events are intercepted (Prefilters are a more complicated  subject, and have their own [[%s|page]]). Both the options parameter and the prefilter  parameter may be %s. The information in the @event_object depends on the event. Each event sends different parameters.  Finally, the custom params are discussed below in the scope section. So, let's look at the %splayer_interact%s  event, which occurs whenever the player left or right clicks a block or the air, and show a few use cases. First, we  need to know the event's signature though, which can be looked up in the [[%s|Event API]].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2721</id>
	<key><![CDATA[@event['action']: One of either: left_click_block, right_click_block, left_click_air, or right_click_air]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2722</id>
	<key><![CDATA[Event handling allows users to register MScripts to be triggered in many other places, not just on a command. This  expands the usefulness of CommandHelper to the point where it is roughly equivalent to any other plugin that can be  written for Minecraft.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2723</id>
	<key><![CDATA[main.ms]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2724</id>
	<key><![CDATA[Because the event handler is registered at monitor level, it will run last, and it will print out meta information about  the active event, including information about what handlers received, locked, consumed, modified, or cancelled events.  Because logging information for %s does use marginally more resources, history is only logged if  debug mode is on (this can be set in preferences.txt).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2725</id>
	<key><![CDATA[If code within a catch block either rethrows the caught exception, or--accidentally or intentionally--ends up throwing a new one.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2726</id>
	<key><![CDATA[Exception types can be added by extension authors, but here is a list (and documentation) for all known exceptions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2727</id>
	<key><![CDATA[You may find that you have to throw an exception due to another exception. To do this, you may also used the Caused By mechanism. This will cause the exception to chain. This is also supported with %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2728</id>
	<key><![CDATA[Old usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2729</id>
	<key><![CDATA[This can be used if you want to conditionally handle the exception, but continue to throw the exception up the chain in other cases.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2730</id>
	<key><![CDATA[You may also throw your own exceptions. See the documentation for %s for more information.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2731</id>
	<key><![CDATA[In this case, if the user input procedure returns %s'2'%s, then the code will work as intended. If it returns %s'string'%s however, it will throw an exception. As it stands, with no exception handling in place, you would see a similar error to this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2732</id>
	<key><![CDATA[If the code within the `try` block encounters an exception for which there is no catch.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2733</id>
	<key><![CDATA[finally clause]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2734</id>
	<key><![CDATA[Exceptions can be thrown by various functions at runtime. This indicates that there was some issue with the input data. There is a straightforward way to deal with these errors however, using a try/catch block.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2735</id>
	<key><![CDATA[Take the following examples:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2736</id>
	<key><![CDATA[The exception that is thrown is an associative array that has some perhaps useful information in it, such as the exception message, line number, and things like that. Here is an implementation of the default handling, except it is being handled from within the script.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2737</id>
	<key><![CDATA[The stack trace can help you trace back the actual error, as the error itself is not necessarily with the top line in the stacktrace, which is where the actual exception was thrown. Instead, it might be because you're passing in an invalid paramter to a proc, so it may be useful to step back a few items in the stack trace to see what's calling what. Several things are added to the stack trace, particularly procedure stack, but also closures and includes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2738</id>
	<key><![CDATA[There are three specific examples that this might be useful for:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2739</id>
	<key><![CDATA[Known Exception Types]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2740</id>
	<key><![CDATA[A good example is code that takes a user input. Assume that we want to validate that the user has provided us with an integer like string. We might write the following:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2741</id>
	<key><![CDATA[This can be useful for times that you need to throw another exception from within the catch block, but don't want to hide the original exception, or when you need to otherwise wrap the original exception. It is quite useful to know what exception originally caused this chain. This can be accessed from the %scausedBy%s index in the exception object.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2742</id>
	<key><![CDATA[Caused By, and rethrowing]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2743</id>
	<key><![CDATA[Sometimes you may want to run code after the try block, regardless of what happens in the try block, including successful invocation of the code, an exception being thrown and further exceptions being thrown from the catch block, or simply return()ing in the try block. The finally clause can be used to accomplish this. The finally clause must come after all catch clauses, but may be used even if no catch clauses are defined (this is called a try/finally block). This is most useful for cleanup that needs to happen regardless of how the code exited.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2744</id>
	<key><![CDATA[Throwing your own exceptions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2745</id>
	<key><![CDATA[Exceptions might need to be rethrown. This is supported by %s. For instance:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2746</id>
	<key><![CDATA[All exceptions extend the Exception type, which further extends the Throwable type. Another type of Throwable is a the Error type (and subclasses). If you specifically catch Errors, they can be caught, but this is not recommended, as it usually indicates a very severe error. While it is possible to directly catch a Throwable of any type, you should generally not catch that, and instead catch specific types that you are interested in, or Exception, if need be.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2747</id>
	<key><![CDATA[This is the default exception handling mechanism. It prints out the exception type, exception message, and a stacktrace. But perhaps we want to print a custom message to the user. In this case, we can trap the exception using a try/catch block, and handle it in a custom way. In this case, we want to "catch" the CastException that is "thrown".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2748</id>
	<key><![CDATA[There is an old, now deprecated usage as well, see the article [[%s|here]] for information on how to use it. For new code, however, the new format should always be used.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2749</id>
	<key><![CDATA[If code within the `try` block exits via `return`]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2750</id>
	<key><![CDATA[When an exception is thrown, the catch clauses are checked one by one, in declaration order, for exception matches. This means that you should order your catch clauses from most specific to least specific. Consider the following code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2751</id>
	<key><![CDATA[Sometimes, a block of code might throw multiple types of exceptions, and we want to handle each type differently. Perhaps our %s_doSomethingWithTheValue%s procedure was capable of throwing an IOException. We ''could'' wrap the entire block in a second try catch block, but there's an easier way, using multicatch.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2752</id>
	<key><![CDATA[The Throwable type]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2753</id>
	<key><![CDATA[The above example demonstrates the complex usage of the exception object. In addition, it's worth noting that if you are having trouble with code, you could get a stacktrace by throwing and catching a custom exception, however, it's more straightforward to use]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2754</id>
	<key><![CDATA[Each catch block will only run if the exception thrown matches the type. If an exception is thrown that doesn't match any of the types, it will continue up the stack as if there were no try/catch in place at that point.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2755</id>
	<key><![CDATA[The exception object]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2756</id>
	<key><![CDATA[Catch clause specificity]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2757</id>
	<key><![CDATA[This will message the user if the value is not correct, using a custom error message.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2758</id>
	<key><![CDATA[Be sure to always order your catch clauses appropriately.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2759</id>
	<key><![CDATA[Multicatch]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2760</id>
	<key><![CDATA[The queue works like a doubly ended queue. There are other operations to control this queue, with a few caveats. Once an  operation has been submitted for execution, it cannot be cancelled anymore, and operations are always pulled from the  front of the queue. You can use these other methods to control the queue:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2761</id>
	<key><![CDATA[Basic Queue Usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2762</id>
	<key><![CDATA[The most basic operation is the %s function. This pushes a new routine at the end of the queue.  For instance:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2763</id>
	<key><![CDATA[Other Queue Operations]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2764</id>
	<key><![CDATA[To make a new queue, just use a new name, it will be created automatically.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2765</id>
	<key><![CDATA[This example splits a loop up into many smaller chunks, which should cause the server to not freeze]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2766</id>
	<key><![CDATA[Queing up the operations should complete relatively fast, but the full task will take a while.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2767</id>
	<key><![CDATA[Delays can be inserted into a queue as well. This delay will suspend the queue's operation momentarily, but will not  freeze the server, since the delay will be on the execution queue's thread, not the server thread. This is a seperate  operation, and uses the %s function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2768</id>
	<key><![CDATA[Queue Names]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2769</id>
	<key><![CDATA[would be valid. This will run the code %smsg('Hello World!')%s at the next available opportunity, after other  queued operations occur. Each time the queue runs an operation, it frees the server thread back up, so this is a useful mechanism for scheduling  extremely long running tasks, without killing the server. Any value returned from the closure is ignored however, so it is not useful for things that need to  block. Note that between operation executions, there will likely be around a 10ms delay, while control of the main  thread is re-gained, and a 50ms delay between noticeable ticks. This makes the system undesirable for fluid animations, however, this is not a limitation of MethodScript itself.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2770</id>
	<key><![CDATA[Works like queue_delay(), but pushes the delay on the front of the queue]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2771</id>
	<key><![CDATA[Removes the last operation on the queue.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2772</id>
	<key><![CDATA[Removes the operation on the queue that would be running next]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2773</id>
	<key><![CDATA[Instead of pushing an operation onto the back of the queue, pushes it to the front. Barring other calls to queue_push_front, that means that this operation will execute next.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2774</id>
	<key><![CDATA[There can be multiple queues. Each queue is simply named something, with the default queue being "default". Operations  across queues are not executed in any particular order with respect to each other, but within each queue, operations are  guaranteed to be sequential. Each queue function takes an optional parameter which specifies the queue name.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2775</id>
	<key><![CDATA[Clears all pending operations from the queue]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2776</id>
	<key><![CDATA[Delays]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2777</id>
	<key><![CDATA[Returns true if a queue is currently running]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2778</id>
	<key><![CDATA[An execution queue is a queue of closures, which are queued up to be run in sequence by the engine. Unlike set_timeout  and set_interval, there is no time component, it's simply a queue of operations to execute sequentially. There can be  multiple execution queues as well, though there is a single default queue. The general idea is that queueing up a  closure is instant. All the queue operations return immediately, and the closure is run at a later time. Delays and  queue management functions are all provided to make doing complex operations possible.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2779</id>
	<key><![CDATA[However, one should be able to use the annotated extension points as wrappers for the true code, which would reside  in a different class.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2780</id>
	<key><![CDATA[The actual extension point, which converts the bindable object into a MethodScript enabled event, with supporting methods.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2781</id>
	<key><![CDATA[The lifecycle class is the central part of the extension and does two things:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2782</id>
	<key><![CDATA[Please include the following snippit under the %s&lt;build&gt;&lt;plugins&gt;%s section in the project's pom:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2783</id>
	<key><![CDATA[Facilitate lifecycle operations, such as system events, utility methods, etc.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2784</id>
	<key><![CDATA[The class name given by the definition doesn't matter, but does assist with debugging in case of a stacktrace. See the source code of %sAbstractExtension%s for the full set of methods available to this class.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2785</id>
	<key><![CDATA[The actual extension point is laid out as follows:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2786</id>
	<key><![CDATA[The bindable event layout is simply a class that extends %sBindableEvent%s, with one override, %s_GetObject()%s. If wrapping a Bukkit event, the Bukkit event should be returned here, given that the %sBindableEvent%s instance has been instantiated/provide with one. Otherwise, just return %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2787</id>
	<key><![CDATA[Notice that the event classes extend %sAbstractEvent%s. As one can see, the layout is very similar to that of functions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2788</id>
	<key><![CDATA[Obfuscation/ProGuard]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2789</id>
	<key><![CDATA[The actual call to fire the event.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2790</id>
	<key><![CDATA[Events can be triggered from anywhere, with a call to %sEventUtils.TriggerListener(Driver.EXTENSION, &lt;event name&gt;, &lt;event instance&gt;);%s. The event name given must be the same as given in the event that has been defined, and the event instance an instance of that event.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2791</id>
	<key><![CDATA[LifeCycles]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2792</id>
	<key><![CDATA[Events, which add new events that MethodScript can use, and]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2793</id>
	<key><![CDATA[To prevent issues in the future, here are a few rules you should follow when creating functions and events:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2794</id>
	<key><![CDATA[Extensions provide a means of adding functionality to CommandHelper and the MethodScript engine. While the API used is under construction still, it is still deemed stable enough for production use. Any breakages will be minimal, and deprecation will be used where it applies.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2795</id>
	<key><![CDATA[Provide identity to the extension.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2796</id>
	<key><![CDATA[Names of functions/events should be all lowercase and use underscores as spaces. The function name may NOT start with a single underscore, and functions that start with two underscores are highly discouraged, except for meta functions that deal with the compiler directly. Documentation should follow the same conventions, so that functions like %s will work. The version that you return does not need to correspond to the MethodScript version, it may be your extension's version number. If your function can be optimized, you are encouraged to do so.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2797</id>
	<key><![CDATA[The minimal definition is as follows:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2798</id>
	<key><![CDATA[Our build and dependency manager of choice is maven. While a quick and dirty setup with a bare-minimal pom is possible, run-time speedups and compile-time checks will be missed out on if a few details aren't included.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2799</id>
	<key><![CDATA[The lifecycle class, which takes care of the life and identity of the extension.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2800</id>
	<key><![CDATA[Coding Standards]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2801</id>
	<key><![CDATA[Functions, which add new functionality to MethodScript.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2802</id>
	<key><![CDATA[Functions will usually be the first thing a simpler extension will be used for. Usually, functions are "wrapped" in a parent class, which provides general documentation for that group of functions. The full class definition for functions is as follows:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2803</id>
	<key><![CDATA[Developing an extension]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2804</id>
	<key><![CDATA[The bindable object, which acts as a wrapper or data carrier for the event. This will be a POJO with methods to get the data needed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2805</id>
	<key><![CDATA[Some extension devs have expressed a desire to obfuscate their code. Unfortunately, there's a gotcha: the caching  system we use runs before ProGuard obfuscates things, causing the original class names to be saved to the cache  instead of the obfuscated ones. The only way currently known to get around this is to tell ProGuard to not obfuscate  any of the extension points (lifecycle, function or event classes), via the %s-keep class%s option in the  plugin's %sconfiguration%s section.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2806</id>
	<key><![CDATA[Events are a three part thing:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2807</id>
	<key><![CDATA[An extension currently consists of three core parts:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2808</id>
	<key><![CDATA[Common Errors]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2809</id>
	<key><![CDATA[Dev builds, Bug reporting, Releases]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2810</id>
	<key><![CDATA[This page lists several frequently asked questions, with a quick, succinct answer, and links to further resources on the  topic, if applicable.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2811</id>
	<key><![CDATA[Persistance]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2812</id>
	<key><![CDATA[The Federation system allows for easy, and secure execution of code on remote systems. Usage consists of two steps for the client, and one step for the server.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2813</id>
	<key><![CDATA["MethodScript process" - refers to the process that is running a MethodScript  interpreter. This might be a server that is hosting the MethodScript process, a cmdline process, or some other system.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2814</id>
	<key><![CDATA["Client" - refers to a Federated client. All MethodScript processes can  simultaneously be both a server and a client.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2815</id>
	<key><![CDATA[TODO: Finish writing the general examples]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2816</id>
	<key><![CDATA[Server Setup]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2817</id>
	<key><![CDATA[All MethodScript processes support Federation, even cmdline programs, which allows for easy access to a MethodScript process from other sources. The Federation protocol is even straightforward enough that third party systems could be made to interface with a Federated server.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2818</id>
	<key><![CDATA["Server" - refers to a Federated server, not the server that is running the MethodScript process.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2819</id>
	<key><![CDATA[For the purposes of this article, the following definitions are used:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2820</id>
	<key><![CDATA["Federation Protocol" - the protocol via with Federated Systems communicate. All Federated Systems must use standard TCP Sockets, though they are allowed to fall back to other communication systems if the server and client can agree on the communication medium. For those interested in implementing the protocol, or generally learning more about the specifics of the protocol, see the   of the protocol.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2821</id>
	<key><![CDATA[Allowing a remote process to execute code can be a huge security risk, and so setting up the server is the most important aspect of the Federation system.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2822</id>
	<key><![CDATA["Federated System" - any system that is either a server or a client, and knows the Federation Protocol. Third party tools, so long as they properly implement the Federation Protocol are considered a Federation System.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2823</id>
	<key><![CDATA[Slave Server Protocol]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2824</id>
	<key><![CDATA[Once the client has determined the correct slave port, either by making a request to the master server, or finding it itself it if it is a local request, it can then move on to step 2 of connecting, making a connection to the slave server.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2825</id>
	<key><![CDATA[Connection Security]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2826</id>
	<key><![CDATA[A client request to the master server simply requests the port that the slave server is on. This is required, since the request may come in from an outside host, that wouldn't have access to the file system. The master server looks up the requested server in the registry, reports the port, and kills the socket.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2827</id>
	<key><![CDATA[The first thing that should be sent is the entire script. It may be pre-compiled and optimized, or not, but the server will first compile the script locally, and verify that it does in fact compile. If the script did compile successfully, the server will respond with the string "SCRIPT OK". If the script did not compile, it will respond with the string "COMPILE ERROR", followed by the string error message that describes the compile error, at which point the server will then again be listening for a command. If the script was ok, the client should then send the variable list, serialized as a json string. The values in the variables should be serialized using the standard construct serialization mechanism. The server will then build the appropriate data structures from the data, and execute the script on that system. If an exception was generated during execution of the script, the server will respond with the string "EXCEPTION", followed by the json string exception object, which will be the serialized form of the exception. If no exception was generated, then the string "OK" will be written, followed by the json construct serialization of the return value of the construct. If the construct did not return anything, or returned %s, an empty string is written.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2828</id>
	<key><![CDATA[The IP address will be checked to ensure that the IP the client is connecting from is allowed. If it is, the server will write the string "IP OK", and the connection will proceed. If not, the server will write the string "IP BAD" followed by the string error message, then it will disconnect.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2829</id>
	<key><![CDATA[Once a connection is established, and data can be sent across the stream, all data follows the same format. ObjectOutputStream and ObjectInputStream are used to transfer data, though the only data allowed are Java primitives and Java Strings, written using writeUTF/readUTF methods. At any point, if the client writes invalid data, the connection is immediately closed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2830</id>
	<key><![CDATA[The Federation Protocol is the way that the client and server speak with each other. It is an object based streaming protocol. There are several steps required to set up a connection, but once the connection is established, making requests to the server is fairly straightforward. The version of the protocol that this document describes is version 1.0.0.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2831</id>
	<key><![CDATA[The SCRIPT command is the primary command used by the Federation system. This causes a script to be executed, and the results returned. The script to be executed has two parts, the variable list, and the script itself. The script is sent first, since it may cause a compile error, and if so, there is no point in sending the variable list.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2832</id>
	<key><![CDATA[Each slave server should regularly check that the master port is bound to, and if not, it should spin up a master server in addition to the slave server it is already running. This can be done in the heartbeat thread for the slave server. Each slave server is responsible for picking a random unused port (usually between   and ), and then registering that information with the file system. In standard MethodScript servers, this will be the Persistence Network's registry, using the "federation.**" namespace. It is assumed that the administrator will keep all server instances pointed to the same registry. The registry contains information about each slave server, including the server name, the slave port it is listening on, and a "last_updated" timestamp, which if expires, %ss the entry. The heartbeat thread, in addition to checking for the master server, should update this timestamp on a regular basis.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2833</id>
	<key><![CDATA[GOODBYE]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2834</id>
	<key><![CDATA[Slave Server]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2835</id>
	<key><![CDATA[Protocol Base]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2836</id>
	<key><![CDATA[When a slave server comes online, it should pick a random port, then register that port, and the server name with the central registry. A single MethodScript process may have multiple servers running, though each will use a different port, and may also have different connection rules.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2837</id>
	<key><![CDATA[In addition, servers may require a password. This password must be shared between the client and the server, and adds a small amount of additional security, though it is highly recommended that PKI be used instead of simply a password, as the password can be easily obtained by a man in the middle. If MitM attacks are not a concern, a secure password is a valid way to secure the server, however. The password may be used in addition or instead of PKI.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2838</id>
	<key><![CDATA[If and only if the slave server only allows connections from localhost, may it not start up the master server. On the other hand, if a client is connecting to localhost, it can do the slave server lookup itself.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2839</id>
	<key><![CDATA[Next, if PKI authentication is enabled, the client should write a byte array, generated by signing the exact string "AUTHENTICATION" with the client's private key. The server will determine if one of the authorized keys can decrypt this array properly, and if so, the connection will proceed, and the server will write the string "AUTHENTICATION OK". If not, the server will write the string "AUTHENTICATION BAD" followed by the string error message. If the server does not require PKI authentication, then the client should write an empty byte array, and the server will reply with "AUTHENTICATION OK".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2840</id>
	<key><![CDATA[Connections to the slave servers are secured both ways. The client ensures it is connecting to the correct server (though this is admittedly slightly less important), and the server ensures that the client is allowed to connect to it. The client must provide the server's public key, and its private key. The slave server connection must provide a list of authorized keys, and its private key. This data is used to secure the connection both ways. If the server or client requires secure connections, then the other must also use secured connections.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2841</id>
	<key><![CDATA[This entire process must happen within 1 second, or the connection may be forcibly terminated, as it is assumed that the client has hung. This prevents misconfigured or malicious clients from taking up too many server resources.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2842</id>
	<key><![CDATA[After the client has determined the proper port to connect to via the master server, it should initiate a new connection to the slave server. Upon initial connection, it should write the string "HELLO", followed by the version string of the protocol version it is speaking in. If the server supports that version, it will respond with the string "VERSION OK", and if it doesn't support that version, it will respond with the string "VERSION BAD" followed by another string, which is the error message, then it will disconnect. (This is the same as the master server connection.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2843</id>
	<key><![CDATA[Once the connection is established, the next thing written will be a string command, by the client. If the command is accepted, the server will write the string "COMMAND OK", and then the client may proceed with the command specific protocol. If the command is not recognized, the server will write the string "COMMAND INVALID" followed by a string error message, but the connection will NOT be closed, though the server will then again be waiting on a command.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2844</id>
	<key><![CDATA[The GOODBYE command instructs the server to gracefully close the connection, cleaning up any resources. If the client closes the connection, this will also close the connection, though not necessarily gracefully.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2845</id>
	<key><![CDATA[If the server requires PKI, the client must use the server's public key during connection. This encryption is inherent to the connection, and should be managed by the transport protocol. The client must first write the string "HELLO", followed by the version string of the protocol version it is speaking in. If the server supports that version, it will respond with the string "VERSION OK", and if it doesn't support that version, it will respond with the string "VERSION BAD" followed by another string, which is the error message, then it will disconnect.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2846</id>
	<key><![CDATA[Master Server]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2847</id>
	<key><![CDATA[Master Server Protocol]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2848</id>
	<key><![CDATA[SCRIPT]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2849</id>
	<key><![CDATA[The master server is a random process on the machine that listens to the master port, and gives out server routing information to requesting processes. This setup works much like a dynamic DNS system. The master server is established by the first process to realize that there is no other process listening on the master port. The protocol it follows is different than the slave servers. Since connections are potentially long running, and we don't want to depend on the master server remaining up for other connections, a client first makes a request to the master server for the port that it should connect to, and then it disconnects from the master server, and initializes a new connection to the correct slave server.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2850</id>
	<key><![CDATA[Assuming the HELLO and version check are successful, the client will write the string "GET PORT", then another string, the server name it is requesting the port of. The server will respond with the string "OK", then the integer port number, if it found the server,  or the string "ERROR" and then another string, which is the error message, if it could not. Then the connection is closed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2851</id>
	<key><![CDATA[The password should be written as a string. If it was not provided, an empty string is written. The server will respond with the string "PASSWORD OK" if the password was accepted, (or the password is blank, and not required by the server) or the string "PASSWORD BAD", followed by a string error message if the password was invalid.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2852</id>
	<key><![CDATA[Connections to the master server are secured differently than the connections to the slave server -- though the administrator may choose to use the same keys for both. If connections to the master servers are secured, all master servers must use the same private key. This is akin to DNSSEC system. Master server connections are authenticated only one way. The client knows it is connecting to the proper master server, but the master server does not care what servers connect to it. When allowing a connection, servers must provide the master server private key, if they are intending on requiring secure master server requests. When making a connection to the host, the client should provide the public key for master server requests. If the master server provides the private key, the client is required to provide the public key of the server.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2853</id>
	<key><![CDATA[All actions up to this point must have taken less than a second, or the connection will be forcibly closed, to ensure that misconfigured or malicious clients that are not allowed to connect do not take up server resources. Once the password has been verified however, the connection is allowed to idle, up to the keep-alive time, which is generally much longer, possibly indefinite.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2854</id>
	<key><![CDATA[The connection to the slave server is a long running connection that allows for connections to remain open and run multiple commands after establishing and authorizing the connection. The connection security to the server is handled inherently by the underlying transport layer, using SSL. The authentication to the server (the two way authentication) and the password, if provided, is handled using the application logic.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2855</id>
	<key><![CDATA[The date this file was created. This value is not used by the compiler, but is perhaps useful information for future  readers of the script. This will eventually be available in the reflection information.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2856</id>
	<key><![CDATA[File options are a way to granularly control options for a single file. Some file options affect the compiler directly, others are simply used by the reflection mechanism to provide info during runtime. Unrecognized file options are ignored, but are otherwise not an error, however, you should prefix all custom file options with "x-" to prevent future conflicts if new file options are introduced.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2857</id>
	<key><![CDATA[description]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2858</id>
	<key><![CDATA[requiredExtensions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2859</id>
	<key><![CDATA[Below, the various file options and their effects are described:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2860</id>
	<key><![CDATA[A comma separated list of compiler options. These options are considered to be unset if not present, and set if present.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2861</id>
	<key><![CDATA[Disables strict mode for this file and adds a description.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2862</id>
	<key><![CDATA[A description of this file. This value is not used by the compiler, but is perhaps useful information for future  readers of the script. This will eventually be available in the reflection information.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2863</id>
	<key><![CDATA[A comma separated list of extensions that must be loaded in order to compile this file. While it is possible to be more granular by using %s and %s, if the file cannot be useful without a given extension, this directive is preferred.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2864</id>
	<key><![CDATA[strict]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2865</id>
	<key><![CDATA[Suppresses the given compiler warnings for this file. The list should be comma separated, but can contain multiple  types.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2866</id>
	<key><![CDATA[Enables strict mode for just this single file. See the page on [[%s|strict mode]] for a discussion of what this mode actually does.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2867</id>
	<key><![CDATA[author]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2868</id>
	<key><![CDATA[The file options must be defined at the top of the file, and can only be proceeded by comments, and start with  %s&lt;!%s and end with  %s&gt;%s. Newlines within the file options are acceptable. If, within the value, you need a literal &gt; or semicolon, you must escape it with \, so %s\&gt;%s or %s\;%s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2869</id>
	<key><![CDATA[created]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2870</id>
	<key><![CDATA[suppressWarnings]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2871</id>
	<key><![CDATA[compilerOptions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2872</id>
	<key><![CDATA[Enables strict mode and adds a description to the file]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2873</id>
	<key><![CDATA[Enables strict mode.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2874</id>
	<key><![CDATA[Some examples:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2875</id>
	<key><![CDATA[The general format of a file option is: %soption: value;%s where the semicolon is optional for the last value. However, some file options are booleans. For booleans, either "true" or "on" are considered positive values, and "false" or "off" are considered negative values. Furthermore, leaving the value off entirely, e.g. %soption;%s is equivalent to %soption: on;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2876</id>
	<key><![CDATA[This should be the name of the file. If it exists, and the file name does not match this value, the a compiler warning will be issued. The name must simply match the end of the actual file path, so providing a partial path, just the file name, the path within the project, or the absolute path are all acceptable. It is recommended that you do not provide the absolute path however, or the files cannot be easily moved. Both forward and backward slashes are accepted, and spaces in file paths are allowed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2877</id>
	<key><![CDATA[The author of this file. This value is not used currently, but will eventually be available in the reflection  information.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2878</id>
	<key><![CDATA[Examples]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2879</id>
	<key><![CDATA[Need more help?]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2880</id>
	<key><![CDATA[Chat with us on on [%s Discord], the  [%s issue tracker], IRC in #CommandHelper on irc.esper.net,  or just use the IRC widget below:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2881</id>
	<key><![CDATA[Interpreter mode is a mode that allows you to easily run mscripts from within game, straight from the chat bar! To enter  interpreter mode, type /interpreter. You must have the interpreter enabled in your preferences file, and the user must  have the commandhelper.interpreter permission. Once you are in interpreter mode, your chat bar turns into a script  window, and you cannot chat anymore (well, you could with the chat function... :D). In order to leave interpreter mode,  type a single dash(-) on a line on its own. Now, when you "chat", you can run arbitrary mscripts. To enter multiline  mode, type >>> on a line of its own. Now when you hit enter, the line is added to an ongoing script, which isn't run  until you end the script with %s Hello World!%s :%sThis is normally ignored]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2882</id>
	<key><![CDATA[Connection Identifiers]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2883</id>
	<key><![CDATA[So, what if we want to change the default behavior? You can provide a callback function, and it will be called when  either the connection fails or succeeds. (It will not try again automatically.) You may also optionally provide an array  of channels to join if the connection is successful, and those will automatically be joined. The callback function  accepts a few parameters: The server name, so that if needed, this callback can be linked to the appropriate request,  the name attempted, a boolean which indicates if the join was successful, an error code (%s if @success was true, a  string otherwise) and an array of channels that were joined. Here is an example of a callback that might be used:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2884</id>
	<key><![CDATA[irc_command(@username, @channel, @msg, [@throw]) works very similarly to irc_message, except it sends a command (which  should start with a '/'). There is a difference between a command and a normal message, so this distinction allows  greater flexibility in what you send to the channel.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2885</id>
	<key><![CDATA[To create a connection, you must know two things, the server url, and the username. (The username is up to you to pick.)  Because joining a server is a blocking process, and can take a moment, creating a connection is multithreaded. However,  the script itself does not block, but instead can call a function once it's done, which will allow for further actions  if you must wait for a connection before you take action. Usually this can be ignored though, because the connect  function takes much effort to use reasonable defaults if no callback is given, and usually if a connection isn't up, the  messages you are sending can be discarded anyways. Also keep in mind that when the server restarts, the connection would  also restart as well.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2886</id>
	<key><![CDATA[Receiving messages]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2887</id>
	<key><![CDATA[A quick note on connection identifiers: It is possible to have multiple connections up to different servers. Since  usernames are unique across individual servers, the username is typically enough to differentiate between connections.  However, if you have multiple connections to different servers with the same username, you must use the full identifier  for the connection, which is the format username@url[:repeater] (example: CommandBot@irc.esper.net:_). It is acceptable  to always use the full identifier, even if the username alone would be enough to identify the connection. The url is the  url of the server, and the username is the username that was selected. The optional repeater part is for in case there  is no connection matching username@url, it will check for a connection that otherwise matches, but has any number of  repeaters on the end. By default, it is empty, and won't match any connection if an alternate was selected  automatically. (Keep in mind that the default repeater is '_').]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2888</id>
	<key><![CDATA[IRC commands allow a server to send and process IRC messages. Since IRC is two-way, there are functions that can send  messages, and events that are fired when a message is received. Before either can happen however, a connection to the  server must be created.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2889</id>
	<key><![CDATA[There are a few functions for sending a message. All of them have a switch that can be set that will make them throw an  exception, instead of simply ignoring the message if the connection is invalid (which can be caused by the connection  not being up yet, even though it will eventually connect).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2890</id>
	<key><![CDATA[That's it! Since no callback was provided, and a channel list was given, the following defaults will happen: It will  attempt to connect to irc.esper.net. Once joined, it will pick the name CommandBot. If the connection to the server  could not be established, it will echo a message to the console, and try again in 10 seconds, in case the server is just  unreachable temporarily, however, this likely means you are connecting to an invalid server. If the name is already  taken, it will try CommandBot_, then CommandBot__, etc until it gets a name that isn't taken. It will occasionally try  to change names back to CommandBot once it becomes available. Once it joins, it will join the channel #CommandHelper  (and others if provided). Now that it has joined, you can send messages, and events will activate.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2891</id>
	<key><![CDATA[This method more or less duplicates the behavior of the default behavior, which the exception of trying to change names  continually if the initial name is taken. Now that we have connected, we are free to send messages without causing  exceptions. In our success handler, we also could have done things like authenticate with the server.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2892</id>
	<key><![CDATA[irc_message_bypass works the exact same way, however it bypasses the messages queue and immediately sends a message to  the channel. irc_message queues messages, so that if many messages are immediately queued, it will delay sending them,  to a%s setting off spam filters.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2893</id>
	<key><![CDATA[irc_message(@username, @channel, @msg, [@throw]) accepts the following parameters, @username, which is the name of the  bot that is connected, which represents a valid connection, @channel, which is the channel we are sending to, @msg,  which is the message to send. Optionally, you can also send a boolean, @throw, which defaults to false. If false, if you  try to send to an invalid connection, nothing happens, the error is just ignored, but if true, the function will throw  an exception, which can be caught in case you need to take alternate action if the message is not successfully sent.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2894</id>
	<key><![CDATA[Creating connection]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2895</id>
	<key><![CDATA[Sending messages]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2896</id>
	<key><![CDATA[Possible errors]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2897</id>
	<key><![CDATA[To connect, use the following code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2898</id>
	<key><![CDATA[New translation blocks are not allowed to be created by hand. New segments are created automatically during website generation, and the blank templates are automatically committed to the central github repository. This prevents very messy merge conflicts if multiple l10n experts are working on the same pages, as well as prevents any conflicts that the automated systems can't recover from.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2899</id>
	<key><![CDATA[To facilitate easier parsing of the text, some segments have been modified to remove information that should definitely not be localized. For instance, urls, code, template markers, and other strings of that nature. In place of those symbols, '''%s''' has been added instead. THESE MUST BE LEFT IN PLACE. It should generally be obvious where it should go, often times these are within brackets, or surrounding a single word, etc. There are often time other symbols, such as html escapes, brackets, and other symbols that should be left intact in the translation, unless it's obviously supposed to be changed. There are also other cases where it's impossible to automatically determine whether or not to exclude a particular word from a translation, depending on the context. For instance, function names an other references to code should never be localized, as function names may only be in English. You must use common sense when doing the localization, and ensure that you don't change things that must be there for site functionality or may confuse the reader. In some cases, the entire segment is correct without any translation, for instance segments that are just the name of a function. In this case, do not copy the english over, instead, switch to general mode and mark it as untranslatable. This will cause it to use the English in all locales, but also remove it from the list of "missing translations". Unfortunately,  segments that contain strings that shouldn't be translated are not going to be eligible for automatic translation, and must be manually translated, ensuring that the untranslatable parts are left intact.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2900</id>
	<key><![CDATA[Once the pull request is made, your changes will be validated, to ensure that they won't break anything. Once accepted, the PR will filter down into the website, though due to a delay in cache updates, some translations may take a bit to appear on the website.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2901</id>
	<key><![CDATA[The MethodScript website supports localization efforts, to better serve communities that are primarily non-English speaking. While much of the application itself is necessarily written in English (function names, etc would be a disaster to try to localize), the documentation for the application does not necessarily need to be in English.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2902</id>
	<key><![CDATA[Before running the site-deploy tool, in your site-deploy.ini file, set production-translations to  "%s". Run the site-deploy tool like normal, with the latest version of the codebase. You can either download the latest release, or build it yourself, but to a%s missing segments, it must be based on the latest release build.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2903</id>
	<key><![CDATA[In locale specific mode, you can view translations for that particular locale. From this, you can view the entire master translation file, or you can view the segments for individual pages. From within a selected page, you can add a manual translation or a locale or page specific comment.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2904</id>
	<key><![CDATA[Due to the complexity of the system, various tooling is in place to assist in keeping things correct, but it is important to have an overview of the core of the system. The primary database is hosted on [%s github.]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2905</id>
	<key><![CDATA[There are three layers to the database. The summary file, the locale master file, and individual page files. Each translation file is an xml file. For each segment, there are at least 2 pieces of information that all segments have, the translation id, and the original English.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2906</id>
	<key><![CDATA[Finally, we have individual pages of translations. These contain the same information as the master locale file, but only contain the translations that are used on that particular page on the site. Normally, these values are inherited from the master file, but if the overrideMaster flag is set to true, then this translation will not inherit the translation from the master file, and will use the translation specified for that particular page. In general, if this occurs, this probably points to a larger problem with the segment, and instead of doing that, we should consider how the pages are segmented instead.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2907</id>
	<key><![CDATA[Now, when you save the localizations in the UI, you simply need to refresh the page to see the new translations.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2908</id>
	<key><![CDATA[First, when the website is generated, the deployment tooling automatically runs to create the translation database. The first step is to take each and every page that is eligible for l10n, and split it into '''segments'''. The logic is a bit complex, but the idea here is to split each page into many small, logical segments, rather than keeping it as one giant page. What defines a segment varies, but for instance, in a page with lots of paragraphs (such as this one), each paragraph becomes one segment. Tables are another good example, each cell in the table becomes a segment as well. Bullet points in a list each become their own segment, and so forth, and so on. Many of these segments are repeated across the site, and doing this segmentation in a very specific way can help identify segments of a page that are repeated across more than one page. In this way, we can ensure that when this segment is translated, every page across the site can inherit this translation, without the l10n expert having to translate the same segment multiple times. This also makes it easier for new information to be added, without requiring full re-localization of the page. It's better to have new information be available in English than not at all, and so untranslated segments are always shown as is, alongside any already translated segments.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2909</id>
	<key><![CDATA[Testing locally]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2910</id>
	<key><![CDATA[Technical Discussion]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2911</id>
	<key><![CDATA[Because keeping all of these files in sync manually would be extremely difficult, in general, the rule is that only the tooling should directly modify the database. Editing the xml files by hand would likely cause issues, and so using the GUI is the only supported, and easiest way to modify the files. Use the '''l10n-ui''' tool to launch the Localization UI.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2912</id>
	<key><![CDATA[There are also lots of segments of text that are perfectly translatable by machine. That is, there isn't any text in the segment that needs to remain English for compatibility purposes, such as names of functions or enums, etc. In that case, all locales can use machine translation on that segment, which can save lots of time for many segments. There are however, many places where these machine translations might be wrong, or where the translation for the general text may not be appropriate in the context of an individual page. Therefore, mechanisms are in place to allow for l10n experts to override these where necessary.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2913</id>
	<key><![CDATA[Before creating a Pull Request, you should make a deployment locally, and verify that your changes look alright. To create a local deployment, follow the directions [[%s|here]], but you'll additionally need to start up a server that serves your local copy of the database. These directions can be modified if you wish, but the easiest method to do so is to do the following.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2914</id>
	<key><![CDATA[There are a few steps in the l10n process, and some complication is introduced to the system to reduce the amount of work that is needed to be done by l10n experts. The general process is this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2915</id>
	<key><![CDATA[Using the Localization Tool]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2916</id>
	<key><![CDATA[Saving writes the database out to file, and you can also create a pull request to the main repository.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2917</id>
	<key><![CDATA[Errors in original documentation]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2918</id>
	<key><![CDATA[Open a new terminal, in addition to the terminal running the server for the main site.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2919</id>
	<key><![CDATA[There is an artificial language tag, which is always available for testing, the "art" locale. Since machine translations cost real money to generate, and it can be useful to do testing locally, the art locale is a programmatically modified English language, which can help detect issues in the machine localization, as well as testing other locale changes without breaking real languages.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2920</id>
	<key><![CDATA[Pull Request Acceptance]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2921</id>
	<key><![CDATA[Run]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2922</id>
	<key><![CDATA[On individual page loads, we don't want to load the entire translation memory, as this is quite large, which is why each page gets it own translation memory file, with just the segments that are on that page. When deciding how to translate each page, a page prefers to use the manual translation, followed by the machine translation, followed by the original English.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2923</id>
	<key><![CDATA[To this end, a Localization (or L10n) framework has been put in place to facilitate bilingual localizers to help translate the documentation into languages other than English! Much care has been put into ensuring the accuracy of the documentation, and the language of it is no exception. This document describes the l10n framework,  which is important to understand if you wish to contribute l10ns.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2924</id>
	<key><![CDATA[General Overview]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2925</id>
	<key><![CDATA[The l10n database is just a git repo, so to contribute to localizations, you need a git client installed. On first run, you can tell the tool to help you check out the official repository, or you can specify your own, if you are just testing things.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2926</id>
	<key><![CDATA[Special symbols and untranslatable strings within segments]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2927</id>
	<key><![CDATA[At the root of the database, we find a folder for each supported locale. Within the folder, there exists a master locale file (master.tmem.xml), along with many other files which are page specific files. For the purposes of the l10n expert, the master file is the most important, though individual page files are sometimes useful to use. The master locale file is the file that the bulk of translations should go in. This file is somewhat a duplicate of the summary file, in that all segments in the system should be in this file, but it contains locale specific information. The id and English key are present, but there are also locale specific fields. The comment field allows a l10n expert to leave a locale specific note about this particular segment. The translation field is where the non-English translation should go. For segments that have been marked as eligible for machine translation, a separate "auto" field is added for that translation. In all cases, if both a manual translation and a machine translated version are available, the manual translation is used instead.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2928</id>
	<key><![CDATA[In the summary file, (summary.xml) we find information that relates to the segment across all locales, for instance, whether or not this segment should be eligible for machine translation. If the value is %s, then this segment hasn't been judged yet, as this requires human review. There is also a comment field, which can be used to leave a note for l10n experts about this particular field as a whole, without regard to the particular locale. There is also a flag that marks this segment as '''untranslatable''', which means that the whole segment is something like a function name, or some other string that would be incorrect to localize. This effectively means that the English is the "translation" for this segment, and it is removed from the "missing translation" lists.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2929</id>
	<key><![CDATA[Follow the remaining directions to get a local site up and running, then:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2930</id>
	<key><![CDATA[Code blocks are currently wholly excluded from the l10n framework, though it should be possible in the future to allow comments and strings within the code to be localized.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2931</id>
	<key><![CDATA[The localization tool allows you to operate in two main modes, General Mode, and Locale Specific Mode. In general mode, you can go through and mark segments as machine translatable or not, and this will apply to all supported locales. You can also add comments to the segments, which will be seen in all locales. You can also run machine translation for segments that were marked as machine translation supported. (This requires a subscription to Azure Translator Text API, which has a limited, free tier, but may cost money.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2932</id>
	<key><![CDATA[If you find errors or typos in the original English, do not translate them, because the segment will be invalidated and no longer translated. Submit a PR against the original English first, then allow the segment to update before translating it. You can also mark it as a suspect segment, and it will be flagged for review, and prevent others from translating it before it is replaced.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2933</id>
	<key><![CDATA[Folders may be indefinitely nested, and CH will recurse into them as deep as necessary. The one exception is if the  folder name ends in %s.disabled%s, in which case the entire folder is ignored. This gives you a handy way to  "remove" scripts from your system, temporarily.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2934</id>
	<key><![CDATA[Inter-Package Interaction]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2935</id>
	<key><![CDATA[Simple Directory Packages]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2936</id>
	<key><![CDATA[Local Packages]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2937</id>
	<key><![CDATA[MSLP Zips]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2938</id>
	<key><![CDATA[This mechanism allows for easier distribution of a self-contained script, but has the disadvantage of not being easily  edited, however, a simple unzip operation will take care of that.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2939</id>
	<key><![CDATA[Usually programs have a "main" file, which is the thing that is guaranteed to run first. This is the starting point of a  program usually. Local Packages can emulate this behavior, but within different "projects", the load order is completely  undefined, and there is currently no mechanism for defining this. The one exception to this rule is that the main  %sauto_include.ms%s will always run first. However, using the %s.library%s mechanism, along with  careful file layouts will allow you to move pure ms files around, yet still guarantee their load order. A folder that  ends in %s.library%s works the exact same way as a %s.disabled%s folder, the name is just a convention  that hints at that folder's purpose. Files that are included inside of the %s.library%s folder are not directly  loaded by the Package mechanism, but can still be loaded by your code using an %s. %s.msa%s  files are not really affected by this, since all aliases are global anyways, and even if one depends on another, they  will all get loaded before any are used. %s.ms%s files may get affected by this, since they are executed as  soon as they are run, and one file may define a proc that another file needs to use, and if the load order is incorrect,  it would fail.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2940</id>
	<key><![CDATA[A %s.mslp%s file may also be placed anywhere in the directory structure. A MSLP file is simply a zip file, with  the file extension changed. Within the MSLP file, the exact same rules apply as with the Simple Directory Package  structure. %s.ms%s and %s.msa%s files.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2941</id>
	<key><![CDATA[Local Packages are a intermediate feature that allow you to break up your scripts and alias files into smaller, more  manageable chunks; as the name suggests, packages. Unlike %s and auto_include.ms, this allows you to  break the alias files out into more files, as well as automatically including certain other ms files. Local Packages  have limitations; They are meant as an intermediate feature before snap-ins are completed. These limitations will become  clear if you are not careful in your design of packages.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2942</id>
	<key><![CDATA[Since the Local Package mechanism is really just a way to organize your own personal scripts, if you try and distribute  packages, you may run into namespace conflicts. This is again a limitation of Local Packages that will be addressed with  Snap-Ins.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2943</id>
	<key><![CDATA[This is the easiest and most straightforward use of Local Packages. Files that end in %s.ms%s or  %s.msa%s and are simple ascii files on the file system are read in and compiled. %s.ms%s files are  pure mscript; no aliases may be defined here, and these files should work the same as any other file you might  %s. %s.msa%s files are the equivalent of the (by default) aliases.msa file. They must follow  the exact same format as the aliases.msa file. One special exception is %sauto_include.ms%s files in the  LocalPackages directory. These work exactly like the main %sauto_include.ms%s file, in that they are compiled,  cached, and included before every script run. This means this is the perfect place to define procs or other variables  that you need to be in scope for your scripts. All auto_includes are essentially run at the same time, and there is no  guarantee of run order.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2944</id>
	<key><![CDATA[Disadvantages]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2945</id>
	<key><![CDATA[Typical package structure may look like this then:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2946</id>
	<key><![CDATA[The order in which files load is undefined. This means that dependencies among seperate "projects" is not usually a good  idea. You may be able to game the system by naming files one thing or another, but in general that method will not be  reliable. However, you ''can'' reliably handle dependencies ''within'' a package by putting includes in your  auto_include.ms file, and using the %s.library%s mechanism.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2947</id>
	<key><![CDATA[There is a packager built in. You may create a mslp by simply running  %sjava -jar CommandHelper.jar --mslp path/to/toplevel/folder%s. In addition to creating the mslp, it will  attempt to compile it first, failing to create the mslp if compilation errors are present. The name of the mslp is  decided by the name of the folder; i.e. myScripts/ will become myScripts.mslp.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2948</id>
	<key><![CDATA[For both Simple Directory Packages, and MSLP zips, the following functionality applies. Local Packages are placed in the  plugins/CommandHelper/LocalPackages folder. Any number of nested folders may be placed inside, CommandHelper recursively  scans the folders for relevant files. Unrecognized files are simply skipped, so you can have extra things in the folder,  such as ReadMe files, or some such. For the sake of forward compatibility, only .txt files are guaranteed to never be  used, so you should a%s adding other file types, in the event they are used in the future.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2949</id>
	<key><![CDATA[CommandHelper has a built in logger, which allows for subsystems to be individually monitored and logged. There are  various settings that affect what data is logged, and how it is shown. There are two steps to configuring the logger,  but reasonable defaults have been selected for you. To change the main settings, go to logs/debug/loggerPreferences.txt,  which is the configuration settings for the logger. You can adjust settings on the individual subsystems from here.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2950</id>
	<key><![CDATA[If debug mode is on, all messages are logged to the screen too. If show-warnings is true, warnings and errors are shown  on screen. Otherwise, just error messages are shown on screen. Assuming your preferences are set correctly, the console  will color code the output as well.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2951</id>
	<key><![CDATA[In addition, if a message would be logged to file, depending on other settings, it will also be displayed on screen. The  following rules apply if the message is set to be logged based on your settings:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2952</id>
	<key><![CDATA[Had we left the break() out, case 2 and the default case would have merged together. In all other cases, break() is optional.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2953</id>
	<key><![CDATA[Unlike many other languages, no %s is strictly necessary. Code blocks are run starting with the case statement, running until the next case. Only if a case should be ignored must you use break(), otherwise code will merge with the following case. For instance, say we want nothing to happen should the value = 2.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2954</id>
	<key><![CDATA[Bitwise Functions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2955</id>
	<key><![CDATA[Basic Usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2956</id>
	<key><![CDATA[else if]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2957</id>
	<key><![CDATA[and()%s (%s&&%s) returns true if '''all''' the parameters resolve to true:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2958</id>
	<key><![CDATA[If the @condition is true, then 1 is assigned to @var, otherwise 2 is.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2959</id>
	<key><![CDATA[Using break() is still recommended however, even though it is technically optional. Consider the following example.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2960</id>
	<key><![CDATA[A switch statement works by simplifying comparisons. Unlike if/else if/else, switch checks to see if some value  is equal to another value, then running that code, instead of just seeing if the value itself is true.  Switch statements can actually be written using if chains, so to demonstrate, here is the same code written both ways:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2961</id>
	<key><![CDATA[Sometimes you may want to run some code given that the value equals one of any number of values.  In this case, you may specify multiple cases, and if the value equals any  of the values specified, the corresponding code is run.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2962</id>
	<key><![CDATA[if/else if/else chains can be formed as well, if multiple conditions need to be checked. Using only if/else would quickly get messy if you have multiple values to check for.  Instead, you may use the ''else if'' chain.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2963</id>
	<key><![CDATA[In this example, if @v is 1, we msg out 1, and if @v is 2, we message out 2. Consider however, if we comment out line 3, %smsg('1')%s. We might expect that the code simply won't message anything at all if @v is 1. This is incorrect. Due to the way fallthroughs work, it will simply change it to a combined case 1 and 2. We can add a bit more code to ensure that this won't happen:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2964</id>
	<key><![CDATA[The three main operators: and (%s&&%s), or (%s||%s), and not (%s!%s)  are the building blocks for more complicated logic statements.  These functions deal with the overall truth value of a construct, not individual bits (see the  bit_and and bit_or functions).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2965</id>
	<key><![CDATA[Bitwise operations are useful for storing many boolean values as a single integer, among other uses.  It may be useful to note that integers are stored as 64 bit two's compliment values.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2966</id>
	<key><![CDATA[In this usage, the %sval%ss will be evaluated from top to bottom, and once the first val is true,  the corresponding code will be run. If none of the vals are true, then nothing in the chain will run.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2967</id>
	<key><![CDATA[or()%s (%s||%s) returns true if '''any''' of the parameters are true]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2968</id>
	<key><![CDATA[The "old style" of if was a fully functional syntax, though that syntax is still useful for ''ternary statements''. In most languages, this is the ''condition ? true : false'' syntax. %sif%s technically returns a value. If the value in each block is a single, returning value, that value will be returned. As a convention, only if a ternary operator is desired should you use the functional syntax. The following code works as expected:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2969</id>
	<key><![CDATA[The %s function is the non-brace way to do if/else if/else chains, though its usage is not recommended, as it is less readable. Internally, if/else if/else chains are converted to it still, however.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2970</id>
	<key><![CDATA[Some of the functions you may not have seen before if you haven't taken a logic or programming class  are the boolean logic operators. For a full discussion of boolean logic, you may wish to read up  [%s on wikipedia] for more information, however a basic  treatment is covered below.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2971</id>
	<key><![CDATA[All the functions in the [[%s|BasicLogic class]] return a  boolean based on certain conditions. You should be familiar with the lt (less than %s&lt;%s),  lte (less than or equals to %s&lt;=%s), gt (greater than %s&gt;%s),  gte (greater than or equals %s&gt;=%s) functions  from a basic algebra class that covers inequalities.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2972</id>
	<key><![CDATA[As you can see, it's a bit less code using the switch statement, but the results can be achieved either way.  Sometimes you may want to do a different type of comparison, other than equals, so you have to use if/else if/else chains. As with if/else if/else chains, a "default" condition can be stated, in the event none of the given conditions are satisfied. When possible, however, switch statements should be used, as they can be better optimized by the compiler.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2973</id>
	<key><![CDATA[Now that we have established that some conditions are true or not, we may want to do different  things depending. This is where the %sif()%s function comes in. We are creating "code branches"  when we use if and other conditional statements, which means that sometimes code will not get run.  The syntax of the if statements is as follows:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2974</id>
	<key><![CDATA[Slices may also be used, and if so, if the test value falls within the range of the slice, that code block is run.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2975</id>
	<key><![CDATA[The keyword and boolean value %strue]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2976</id>
	<key><![CDATA[Any non-empty string]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2977</id>
	<key><![CDATA[Truth value testing]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2978</id>
	<key><![CDATA[switch()]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2979</id>
	<key><![CDATA[not()%s (%s!%s) returns the opposite truth value of the parameter:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2980</id>
	<key><![CDATA[The three bitwise functions bit_and, bit_or, and bit_not work similarly to %sand%s,  %sor%s and %snot%s, but they only work with integers, and they work on a  binary level to determine the bitwise equivalent of two or more integers, and return that integer.  Again, a full discussion of how bitwise operations work is beyond the scope of this article, but some examples are below:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2981</id>
	<key><![CDATA[xor()%s returns true if both parameters are different]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2982</id>
	<key><![CDATA[For convenience, there are also the nand, nor, xnor functions, which are equivalent respectively to not(and()), not(or()), and not(xor()).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2983</id>
	<key><![CDATA[Let's take the %s function into consideration (%s&lt;%s operator).  lt returns true if the value on the left is less than the value on the right. In a typical  algebra class, when comparing two numbers, you would write something like this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2984</id>
	<key><![CDATA[''Note: The examples in this tutorial primarily use operators, see the page on [[%s|Operators]]'' ''for a refresher, if the operators are unclear.'']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2985</id>
	<key><![CDATA[Though you can technically use non-string and non-integer values as the comparison types, it is not recommended,  and in fact, arrays may not be used at all. When writing code, you should only use integers and strings whenever possible.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2986</id>
	<key><![CDATA[lshift%s, %srshift%s, and %surshift%s are also available. lshift(value, bitsToShift) is the general format for all three.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2987</id>
	<key><![CDATA[Now, if we comment out %smsg('1')%s, as expected, nothing happens when @v is 1.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2988</id>
	<key><![CDATA[Null values are always considered false. All primitives, and some more complex objects implement the %s type, which allows them to return true if the value is '''trueish''', meaning that while the value itself is not a boolean, it has a true/false interpretation, and can explicitely be cast to a boolean with the %s function. This is a generic concept though, and so it's not possible to create a comprehensive list of things that are supported with this mechanism.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2989</id>
	<key><![CDATA[A non-empty array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2990</id>
	<key><![CDATA[if()]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2991</id>
	<key><![CDATA[Assuming x is 3 and y is 4, this statement is true. However, if we swap the values, and make x 4 and y 3,  the statement is false. Written in code, it would look like this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2992</id>
	<key><![CDATA[In this usage, we can imagine a "default" case. If at least one of the %s@val%ss  is true, then it will behave the same. However, if none of the vals are true, then the  final code block will be run instead. This is the final "else" clause of the statement.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2993</id>
	<key><![CDATA[Boolean logic]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2994</id>
	<key><![CDATA[The following are considered to evaluate to true:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2995</id>
	<key><![CDATA[Any number different from 0]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2996</id>
	<key><![CDATA[switch%s also has a pure functional syntax, but it is not recommended for use in new code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2997</id>
	<key><![CDATA[Many times you want to use a bit of basic logic to determine what to do. Usually you want to compare  two values to see if some relationship between them is true. Based on the result of this comparison,  you want to do one thing or another. This is where the logic operators come in handy. There are several  functions that all act relatively the same in the BasicLogic class. Essentially, they compare certain  values, then return a boolean.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2998</id>
	<key><![CDATA[The condition and code to run if true are required, but the code to run if false ("else") is optional.  If it is left off, and the condition is false, %s is returned. Only one branch of code is executed here.  If condition resolves to true (which may itself contain more complex code), then the second argument is  evaluated and returned, otherwise the third argument is evaluated and returned. Note that the other  code branch is not even evaluated, that is, it is skipped entirely.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>2999</id>
	<key><![CDATA[or the no-brace method (old style):]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3000</id>
	<key><![CDATA[Once you understand while(), dowhile is trivial to understand. while() checks the condition THEN runs the code,  whereas dowhile() runs the code THEN checks the condition. In both cases, if the condition is true, it runs again.  So, %swhile(false, &lt;code&gt;)%s will never run the code, whereas  %sdowhile(&lt;code&gt;, false)%s will run the code only once.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3001</id>
	<key><![CDATA[{{TakeNote|text=Modifications to the array being iterated are handled specially. Read the page on  for full details.}}]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3002</id>
	<key><![CDATA[As a simple example, perhaps we want to echo "Hello World!" 5 times to  the player. The most straightforward way to do it would be this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3003</id>
	<key><![CDATA[Doing this continually would work, but if the number of times it is run can be dynamic, this approach won't work. The looping functions can be used to dynamically run code a given number of times. The %s function can be used to rewrite the same code as above in just a few lines:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3004</id>
	<key><![CDATA[Breaks follow special rules, however. Breaks cannot bubble up past procedures, closures, or the root of the script. Since the break count must be hardcoded, the compiler will catch this at compile time, and cause an error.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3005</id>
	<key><![CDATA[Break may also be used with switch statements. In this case, breaks work the same as if switch were a loop, even though it is technically a conditional, and not a loop.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3006</id>
	<key><![CDATA[Much simpler. In fact, looping through an array with %sfor()%s is only possible if you aren't  using an associative array. If you have an associative array, you MUST use %sforeach()%s  to walk through it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3007</id>
	<key><![CDATA[The above example will take an indefinite period of time, but once the first rand()  generates a 0, it will break(). Otherwise, it will output "Looping!" each run of the loop,  unless the second rand() generates a number greater than 3, in which case it will continue(),  which restarts the loop. (And in for() and foreach(), continue() moves to the next index).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3008</id>
	<key><![CDATA[Breaks with more than 1 break out of multiple loops.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3009</id>
	<key><![CDATA[foreach()%s also has other forms, though only the "foreach([@key:]@value in @array)" format is recommended. You may also use the no-keywords method:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3010</id>
	<key><![CDATA[break() and continue()]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3011</id>
	<key><![CDATA[or the "as" keyword method:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3012</id>
	<key><![CDATA[Or, maybe we want to count down:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3013</id>
	<key><![CDATA[Sometimes you don't know how many times you want to do something, or the "counter" variable is otherwise too difficult to write using the for() syntax, and you aren't using an array.  In that case, you can use a while loop, and you control all the conditions except for loop decision value.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3014</id>
	<key><![CDATA[While that last example would work, since we often want to walk through an array just like this,  we have a special function just for walking through arrays, %s. This code be be rewritten like so:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3015</id>
	<key><![CDATA[What if you are also interested in messaging out the key of the array? You can use %s to get them, or use the special key parameter of foreach.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3016</id>
	<key><![CDATA[You can also make an "infinite" loop with a while(true) loop, and control stopping the loop with %s and %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3017</id>
	<key><![CDATA[Another common task with arrays is to do one thing if the array is empty, or loop through it if it isn't. You could check the array size and have an if/else statement, but since this is a common enough task, special syntax exists.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3018</id>
	<key><![CDATA[This can be read in English as: "Starting from 1, run the code if @i is less than or equal to 10, and add 1 to @i each time."]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3019</id>
	<key><![CDATA[Looping is an important programming concept, because it allows you to do something more than once, without having  to rewrite the code over and over.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3020</id>
	<key><![CDATA[Often times you're looping through an array. Perhaps we want to print all the words in this array:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3021</id>
	<key><![CDATA[Breaking and continuing in a loop works will all 4 loop types, for, foreach, while, and dowhile. A break causes the loop to exit immediately, and a continue causes that particular iteration to finish, and the loop restarts. Both break and continue can be given a counter as well, and they will do that operation that many times. break() must have a hardcoded integer value, however, as a dynamic value prevents code flow analysis and optimizations. Continuing can be done a dynamic number of times, and essentially works like this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3022</id>
	<key><![CDATA[Most often though, when you are running through a loop, you are not going through a set number of times.  So, usually you will see a variable as the limiting factor.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3023</id>
	<key><![CDATA[First of all, let's look at the inner parts. %s@i = 0%s assigns 0 to the variable @i. This bit of code is run only once, and at the beginning of the loop. Since %s=%s returns a variable, and for() requires the first parameter to be a variable,  this works out perfect. Next, is the less than. Essentially, in English, this says  "while @i is less than 5, run the code". This condition is checked at the start of each iteration of the loop, (including the first) and if it is true, the code is run again. %s@i++%s adds one  to @i, and stores the value back in the variable. This is run each time at the end of the loop, and is not required to return a value. So, in plain English, this entire statement says, "Starting at 0, run this code if  @i is less than 5, and after each run of the code, add 1 to @i". In the code of the loop,  you can also use @i, which is often useful. Say we want to write out the numbers from 1-10.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3024</id>
	<key><![CDATA[Now say we want to do it 6 times.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3025</id>
	<key><![CDATA[The root object is defined as such:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3026</id>
	<key><![CDATA[Manifest Objects]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3027</id>
	<key><![CDATA[It is often times useful to add comments to a configuration item, but alas, manifests use json, not xml, and you can't put comments! Not to worry though! Every element is defined with a "comment" field, which is totally ignored by the manifest system, but can be added anywhere you wish in your configuration to add information for the reader of the config file.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3028</id>
	<key><![CDATA[A manifest file describes information about the project as a whole, including things like the version number, author name, etc.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3029</id>
	<key><![CDATA[// TODO just link to the ms.lang.manifest.ManifestRoot file.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3030</id>
	<key><![CDATA[Comments in the manifest]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3031</id>
	<key><![CDATA[The first stage of authentication is not fully defined, which allows for various extensions to authenticate however they wish, but username/password and anonymous connections are supported by default. During connection, the transport has the ability to declare this connection secure, or insecure, and UI/control elements will respond accordingly. Once the connection has been established, all other calls become available.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3032</id>
	<key><![CDATA[All primitives, objects, and arrays are passed via json. Each communication "burst" is a new json, which has the following meta information:  * "valueChecksum" - The md5 checksum of the value itself. If the value is present, this is required, otherwise it is not.  * "type" - The type of the value/request. It may be one of: . (See below for an explanation of each)  * "id" - The id for this request, if it is a solicited request. If passed from the client to the server, this same id will be returned from the server in the corresponding response. The id is treated as a string value, and is not modified.  * "value" - The actual value of this request, which is optional, based on the type, and has variable data, again, based on the type.  * "rider" - Additional information provided to the client/server. This varies based on the type, and is simply provided as a convenience for various types.  * "riderChecksum" - The md5 checksum of the rider, if present. If the rider is present, this is required, otherwise it is not.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3033</id>
	<key><![CDATA[Authentication]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3034</id>
	<key><![CDATA[Data passing]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3035</id>
	<key><![CDATA[The end of each pipe must simply implement a two way protocol, which translates network/remote requests into UTF-8 strings, which are passed to/from the MScript interpreter. The interpreter will always provide at minimum a TCP socket connection, but other platforms/extensions may provide support for others, such as DBus or named pipe communication. Connections may be stateless, though maintaining psuedo state is the responsibility of the transport extension, and the interpreter expects the connection to appear stateful.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3036</id>
	<key><![CDATA[Burst types]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3037</id>
	<key><![CDATA[Overview]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3038</id>
	<key><![CDATA[In the first stage of connection, the interpreter handshakes with the remote connection, and requests an initial capabilities list.  These capabilities are considered non-authoritative client side, but are used to minimize network connections that would fail. All capabilites may be claimed to be dynamic however, and the server is free to send meta information to adjust this list at any time. The client has the option in certain circumstances to ignore this list, so it is important to note that this is not a security mechanism. If a request does fail for capability reasons, that information is cached in these tables. This capability list doubles as a "permission" list.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3039</id>
	<key><![CDATA[The MScript protocol is a defined standard which works much like [%s RPC], but is specific to MScript. The advantages it offers over other protocols is that the underlying transport mechanism is undefined, leaving it open to specific needs, depending on the means of connection to the remote system (i.e. TCP, HTTP, DBus, etc). All data is passed as UTF-8 strings, and is interpreted on the remote end. Mechanisms exist to support passing of data, (primitives and objects/arrays), function calls, exceptions, and meta data.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3040</id>
	<key><![CDATA[Fields may be native as well. In these cases, it is as if they are defined with auto getters and setters that simply set and return the value.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3041</id>
	<key><![CDATA[It is not strictly required that the java class implement mixed, but then the class would be unusable by most native code, so it generally should.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3042</id>
	<key><![CDATA[Then within the java, you must use the @NativeElement annotation on the method with the same name and signature.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3043</id>
	<key><![CDATA[To facilitate this, there are a few architectural features, and a few language features.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3044</id>
	<key><![CDATA[In addition, non-native methods may be defined within the MethodScript, along side native methods.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3045</id>
	<key><![CDATA[All classes in the java marked with the @typeof annotation will be available in the code, regardless of whether or not there is a corresponding ''native class'', and can be used as normal in the java functions, but there will be no fields or methods available in user code. A java class with the typeof annotation and no corresponding MethodScript class will thus be synthesized as such:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3046</id>
	<key><![CDATA[The native keyword can also be applied to methods within a native class. Native methods outside of a native class are not valid. These methods are defined in MethodScript per normal, but with no method body. The documentation and other method information comes from the MethodScript, but the code itself is defined in the java.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3047</id>
	<key><![CDATA[Precompilation]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3048</id>
	<key><![CDATA[This step is important to reduce startup time, and extensions should follow the same logic when adding native classes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3049</id>
	<key><![CDATA[It is worth noting that native methods can only work with other native classes, due to the tight coupling between the need for the return value and parameter types to be addressable in the java. No such requirement is placed on non-native methods however, and they may address objects fully defined elsewhere in MethodScript.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3050</id>
	<key><![CDATA[The ParentClasses and ParentInterfaces are calculated based on the return value of the corresponding methods in the java. Any documentation for the class itself will come from the MethodScript definition, if present, and the java class otherwise.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3051</id>
	<key><![CDATA[native class]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3052</id>
	<key><![CDATA[A native class, defined with the ''native class'' keyword, implies that this class is mirroring a class defined in the java, with a @typeof annotation of the same name. This causes the system to merge the two classes' functionality.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3053</id>
	<key><![CDATA[native methods]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3054</id>
	<key><![CDATA[Such methods are not callable by java code, so if this is something that native code requires access to, it should be defined as a native method instead.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3055</id>
	<key><![CDATA[Classes defined directly in MethodScript are pre-compiled at build time. The classes are defined in a certain folder, with files ending in .msc and at build time, these are scanned, compiled into ClassInfo objects, serialized, and stored in the resulting jar. At startup, these files are quickly loaded, pre-compiled, and added to the native class list.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3056</id>
	<key><![CDATA[To increase portability and flexibility, much of the functionality of native objects are defined directly in MethodScript, using most of the same compiler features available to user defined classes. Of course, some of the functionality is required to be different, as native code must be run in some cases, but the goal is to reduce this as much as possible. Doing so allows the compiler to be re-implemented in other languages more easily, and causes the code itself to "eat its own dogfood".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3057</id>
	<key><![CDATA[Examining the constructor, there is the new function, %ssuper()%s,  which is used to call the parent's constructor. %ssuper%s is optional,  however, in the case where a call to %ssuper()%s is omitted, it is  implied to have been called at the top of the child's constructor. If  %ssuper()%s is called, it must be called ''before'' manipulating the  parent's members, even transiently, otherwise it is a compiler error. For  instance, consider the following:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3058</id>
	<key><![CDATA[Members and Methods]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3059</id>
	<key><![CDATA[Note that we are explicitely calling A's constructor with the call to super,  and A's method2. If there had been several parents, this could be used to  "un-override" a call, or otherwise explicitely selected a method that had been  overriden by multiple children. This is useful outside of diamond inheritance,  but is more often used when dealing with multiple inheritance. Note that in the  case of super() constructors, it is always an error to cause a child's  constructor to be invoked before the parent's constructor. Calling a parent's method is only valid inside the class, an overridden method is not callable from outside of the instance.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3060</id>
	<key><![CDATA[Inheritance]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3061</id>
	<key><![CDATA[There are two variables that are specially defined within code inside a class, %s@this%s and %s@self%s. %s@this%s refers to the current instance of the class, and while not usually necessary, can be used in all cases to provide clarity to the code. In some cases, however, it is necessary, when a local variable hides a member variable. In our original class example, we have the following code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3062</id>
	<key><![CDATA[Static members and methods]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3063</id>
	<key><![CDATA[Before moving on to using objects, it is important to understand the type system  in MethodScript. All variables are ''mixed'' by default, which is actually an  object type. All objects extend from mixed, and all user defined objects extend  from Object. "Primitives" are in fact objects, though they are somewhat special,  in that they are handled differently internally, but in code, they behave exactly  like user defined objects, meaning you can dereference them to access their  methods. If a type isn't explicitly specified when defining a variable, it is  considered to be mixed, and any value can be put in it. Other than this caveat  which makes MethodScript different from other strongly typed languages, it is  otherwise a full strongly typed language, meaning types are checked at compile  time, and invalid types will cause compiler errors. Type intersections and  unions are discussed later, since they are an advanced topic, but they are also  supported.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3064</id>
	<key><![CDATA[There are two ways to do a class swap, using the hotswap keyword in the class definition, and defining it in a dynamic source, changing the source file.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3065</id>
	<key><![CDATA[The %ssuper%s keyword refers to the direct superclass. In the above examples, we used it to call the superclass's constructor, but it can more generally be used to refer to an element defined within a superclass.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3066</id>
	<key><![CDATA[We can also use the hotswap keyword in a class definition. Defining a class twice is a compile error, so if we are intentionally re-defining a class definition, we need to specially tell the compiler that, so it doesn't think you just accidentally redefined it. Say we are running from the terminal:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3067</id>
	<key><![CDATA[In an instance, we can always using explicit namespacing to reference a parent's  methods. If we are in a static context, it will be a compiler error to reference  instance methods in this manner, but static references are always valid. For  instance, assume class B had been defined this way:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3068</id>
	<key><![CDATA[use%s statements]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3069</id>
	<key><![CDATA[Then we would have 2 classes defined, '''organization.project.MyClass1''' and '''organization.project.MyClass2'''. The namespace for both of these classes must be defined as "organization.project", since they are within the '''organization/project''' folder structure. The name of the file must correspond to the name of the class, this will be a compile error otherwise.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3070</id>
	<key><![CDATA[We can only have one constructor per object, but we can use default parameters,  and static methods can be created to fake multiple constructors, or we can use type unions.  The constructor is simply a method that is defined with the same name of the  class, and no return type.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3071</id>
	<key><![CDATA[So what is the Class Library? It is simply a folder in your project directory that contains several .ms files, which define classes. Your "default" class library is defined within the classLibrary/ folder in your installation, but each LocalPackage may have their own classLibrary folder as well. MSLP files will have their own class library bundled in as well. When an .ms file is defined within a class library, the rest of your code does not have to do anything extra to load them in; at compile time, they will all be loaded automatically, and added to the object definition table that is useable at runtime throughout the rest of your code. There can be no directly executable code within these file, however, and this is enforced by the compiler. There may be only one outer class definition per file, and the fully qualified class name will be the path of the class, starting at the root of the class library folder. For instance, if we have the following file structure:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3072</id>
	<key><![CDATA[In general, when overriding methods in a parent class, it is only possible to grant it a higher visibility state. For instance, if the parent class defines a method as public, the child class cannot make it private. However, the opposite is allowed. If a parent class defines a method as protected, a child class can make it public.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3073</id>
	<key><![CDATA[Note that the default constructor is annotated with the @{Inject} annotation. If you do not wish your class to be automatically injectable, you need to implement a no-arg constructor yourself, with the @{NoInject} annotation. (This is used in the [[%s|DependencyInjection]] framework.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3074</id>
	<key><![CDATA[The self keyword can also be used in generic definitions, such as %sClassType%s, and within general code, such as %sself @a = new self();%s or %smsg(self);%s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3075</id>
	<key><![CDATA[In general, MethodScript prefers to work with classes that are defined in the '''Class Library'''. When using the class library, this prevents complex management of include statements, and also provides an easier and more straightforward mechanism of managing the classes within the class library, as well as enabling certain features in the compiler that expect to know about all classes beforehand. '''Dynamic Classes''' are discussed below, but are not expected to be used in normal use. Multiple class libraries may be defined,  but they must all be known at compile time, and may not be added to later.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3076</id>
	<key><![CDATA[In this case, we must use the @this keyword, as we are naming the method's argument %s@b%s, and so to differentiate between that and the member variable, we must use %s@this->b%s. %s@this->b%s refers to the member variable, and %s@b%s refers to the variable that is passed in to the method, that is, the local variable.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3077</id>
	<key><![CDATA[In this case, we are extending A, and '''overriding''' method2. In order to  override a method, you simply name it the same as the method in the parent  class. However, it is important to note that the method signatures must be  '''type compatible''', that is, it cannot completely redefine the types of the  variables that are passed in, and there are specific rules for '''narrowing''' and '''broadening''' types. Take the following examples:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3078</id>
	<key><![CDATA[Modified A.ms:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3079</id>
	<key><![CDATA[In order to use an object, the first thing that must happen is that it is  instantiated. To instantiate our object that we defined above, we would use  the following code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3080</id>
	<key><![CDATA[Within the class A, in non-static methods, we can create a new instance of the class B in the usual manner, since %s@this%s is implied. This is the most common use of instance classes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3081</id>
	<key><![CDATA[We can easily determine which method to call, based on whether or not we pass an int to the method when we call it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3082</id>
	<key><![CDATA[An object contains any number of '''members''' and '''methods''', collectively called '''elements'''. A member is a variable, and a method is a function. Both members and variables can have various  '''modifiers''', which affect behavior in various ways. In the example, you can  see that we are defining @b as a member variable, and Method1 and method2  are methods. The modifiers in use include '''public''', '''static''', '''final''',  '''int''', '''protected''' and '''private''' though there are others too.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3083</id>
	<key><![CDATA['''public''', '''protected''', '''internal''', '''package''', and '''private''' are the five modifiers that  control what can access an object's methods or members (in order of visibility). If something is public,  anything can access it. If it is private, only that class can access it, and if  it is protected, only that class, or subclasses can access it. '''package''' means that only classes defined within the same folder (or subfolders) may access it, and '''internal''' means that only classes within that project (or class library, depending on how the class library is set up) can access it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3084</id>
	<key><![CDATA[Class Library]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3085</id>
	<key><![CDATA[By default, methods with multiple overrides in parent classes inherit from the primary parent, in this case, A, though you can also be explicit and inherit a method individually. If no access modifier is provided, the method is inherited with the same access level as the parent method. However, the visibility of the method may also be increased:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3086</id>
	<key><![CDATA[As many types as required can be chained this way. As far as the inferred type of that object, it will be whatever the nearest '''type intersection''' is. So, in this case, the code using the variable @var must assume that it is of type A, unless it does an explicit cast first. So, as far as code that ''uses'' the variable, it will work as if it were defined as %sA @var%s, but with the guarantee that only a D or C type instance will have been assigned to it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3087</id>
	<key><![CDATA[(Assuming the class name is A). However, if a superclass defined a constructor that accepted parameters, without also defining a constructor that takes no arguments, this will not happen, and you must manually define a constructor which calls %ssuper%s with the appropriate inputs.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3088</id>
	<key><![CDATA[inherit%s keyword]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3089</id>
	<key><![CDATA[A method may be overridden with simply changing the return type, but then, just as in the above example, would require fully qualifying the method each time it were called. Due to this, anytime you define a method that would require disambiguation every time it's called, a compiler warning is issued for the definition. This can be suppressed, however.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3090</id>
	<key><![CDATA[Before getting into the details about objects, lets look at an example:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3091</id>
	<key><![CDATA[You don't have to provide the full package for the class names either. If you have a class named com.project.util.MyClass, you can %suse com.project;%s, and then refer to the class as %sutil.MyClass%s, though it's usually just as well to %suse com.project.util;%s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3092</id>
	<key><![CDATA[would output 2, since we called the method that returns our input plus @b,  which in this case is 0.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3093</id>
	<key><![CDATA[The modifier can be applied to methods and fields, but also to classes. This leads to an interesting effect, however. If there is a class defined with a lower visibility than a method which returns or has parameters of a type that has a lower visibility, then it means that the method cannot in fact be called by code that is not of the appropriate visibility. If this occurs, then a compiler error will be issued. To fix it, you may either make the class the same visibility as the method, or you can reduce the visibility of the method.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3094</id>
	<key><![CDATA[A type union can be used any time disjoint types are required. Assume the following hierarchy:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3095</id>
	<key><![CDATA[In general, this is not advised, as this may cause problems down the road if, within the * structure, any class names are duplicated, and you're using one of them, it will become a compile error. Therefore, it is still recommended that you fully qualify the package name. Nevertheless, this functionality is available.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3096</id>
	<key><![CDATA[Additionally in this example, there is one '''constructor''', which is the code that is called when a new instance of the object is created (see below). The constructor (or constructors, there can be several). A constructor is defined by creating a method with the same name as the object it's contained in, with no return type. The constructor is where you may place code that is necessary for initial configuration of the object.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3097</id>
	<key><![CDATA[If zero constructors are provided, a default constructor is always provided, with  the definition:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3098</id>
	<key><![CDATA[The %sself%s keyword refers to the ClassType of the currently defining class. This is a shortcut to listing the current defining type, and can generally be thought of as simply replacing the self keyword at compile time with the ClassType of the currently defining class. (Though this isn't exactly the case.) This is mostly useful when defining method signatures. For instance:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3099</id>
	<key><![CDATA[Dynamic classes are classes that are defined not through the class library, but dynamically  at runtime. These classes are defined more or less the same, but are not eligible for many compiler checks. Things like ExhaustiveVisitors cannot be made to work with these classes, they cannot be pre-compiled, and they cannot be used in the Dependency Injection system, among other things. Having said all that, if you are ok with the downsides, these classes can be defined anywhere, and then that file %s'd (or dynamically loaded from other sources, such as eval, or even the interpreter). Once loaded, they will work mostly just as if they had been loaded at compile time. Existing, static code cannot reference the classes, of course, as they would have already triggered a compile error for not being able to find the class, but code that works generically with objects, or if the virtual class extends/implements existing classes, this can be useful when doing dynamic things. Defining a class outside of a class library, then causing it to be loaded will do this.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3100</id>
	<key><![CDATA[Instantiation]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3101</id>
	<key><![CDATA[Abstract Classes]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3102</id>
	<key><![CDATA[However, since this could occur fairly often, you may simply indicate that you would like to ''inherit'' functionality from the specified parent. So instead of defining the class C as above, we can get the exact same functionality by defining it as such:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3103</id>
	<key><![CDATA[A full class swap is when the ObjectDefinition is fully replaced at runtime. Existing instances of the class will retain the old ObjectDefinition, but new instances will get the new one. It is impossible to access the old ObjectDefinition object, but internally, those instances will continue on. Doing a full class swap does not restrict what can be done, fields may change, method definitions may change, etc.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3104</id>
	<key><![CDATA[By convention, static elements are named with capital first letters, and non-static elements are named with lowercase first letters, and all elements use camel case.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3105</id>
	<key><![CDATA[In this example, we have a compile error, because the call to getA() could  potentially call initA(), which manipulates @a, which is a member variable.  The reason for this is so that the object is never in an ''inconsistent state''  which could occur if a subclass manipulates members of the parent before it is  allowed to run its initialization. Had we left off the call to super, it would  have been automatically placed at the top of the constructor, and this would not  have been a compile error.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3106</id>
	<key><![CDATA[false%s from %s.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3107</id>
	<key><![CDATA[This example will be used in the explanation below.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3108</id>
	<key><![CDATA[Since this is just syntax sugar, rather than a runtime setting, this is why you will always see references to a class's fully qualified class name when reading error messages and things. So, are system level classes in a hierarchy? Yes, they are! So why do you not need use statements for them? The system automatically adds some use statements for you. Particularly, it always adds %sms.lang%s, as well as the current package, but others may be added as well. Regardless, the ones that are added automatically are added as if they are below all of your use statements. This allows you to define classes with the same name as system classes, without having to fully qualify them. On the flip side, if you have duplicate class names, and you use both within a file, at least one of them would have to be fully qualified anyhow, but the consolation is that at least '''ms.lang.''' is relatively little to type. Otherwise, the search pattern for classes always goes from top to bottom in the use statements, if there are duplicate class names.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3109</id>
	<key><![CDATA[In addition to providing a project structure, a class library may contain one or more '''manifest''' files, (named simply "manifest.json"). There must be one manifest at the root of the classLibrary, but there may be more within subfolders, if it makes sense to organize multiple projects within the same classLibrary. The manifest defines certain information about the class library as a whole, and turns it into a "project". The manifest includes information such as project versions, author information, changelogs, etc. The manifest.json file has a specific format, which is described [Manifests|here]. One of the most useful features of the manifest is the version number, and dependency information. The project should define what dependencies and versions of dependencies are needed, but not where to find them. Meanwhile, as a system level configuration, the system should define where to look for dependencies. This may be on the local system, or it may be in a package manager. Regardless, at minimum, every classLibrary must have at least one manifest file within the file structure that defines the organization name, project name, and project version. This ensures that the dependency fulfillment mechanisms are always able to uniquely identify a project. A default manifest.json file is created for you when running the system for the first time, but you must change the values in it, if you intend on shipping your code, or re-using it in a more modular fashion.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3110</id>
	<key><![CDATA[@this%s and %s@self%s variables, and %ssuper%s and %sself%s keywords]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3111</id>
	<key><![CDATA[Now, assume that we want to accept an instance of either type D or type C, but not type B or A. In this case, the nearest parent is type A, so we could accept type A and do a runtime check to ensure that it is of type D or C only, but this is a runtime check, and it would be better if we could simply declare that we only want those two types. In that case, we can use a '''type union''' to signal to the compiler the various types we will accept. To specify a type union, use the  '''''' character.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3112</id>
	<key><![CDATA[There are a number of subclasses of the IncompatibleClassChangeError, but they all stem from the same underlying problem - something that previously compiled is no longer valid.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3113</id>
	<key><![CDATA[Full Class Swaps]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3114</id>
	<key><![CDATA[An object can '''inherit''' from, or ''extend'' another object. Let's define the  object B, which extends A.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3115</id>
	<key><![CDATA[Objects in MethodScript allow for object oriented approaches to designing your  code. Object in MethodScript are extremely flexible and powerful, yet easy to use  and understand.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3116</id>
	<key><![CDATA[In this example, we have to first create a new instance of the outer class, in order to create an instance of the inner class. We can dereference the instance of A, and use the new keyword, such as this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3117</id>
	<key><![CDATA[In the last example, it is shown that return type changes are not allowed (only narrowing is). Why is this, when return type changes are allowed within a single class? Consider the following code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3118</id>
	<key><![CDATA[When creating a class like this, references to that class must be the '''fully qualifed class name''', for instance, following the above class definitions:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3119</id>
	<key><![CDATA[There are two types of inner classes, however, unlike an outer class, an instance based class, and a static class. The above example shows an static inner class being defined.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3120</id>
	<key><![CDATA[What is an example of an incompatible change? If a method changes a previously public method to private, code that was previously allowed to call this method will fail. This won't be caught by the compiler, as the code that is accessing the new object will have already been compiled without errors.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3121</id>
	<key><![CDATA[@self%s works in somewhat the same way, but it ALWAYS refers to the class that it is used in, whereas %s@this%s refers to the instance that the type is at runtime. To be very precise, %s@this%s refers to the current instance of the class, which may be an instance of the current class, or it may be an instance of a subclass. However, %s@self%s always refers to the current class. This can be useful to call a method that is not private, when you want to ensure that the code being called is not code that is overridden by a subclass. This feature should generally speaking be used sparingly, as it is a violation of the Liskov Substitution Principal, though it can be used in meta cases, for instance, to dynamically get the current class definition for reflective purposes. It can also be useful when calling static methods.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3122</id>
	<key><![CDATA[Type Unions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3123</id>
	<key><![CDATA[An object is an instance of a class. A class is defined in code, and is used to  define methods and members that will be in an instance of that object. A class  can be instantiated, and get a real object out of it at runtime. You can think  of the difference between the two as a blueprint for a house, there is only one  blueprint, but multiple houses that are actually built, and in each house, some  things are different, like, the paint color.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3124</id>
	<key><![CDATA[Inner classes are allowed to create elements named the same as the outer class, therefore it is sometimes useful to differentiate between what exactly %s@this%s refers to.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3125</id>
	<key><![CDATA[It may be possible to manually recover the system, by ensuring all instances of the old ObjectDefinition are lost, and that no other code references invalid elements, but it's often times not worth it, and rebooting the process is certainly the easiest solution.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3126</id>
	<key><![CDATA[Inner Classes]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3127</id>
	<key><![CDATA[All classes should be within a hierarchy, but having to type the fully qualified class name every time is very cumbersome. Instead, you can use the '''use''' keyword to tell the compiler to imply a package name.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3128</id>
	<key><![CDATA[Within the inner class, we have access to all elements of the outer class, and vice-versa,  including private elements, though an inner static class only has access to the static context, and therefore cannot call instance (non-static) elements.  However, if it has an instance of the outer class, it may access private elements on the instance.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3129</id>
	<key><![CDATA[Basic Type Manipulation]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3130</id>
	<key><![CDATA[Unlike procs, it is allowed to have multiple methods with the same name, so long as they are distinguishable between each other based on the parameter lists. This is allowed, for instance:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3131</id>
	<key><![CDATA[To "activate" the modified class, use the %s function, either from a previously defined source, or from a dynamic source, such as a command, etc.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3132</id>
	<key><![CDATA[Multiple Inheritance]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3133</id>
	<key><![CDATA[On the other hand, an instance based class is one that can only exist in the context of an instance of the parent class. You cannot create a new instance of class B without creating an instance of class A, then using that to create the new class B. To define the instance based class, leave off the static keyword.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3134</id>
	<key><![CDATA[classLibrary Manifest]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3135</id>
	<key><![CDATA[Definition vs Instance]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3136</id>
	<key><![CDATA[Overloaded Methods]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3137</id>
	<key><![CDATA[Original A.ms:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3138</id>
	<key><![CDATA[An inner class is a class that is defined within another class, for instance:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3139</id>
	<key><![CDATA[The access modifier may be left off. In that case, the behavior is a bit dynamic. If the method is defined in a parent class or interface, then the method will adopt the overridden method's access modifier. For classes, it will be whatever the parent specifically set it as, and for methods defined in an interface, they will be public. (They are necessarily public anyways, because all methods in an interface are public.) If the defined method is not overriding a method in a parent class, then the method is considered internal. Fields that have the default visibility default to internal.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3140</id>
	<key><![CDATA[The hotswap class may come from somewhere besides the terminal of course, it can be included, eval'd, etc. -->]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3141</id>
	<key><![CDATA[You may have noticed that the keyword '''static''' has been used a few times. A ''static'' variable is one that is usable outside of any instances, often times utility methods, singletons, and factory methods are defined this way. A static method can be accessed as such:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3142</id>
	<key><![CDATA[If classes were not arranged in a hierarchical structure, we would quickly find ourselves being overwhelmed with naming conflicts, if two classes had the same name. Therefore, MethodScript supports a hierarchical naming system. To define  a class within this hierarchy, simply add the package name to the class when defining it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3143</id>
	<key><![CDATA[Default Constructors]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3144</id>
	<key><![CDATA[Explicit namespacing]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3145</id>
	<key><![CDATA[Additionally, you can use the asterisk notation in a use statement, to ''use'' all the subdirectories, for instance, if we have 3 classes, named com.org.util.class1, com.org.class2, com.org.folder.class3, we can do:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3146</id>
	<key><![CDATA[Though default inheritance would work in singly inherited classes, it is really only useful when dealing with multiple inheritance. In the case where multiple objects are inherited from, and each defines their own version of a method, it may be useful to inherit the method's behavior from the non-primary inherited class. One way to do this would be to override the method yourself, and simply delegate behavior to the correct super class's method, for instance:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3147</id>
	<key><![CDATA[If we looked at MyClass1.ms, we might see the following:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3148</id>
	<key><![CDATA[Interfaces are a way to define the methods and constructors in an object, without actually implementing them. Thus, an interface is not allowed to have code, but merely provides the definitions. Since all methods in an interface are only useful as publicly accessible from outside classes, no access modifiers are allowed in the "instance" and unimplemented static methods in the interface definition, everything is implied to be public. The exception is that static elements  are allowed to be defined and implemented within an interface.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3149</id>
	<key><![CDATA[In general, the naming convention should follow the convention of organizationIdentifier.projectName, which, if followed correctly, will prevent overlapping class names, but if the organization represents a single project, it can be ok to leave off the project name. In general, the organization name should be based on a domain you control, in reverse domain order. For instance, if you own me.example.com, your organization name should be "com.example.me". This is not required, but substantially reduces confusion, especially when distributing your code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3150</id>
	<key><![CDATA[You do not need to instantiate a class before using a static method. Since a static method is essentially a convenient way to namespace a method, or otherwise associate it with similar non-static code and it isn't ''really'' part of the class, it is not possible to call a static method by dereferencing an instance. If you are creating a pure utility class, that only has methods (no members), then consider using a namespace instead.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3151</id>
	<key><![CDATA[A static inner class is easier to explain, as it is essentially just a way of further containing other classes, and is nearly purely an organizational mechanism. (Though there are a few access differences.) The inner class is defined as if the outer class is simply a package, so the fully qualified class name of B in this example is %smy.project.A.B%s and creating a new instance of class B works the same as other usual cases: %snew my.project.A.B();%s. You can also '''use''' the outer class, same as if it were a package, and then no longer need to fully qualify the inner class.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3152</id>
	<key><![CDATA[This works differently if there are no default constructors defined in the superclass, and the subclass defines constructors with different signatures (which is allowed). If so, in that case, it is required to call any constructor on the superclass manually. For instance:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3153</id>
	<key><![CDATA[It is not allowed to construct a new instance of an interface. Instead, you must instantiate an instance of a '''concrete class''', or an object that is defined with the '''class''' keyword. However, if an interface was defined with a constructor, it is allowed to dynamically construct classes that implement this interface, for instance:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3154</id>
	<key><![CDATA[Dynamic Classes]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3155</id>
	<key><![CDATA[Interfaces]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3156</id>
	<key><![CDATA[Where this becomes a problem is when two parameter lists are indistinguishable from each other.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3157</id>
	<key><![CDATA[Access Modifiers]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3158</id>
	<key><![CDATA[Now, we can use the '''dereference operator''' to access members or methods in  the object, for instance,]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3159</id>
	<key><![CDATA[Numeric literals in MethodScript source are handled as 64 bit values.  For floating point values, that is, numbers with a decimal, the max value is  and the minimum value is  . For integral values, the max value is  and the minimum value is . Undefined numbers and Infinite values are not supported.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3160</id>
	<key><![CDATA[Integral numbers may be written in source as binary or hexadecimal or octal values. For instance, 15 may be written as either %s15%s, %s0b1111%s, %s0xF%s, or %s0o17%s. Binary values must start with "0b" and may only contain the numbers "1" or "0" (base 2). Hexadecimal numbers start with "0x" and may only contain the numbers 0-9, and a-f, either lowercase or uppercase (base 16). Octal numbers must start with "0o" (zero, lowercase letter o), and may only contain 0-7 (base 8). Binary, hexadecimal, and octal values may only be integral values.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3161</id>
	<key><![CDATA[Reflective access]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3162</id>
	<key><![CDATA[It is possible to access elements in a class using reflection. This mechanism bypasses the compiler, however, and should generally not be used, unless working with objects more generally. To access a method or field reflectively, use the -> operator.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3163</id>
	<key><![CDATA[Creating an object and using an existing one are two different topics, and are thus given separate treatments. This article discusses the usage of objects, rather than how they are created, for that discussion, see [Classes].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3164</id>
	<key><![CDATA[Just like with instances, the value on the left may be a variable, though the variable must be holding a ClassType for this to work.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3165</id>
	<key><![CDATA[When using ->, this works similarly to using the dot operator, but the value in the string @method is resolved at runtime. The value returned by ''@myObject-&gt;@method'' is typed as auto, thus bypassing any compile time checks that could otherwise have been done, so in general, this should be a%sed where possible. The value on the right hand side of -> must be a string, or this is a compile error. Since the return value is auto, any further chaining would also be auto, i.e. ''@myObject-&gt;@method().toLowerCase()'' would work if @method were "toString", but could not be caught at compile time if there were an error. In cases where the method or field can't be found, an ElementNotFoundException is thrown. Using this mechanism also disregards the access restrictions on the element, though the security manager is first consulted, and a SecurityException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3166</id>
	<key><![CDATA[Both of these examples call the method "toString", which is defined in the int class. The first example calls it directly on an instance of the object, the second calls it on the variable, which in this case contains an instance of the int value 10.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3167</id>
	<key><![CDATA[Fields are accessed the same way, but without the () at the end. Methods can be chained as well, the return value on the first is used in the second, and so on.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3168</id>
	<key><![CDATA[Static Elements]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3169</id>
	<key><![CDATA[In this example, we specifically define ''@i'' as ''ClassType&lt;int&gt;'', which is the precise type of ''int''. This is the equivalent of the previous example, without auto typing. While this is possible, there are not many cases where this is useful, because the only thing that can be assigned in this value is ''int'', so it would be easier to use that value directly. However, the generic parameter can be less restricted and still correct, which may lead to more useful scenarios.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3170</id>
	<key><![CDATA[In this example, the intermediate string is directly used again. This is the same as writing:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3171</id>
	<key><![CDATA[Static elements of a class are things that are associated with the class itself, not the instances (if any) of the class. The general principals work more or less the same, but there is slightly different syntax to access the methods or fields,  is used instead, and the value on the left hand side must be a ClassType value.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3172</id>
	<key><![CDATA[In this example, @i could be any subclass of MySuperclass (or MySuperclass itself). Assuming MySuperclass defines a method named StaticMethod, then this becomes useful if MySubclass may or may not override that static method.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3173</id>
	<key><![CDATA[Using [Generics] and ClassType variables, it is possible to do more interesting things with static methods. Taking the previous example, using ClassType instead, let's take a look at a different example.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3174</id>
	<key><![CDATA[An instance of an object is some concrete instance of a Class definition. You can think of a Class as a blueprint, and an instance as the building itself. Many buildings can be built from the same blueprint, and each will have their own slightly different properties, of which can also change over time. Manipulation of one of these instances will not affect the others. A variable contains an instance of some class, though it can change as well. A variable with a type, for instance  can only contain an int, though that int can start out as 5, and be changed to 8 later. While this is a simple example, it is important to understand that there is a difference between what is currently stored in a variable, and what an instance is. Normally, when using an instance, you will not need to understand static members, which are elements (fields or methods) that are shared across all instances of that particular object, as so in this section, we will only discuss objects that do not have static methods. In order to access an instance method or field, we use the dot operator (period, '.'). This is a binary operator, meaning that there must be something on both the right and left of the operator. The thing on the left is the instance that we are wanting to operate on, and the right is the name of the method or field that we want to access. The left hand side may be either an object itself, or a variable containing some instance.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3175</id>
	<key><![CDATA[This feature is not strictly useful though, and for more strict programming styles, this is not recommended as such. However, the ClassType definition can accept a constrained type, which is discussed in the next section.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3176</id>
	<key><![CDATA[It is worth pointing out that ClassTypes are themselves instances, and have instance methods, thus the need for different operators for accessing instance methods vs static methods. To access the instance methods defined in ClassType itself, use the . operator.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3177</id>
	<key><![CDATA[Using instances]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3178</id>
	<key><![CDATA[These functions will allow you to validate that the data entered is in fact of the specified  type, or can be cast to the specified type.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3179</id>
	<key><![CDATA[Non-Exception data validation]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3180</id>
	<key><![CDATA[Both the spelling and capitalization are important when using the name of an exception. The  proper format is displayed in the header of each section.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3181</id>
	<key><![CDATA[Exception Types]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3182</id>
	<key><![CDATA[If an exception is passed all the way to the root of the script, and the interpreter has to  catch the exception, the script will terminate, and the default message will be logged to  console, and displayed to the user. In most cases, this may be enough. Also, in general,  exceptions have been massively improved, all exceptions give a much more detailed error  message, and also provide a line number to assist in debugging your scripts. Also note  that if debug-mode is on, ALL exceptions that are thrown will log to the console, even if  they are caught. This can help debug a potential problem with your script. The API has been  updated to include a list of possible exceptions that can be thrown by a function, and a  list of what the exception types are, and what might cause them to be thrown are listed below.  Please note that it is entirely possible that an exception being thrown was not noted in the  API -- this is a bug in the documentation. Please report it so that it can be corrected. Also  note that it is possible for the try function itself to throw an exception, if the arguments  are not of the proper type. Though it is possible to further catch those exceptions, it  probably means that your code is poorly designed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3183</id>
	<key><![CDATA[Exceptions are thrown by various functions at runtime. Since MScript is not yet strongly typed,  it is not possible to catch all errors at compile time. Due to this, it is useful to be able  to programmatically determine if a function failed. To this end, since version 3.1.2,  MScript has the %s function. This function takes 3 or 4 arguments:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3184</id>
	<key><![CDATA[among others.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3185</id>
	<key><![CDATA[If you are familiar with other programming languages' try-catch mechanisms, then this  construct will be familiar. The code at %stry_code%s is run normally. If any  function in the code causes an exception to be thrown, execution will halt, and program  flow will start at %scatch_code%s. The exception thrown will be stored in  %sivar%s, so that you can programmatically examine the cause of the exception.  Many times, you are only interested in a certain type of exception. This is where the optional  %sinterested_types%s variable comes in. If omitted, all exceptions are caught.  If provided, it may be a single string, or an array of strings, where the provided values  are one or more of the exception types listed below. There are a select few errors that can  be caused by runtime issues which cannot be caught, but by far, most runtime issues can be  caught in a try function. In addition, you can trigger an exception being thrown with the  %s function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3186</id>
	<key><![CDATA[When accepting user input, it is important to verify that their input is valid. Using  exceptions allows you to easily catch errors in their input.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3187</id>
	<key><![CDATA[In addition to exception handling in 3.1.2, several functions have been added that allow you  to validate data without using the try-catch framework. Make note of the existence of the  following functions:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3188</id>
	<key><![CDATA[throw%s accepts any valid exception type listed below, as well as a message.  The line number will automatically be added. This exception is then passed up the chain,  just as if any other function had thrown the exception. If the exception type is %s,  this exception is uncatchable, however, it is best practice to use the %s  function if you intend on killing a script.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3189</id>
	<key><![CDATA[There is no operational equivalent for equals_ic]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3190</id>
	<key><![CDATA[Left]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3191</id>
	<key><![CDATA[''Logical AND'']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3192</id>
	<key><![CDATA[Right]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3193</id>
	<key><![CDATA[The following operators are supported, and their order of operations is from top to bottom. Note that all  operators are simply converted to the functional notation, so if your code is incorrect, the errors you  get will specify function names. Associativity tells in which order operators with equal priority are executed. This can be left (to right), right (to left) or non-assoc (not allowed to combine or nest).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3194</id>
	<key><![CDATA[''Equality'']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3195</id>
	<key><![CDATA[Also of note, auto-concatenation always takes lowest priority to all other operations.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3196</id>
	<key><![CDATA[These are ''unary'' operators, they only operate on one identifier]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3197</id>
	<key><![CDATA[This is only considered postfix when it comes after an identifier: @i++]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3198</id>
	<key><![CDATA[Using square braces allows for array accesses, and in combination with the %s=%s sign, setting sub-indices. If the array set appears on the right hand side of an assignment, or in a general statement without an assign, it is an array_get operation. If it appears on the left hand side of an assignment, it is an array_set operation. The brackets apply to the element just preceeding, for instance with %s@var['index']%s, it is assumed that %s@var%s is an array or array like value. Empty braces, %s[]%s, when on the left hand side works as an array push, and when on the right hand side, or in a general statement without an assign, it is an array clone operation (which ultimately still uses array_get). Sub-strings within strings may be pulled out using the bracket notation as well, and slices are supported. %sarray(1, 2, 3)[1..2]%s returns an array with 2 elements in it, namely 2 and 3. %s'string'[0]%s returns 's', and %s'string'[0..1]%s returns 'st'.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3199</id>
	<key><![CDATA[Besides being less typing, it's much easier for a human to read, thanks to the operators. "@var equals 3 and 2 is less than or equal to  @var2" as opposed to "and equals @var 3 lte 2 @var2". Using parenthesis is also supported, to force an order of operations:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3200</id>
	<key><![CDATA[Consider the following perfectly valid code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3201</id>
	<key><![CDATA[''Assignment'']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3202</id>
	<key><![CDATA[''Multiplicative'']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3203</id>
	<key><![CDATA[This is fairly hard to read, and could quickly get even more complicated and harder to read the more conditions you add.  Instead, you can use ''infix'' notation now, using standard C/Java operators. The same code as above, converted to the  infix notation looks like:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3204</id>
	<key><![CDATA[''Relational'']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3205</id>
	<key><![CDATA[''Unary'']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3206</id>
	<key><![CDATA[''Exponential'']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3207</id>
	<key><![CDATA[As of version 3.3.1, CommandHelper supports traditional operators, in addition to still allowing the pure functional approach.  (In fact, the operation functions are still used internally regardless). This allows you to write more readable code, by  using more standard symbols instead of only functions. Using operators instead of functions is highly recommended for all new code, though the functional usage will continue to remain supported.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3208</id>
	<key><![CDATA[If a minus or plus sign is used to denote the sign of a number, it is handled slightly differently, for instance, ''2 + -1'' does not use any subtraction]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3209</id>
	<key><![CDATA[''Array Sub-indices'']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3210</id>
	<key><![CDATA[''Postfix'']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3211</id>
	<key><![CDATA[''Additive'']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3212</id>
	<key><![CDATA[There is no single functional equivalent except for = per se, %s@var += 1%s is equivalent to  %sassign(@var, add(@var, 1))%s, etc. += uses %s,  -= uses %s, *= uses %s, /= uses %s, and .= uses %s. Square brackets with an assign indicate that a value is being assigned to the array element at the index that is given between the square brackets. If no index is given, the value is appended to the end of the array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3213</id>
	<key><![CDATA[''Logical OR'']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3214</id>
	<key><![CDATA[&lt; &gt; &lt;= &gt;=]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3215</id>
	<key><![CDATA[Non-assoc]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3216</id>
	<key><![CDATA[Note the lack of bitwise operators, which are usually standard in other languages. These are not provided, because the  operators are infrequently used, and may be used for other operations in the future. The functions themselves,  %s, %s, and %s still exist, so no functionality has been removed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3217</id>
	<key><![CDATA[MethodScript has the ability to apply different optimization techniques, both at compile time and runtime. Due to the architecture of the engine, it is fairly straightforward to tag functions with various optimizations.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3218</id>
	<key><![CDATA[Unrestricted Functions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3219</id>
	<key><![CDATA[It's usually not necessary to define permissions to use the basic alias/macro functionality. More advanced features  like scripting may require some permissions to be defined.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3220</id>
	<key><![CDATA[Console Commands]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3221</id>
	<key><![CDATA[These are used for typical programming type tasks or retrieving basic information. They are considered to be harmless  on their own.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3222</id>
	<key><![CDATA[Star Label]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3223</id>
	<key><![CDATA[Reload all aliases from file.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3224</id>
	<key><![CDATA[To create permissions for an alias, add a label in front of it:  ''&lt;label&gt;'':/command = ...]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3225</id>
	<key><![CDATA[Gain meta information about CommandHelper.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3226</id>
	<key><![CDATA[This is useful in combination with the %shas_permission()%s function, in the case where you need super fine  grained control of the permissions for this alias. You can open up the alias to everyone, then more carefully select  the behavior from within the alias, based on the results of %shas_permission()]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3227</id>
	<key><![CDATA[Function Types]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3228</id>
	<key><![CDATA[Alias based permissions apply to all functions within an alias. Think of them like overrides. They allow for more fine  grained control since you can control the content of the alias. These permissions allow for quick, common sense default  handling of aliases. If, however, you need very fine grained control, see the section below with star aliases. Alias  based permissions only act to ''further unrestrict otherwise restricted functions''. That is, you can't use alias  permissions to directly deny access to a command in which the user would otherwise have permission for. The idea is  that if you trust a user to use all the functions in a script, then it doesn't matter so much how those functions are  arranged, they should still be able to use the command as a whole. This isn't always true though, so in those cases,  you'll need to do your own permission checking from within the alias (see the section on star permissions below).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3229</id>
	<key><![CDATA['''commandhelper.interpreter''']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3230</id>
	<key><![CDATA[Add a hyphen "'''-'''" in front of a group name to remove permissions instead.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3231</id>
	<key><![CDATA[You can use the star label as an alternative to assigning all groups to an alias, or giving all groups a permission,  then tagging the alias with that label. This opens the alias up to all users. It essentially disables permission  checking entirely for that one alias.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3232</id>
	<key><![CDATA[''Example:'' '''tasty:/eat cake = ...''' would cause people with '''commandhelper.alias.tasty''' to be given permission  to use '''/eat cake''']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3233</id>
	<key><![CDATA[There are two types of labels:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3234</id>
	<key><![CDATA[Put only letters, numbers and underscores in the label to assign the permission '''commandhelper.alias.''&lt;label&gt;'''''  to the entire alias.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3235</id>
	<key><![CDATA[Add the group names separated by forward slashes "'''/'''" to give them permission.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3236</id>
	<key><![CDATA['''commandhelper.func.use.''&lt;function name&gt;''''']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3237</id>
	<key><![CDATA[Shorthand Permissions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3238</id>
	<key><![CDATA[Group Labels]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3239</id>
	<key><![CDATA[''Example:'' '''if()''' can not be used to bypass protections or do harm.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3240</id>
	<key><![CDATA[{{TakeNote|text=These apply to ALL scripts everywhere, and so are usually not recommended for use except by advanced  users. See alias based permissions below for more granular control}}]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3241</id>
	<key><![CDATA[Alias Based Permissions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3242</id>
	<key><![CDATA[''Example:'' '''spawn_mob()''' can be used to spawn a large number of creepers.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3243</id>
	<key><![CDATA[Extra Notes]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3244</id>
	<key><![CDATA[The exception to this is the '''runas()''' function, which can override permissions in some cases. However, the function  itself is restricted and requires permission to use (see below).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3245</id>
	<key><![CDATA[Restricted Functions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3246</id>
	<key><![CDATA[These often tie into game functionality and have some potential for abuse.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3247</id>
	<key><![CDATA[Start your label with a tilde "'''~'''" to turn it into a group label.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3248</id>
	<key><![CDATA[''No permission required'']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3249</id>
	<key><![CDATA[Example: '''~mods/-admin/default:/eat cake = ...''' would give permission to mods and the default group, but remove  permissions from the admins (causing restricted functions to always fail). A user in both the admin and default group  would lose permissions due to how priority works.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3250</id>
	<key><![CDATA[Groups take priority from left to right.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3251</id>
	<key><![CDATA[These commands are provided by the plugin itself and are not aliases:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3252</id>
	<key><![CDATA[Puts your chat into [[%s|interpreter mode]]. Note that interpreter mode must also be enabled in the  preferences.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3253</id>
	<key><![CDATA[Permission is required to use these. The next section describes how to give access to these functions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3254</id>
	<key><![CDATA[No permissions are required to use these.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3255</id>
	<key><![CDATA[Internal Commands]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3256</id>
	<key><![CDATA[External Commands]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3257</id>
	<key><![CDATA['''/interpreter''']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3258</id>
	<key><![CDATA[Scripting Permissions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3259</id>
	<key><![CDATA[Run an alias. Can be used by other plugins to call aliases. '''''&lt;alias&gt;''''' includes the forward slash. ''Example:'' '''/runalias /eat cake''' would always fire off the alias '''/eat cake''']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3260</id>
	<key><![CDATA['''/runalias ''&lt;alias&gt;''''']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3261</id>
	<key><![CDATA[Function Based Permissions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3262</id>
	<key><![CDATA['''commandhelper.reloadaliases''']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3263</id>
	<key><![CDATA[''Example:'' Bob does not have permission to use the '''/give''' command. If Bob triggered an alias which calls  '''/give''', he still wouldn't be able to use it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3264</id>
	<key><![CDATA[Permission Labels]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3265</id>
	<key><![CDATA['''/commandhelper ''&lt;arguments&gt;''''']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3266</id>
	<key><![CDATA[All permissions remain the same when commands in plugins or vanilla server are called by this plugin.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3267</id>
	<key><![CDATA[Aliases can always be triggered from the console. However, some functions expecting a player will fail.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3268</id>
	<key><![CDATA['''/reloadalias''' or '''/reloadaliases''']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3269</id>
	<key><![CDATA[It is not recommended to give these permissions to untrusted users unless you know exactly what you're doing. Instead,  carefully craft aliases for them to prevent abuse. Read on to learn how to create permissions for individual aliases.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3270</id>
	<key><![CDATA[Functions are divided into two groups:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3271</id>
	<key><![CDATA[These permissions apply no matter where or how a function is used.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3272</id>
	<key><![CDATA[There are two ways to handle the permissions for restricted functions:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3273</id>
	<key><![CDATA['''commandhelper.''&lt;permission&gt;''''' can always be shortened into '''ch.''&lt;permission&gt;''''' if you feel like typing less.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3274</id>
	<key><![CDATA[Allow usage of the function ''&lt;function name&gt;'' in a script.  Basically, allow running created aliases containing this function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3275</id>
	<key><![CDATA[External Commands will generally behave as if you typed the command from console yourself.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3276</id>
	<key><![CDATA[Connections]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3277</id>
	<key><![CDATA[The first call would fail, because we are trying to write to a readonly connection.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3278</id>
	<key><![CDATA[Invalid modifiers will cause a warning to be raised during startup, but will otherwise be ignored.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3279</id>
	<key><![CDATA[Any value in this namespace, and cross namespace boundries]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3280</id>
	<key><![CDATA[Any value in this namespace, but don't cross namespace boundries]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3281</id>
	<key><![CDATA[Your code will not need to change to change where data ends up being stored.  To use this feature, you simply need to change the key -> connection mappings in  the persistence.ini file. In the configuration file,  mappings and connection aliases are stored INI style, as shown below. Local file  paths are relative to the configuration file itself.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3282</id>
	<key><![CDATA[The Persistence Network allows for a flexible, efficient, and intuitive way to store your persistence data.  The general idea is that your code doesn't need to know exactly where the data is stored, it simply needs to know what it's address is. Much like the DNS system, you don't need to remember 173.194.37.65, you just need to remember google.com. Persistence data is stored the same way as normal, as far as your code is concerned, but there is an extra layer of abstraction on top that allows you to customize precisely where data is stored  Like the DNS system, instead of knowing precisely how or where the data is stored, you just remember its  "address" (the key name). There are three factors you need to understand when dealing with the Persistence Network: connections, filters, and controls.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3283</id>
	<key><![CDATA[A filter is a simple regex style matcher; if a key matches this filter, it is stored via  this connection. Filters are specified as such: %sfilter=connection%s where  connection is either a full connection URI, or an alias, and filter is a matcher as  specified below. Filters are matched from best fit to worst fit, top to bottom. The  following wildcards are supported:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3284</id>
	<key><![CDATA[Take what information you will from the data, and feel free to run it on your system to get actual values relevant to your system, not just relative to each other on the test system.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3285</id>
	<key><![CDATA[Filters]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3286</id>
	<key><![CDATA[So, now, let's go over what would happen when we run our code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3287</id>
	<key><![CDATA[In the above example, the %stransient%s and %sread-only%s flags have been  added to the connection. The specific meaning of each flag is as follows, and they aren't always  applicable to all connection types.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3288</id>
	<key><![CDATA[In addition, several modifier types can be specified, which modify the connection type.  They are specified as extra protocols at the start of the URI.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3289</id>
	<key><![CDATA[Often times you will want to re-use a connection, but you don't want to have to re-specify the  full connection details for each filter. In this case, you can use connection aliases. A  connection alias looks just like a filter, but the filter name starts with a dollar sign.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3290</id>
	<key><![CDATA[We have data stored in a file, persistence.ser, and we want to change the mapping of  storage.player.** over to a database. If we simply changed it in the mapping file, all  the existing data would be hidden. Instead, you must export/import the  individual data beforehand, then change the mappings. Instead, we  can use the transfer tool.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3291</id>
	<key><![CDATA[Controls]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3292</id>
	<key><![CDATA[The third call will store the data in persistence.ser, in the Serialized Persistence format. Notice that our code doesn't care at all where data is actually being stored, or in what format, it is a routing layer on top of the global key=>value storage system.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3293</id>
	<key><![CDATA[This table of data was generated based on the information obtained from the following script:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3294</id>
	<key><![CDATA[using the following persistence.ini:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3295</id>
	<key><![CDATA[A note on file based URIs: The file path is specified after two forward slashes, so an absolute  path on unix looks like this: yml:///path/to/file, and an absolute path on windows looks like  this: yml://C:/path/to/file (alternatively yml://C:\path\to\file will also work). On all  platforms, a relative path would look like this: yml://path/to/file. Additionally, file based connections are '''usually''' going to be much faster, but less reliable than SQL based connections, so it is HIGHLY recommended that you use SQL connections, if nothing else, using the zero config SQLite (which is the default). The only case for a file based connection type is when using frequently read/written data, in which case a subset of your keys may be written out to a file based protocol. The %sser%s protocol is the fastest and most compact, but as it stores the data in a lump binary form, it is not (easily) editable by hand, and is prone to total data corruption in the event of any section of the file being corrupted. For a full rundown of the speed comparisons, see the chart below.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3296</id>
	<key><![CDATA[Connection Aliases]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3297</id>
	<key><![CDATA[An important observation that could be made based on this data is that SQLite is  considerably slower than many of the other protocols. This is because SQLite is less prone to data corruption, and is multiprocess safe. SQLite manages its own locking and journaling systems, so it is unlikely to corrupt if a bad write occurs, or if multiple processes are accessing it at once. Due to this, it is the default storage mechanism, despite its slower runtime. The tradeoff of data protection vs. script speed vs. inter-operability is not something that can be generically decided in all cases though, so feel free to change defaults as you see fit. Each protocol has pros and cons, so you must decide which one to use.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3298</id>
	<key><![CDATA[There are several different connection types supported, and each has a slightly different requirement:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3299</id>
	<key><![CDATA[It is sometimes necessary to transfer data from one data source to another, in which  case you can use the data manager tools to do so. This should be done while the server  is off, to ensure corruption does not occur, though it is possible to do this with the  server running if you're careful. To transfer data, simply specify the keys to match,  and the destination connection. The data will be transferred appropriately. If a  conflict would occur, you will interactively be prompted with an action. After transferring,  these keys, you should update your persistence.ini file to reflect the new mappings.  This is the appropriate way to make modifications  to your data mappings, while ensuring that no data is lost in the process. Consider the  following scenario:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3300</id>
	<key><![CDATA[For more information on these tools and more, [[%s|see this article]].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3301</id>
	<key><![CDATA[Filters are what map namespaces to connections. The configuration file (persistence.ini)  is used to specify the actual filters. (An example is shown below). It is important to note that  the namespace conventions followed by the filter system map to the REAL namespace conventions, not  the namespaces you use in code. For instance, if you were to make a call to  %sstore_value('name.of.key', 'value')%s, the value will actually be stored in  %sstorage.name.of.key%s. For a more detailed description of the namespaces, see  [[%s|this wiki page]].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3302</id>
	<key><![CDATA[Then, elsewhere, instead of rewriting the entire connection string, you may simply use %s$connection]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3303</id>
	<key><![CDATA[The second call would store the data in the SQLite database, stored in the file persistence.db. The key will be the full key 'storage.players.player.info' though, it does not presume that the file is inherently aware of the key prefix, even if it is unique to this file.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3304</id>
	<key><![CDATA[Sometimes, however, you have data in a source that isn't currently mapped in. In this  case, you want to use the merge tool. Accordingly, if you want  to copy data, and not move it, you also want to use the merge tool. You can also use the  data manager to show hidden data, that is, data that is stored in the data store  somewhere, but isn't accessible due to bad mappings.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3305</id>
	<key><![CDATA[There are special implementation considerations you must take into account if you are writing  an external system that integrates with the persistence network, (including if you edit the  files by hand), so you should read up on the [[%s|Persistence Network Integration]]  guide before you attempt to edit the output files, or otherwise care about the internal storage specifications.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3306</id>
	<key><![CDATA[Data Source Comparisons]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3307</id>
	<key><![CDATA[A connection is a read/write or read-only data source, to which persistence data is mapped. There are several supported formats, and there is the potential to add more in the future. In your configuration file, a connection can be aliased, to make re-specifying a connection  easier, but the actual connection specification is a URI that maps to a specific data source.  For instance, the default SQLite format is simply a pointer to a file:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3308</id>
	<key><![CDATA[Then it would be stored in $connection1, since that is a more specific match. It is defined  as a more specific match, because, minus wildcards, more namespaces match. This mechanism of  filter competition allows for very specific control over what data goes where, while also not  having to worry about providing specific filters for all possible namespaces. If not otherwise  specified, or if the connection is invalid, The filter ** is ALWAYS defined to be a connection  to the default serialized persistence file, so all otherwise unmatched keys will go there.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3309</id>
	<key><![CDATA[If we are attempting to store a value in "storage.key.name", and we have the following  two filters defined:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3310</id>
	<key><![CDATA[This guide serves as a technical standard for the Persistence Network format. The guide is not meant for script writers, but rather those that are trying to write integration tools to work with data sources created by the Persistence, or otherwise understand the internals.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3311</id>
	<key><![CDATA[Storing a value uses SET, getting a value uses GET, and clearing a value uses DEL. For multi get, KEYS is used to determine the keyset (with a filter to reduce the search set), which then uses GET to get the individual keys.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3312</id>
	<key><![CDATA[As you can see, given this hierarchical data structure, it is impossible to merge the two structures as is. Instead, the special key "_" is reserved for "root" values, and should be taken to mean "the value stored here is the value for my parent namespace". Merging the data shown above yields this json:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3313</id>
	<key><![CDATA[INI]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3314</id>
	<key><![CDATA[Temporary Memory]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3315</id>
	<key><![CDATA[JSON]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3316</id>
	<key><![CDATA[YML data is stored as a hierarchy. The format follows the standard YML format, which is plain text.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3317</id>
	<key><![CDATA[Keys are composed of zero or more namespaces, plus the key name. In practice, there will always be at least one namespace. Namespaces must follow the regex "[a-zA-Z0-9_]+" though namespaces may not be named exactly "_". This is to allow some data sources that can use a hierarchy to reserve a place for a value stored at the root of a namespace. For instance, assume we want to store a value at "a.b" and "a.b.c".  In a hierarchical data source, "a" would be an array, and so would "b", and "c" would be a single value. But doing this prevents the single value from being stored in "b". Consider the json:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3318</id>
	<key><![CDATA[will be used.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3319</id>
	<key><![CDATA[MySQL]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3320</id>
	<key><![CDATA[SQLite]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3321</id>
	<key><![CDATA[Redis is a flat data structure. As Redis is a key-value data store, it is an exceptionally good fit for the Persistence Network. Keys and values are stored as is, using the standard Redis commands.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3322</id>
	<key><![CDATA[MySQL data is a flat data structure. Data is stored in a table with special column requirements.  There are three columns in the table, and the table name is determined by the user.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3323</id>
	<key><![CDATA[Data Sources]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3324</id>
	<key><![CDATA[JSON data is stored using a hierarchy. The values are double encoded with json to prevent any issues with differentiating namespace hierarchy vs internal data structures, though this causes extra space to be used.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3325</id>
	<key><![CDATA[Temporary memory is a flat data structure. Since this data is completely internal, no other processes can access the data. However, other code running in the same memory space can access the data via the MemoryDataSource static methods. The data is stored in a Map&lt;String, String&gt;. All the methods in the MemoryDataSource class are thread safe, so multiple threads may concurrently access those databases with no issues.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3326</id>
	<key><![CDATA[In Java code, this uses the ObjectOutputStream/ObjectInputStream utility classes. As Strings are serializable, this method should always work, and is immune to future changes in the data itself.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3327</id>
	<key><![CDATA[Redis]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3328</id>
	<key><![CDATA[SQLite data is a flat data structure. Since TEXT columns can be indexed in SQLite, the key column is the primary key. The database may contain multiple tables, but only the table created with the query:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3329</id>
	<key><![CDATA[This hierarchical structure only applies to Data Sources that actually have a hierarchy of data, not flat storage, for instance, ini.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3330</id>
	<key><![CDATA[Data sources are meant to be completely agnostic to the value that they are storing. All data must ultimately be able to be stored and read in as strings. The upper level code submits a string (typically a json string, in the case of MethodScript data types) and the data source is responsible for storing that data in the best way possible, then returning the data exactly as originally stored. Each data source may further encode the string sent in, but it must decode it first, before returning the data.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3331</id>
	<key><![CDATA[INI data is a flat data structure. INI data follows the standard INI format, i.e. %skey=value\n%s. Lines starting with any amount of whitespace then %s#%s are considered comments, and are ignored, though lines with a hash character elsewhere in the line are taken as literal hashes. Since keys may not contain non-numeric characters, this will never cause an issue for programmatically generated data. Newlines indicate the end of the value, but internally, all newlines will have been escaped to "\n" before transmission to the data source, so this shouldn't cause an issue either. The value that is grabbed if there are duplicate keys is undefined.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3332</id>
	<key><![CDATA[A list of the data source types and any notes specific to that type follow:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3333</id>
	<key><![CDATA[Serialized Persistence is a flat data structure. The data is stored using the  [%s Java Serialization Protocol]. There is a single object stored, a HashMap&lt;String, String&gt; of the key/value pairs.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3334</id>
	<key><![CDATA[Serialized Persistence]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3335</id>
	<key><![CDATA[When a data source is considered a "flat" data source, the key is a single dot separated string, i.e. "a.b.c".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3336</id>
	<key><![CDATA[Selections, inserts, etc, must take the key and binary hash it with the UNHEX and MD5 functions:  %sUNHEX(MD5('key'))%s. This provides a way for the key to be unlimited length, yet still allow the table to be indexed. Though unlikely, collisions are possible, but the plaintext key is also used in queries to ensure that the correct row is affected.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3337</id>
	<key><![CDATA[YML]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3338</id>
	<key><![CDATA[The columns are defined by the query:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3339</id>
	<key><![CDATA[Expressions allow for more complex mathematical expressions to be evaluated. There are two modes for expressions, inequality mode, and match mode. Match mode is just a shortcut to a normal math match, but inequality mode allows for more powerful expressions. Say we want to perform some action whenever a player teleports to some y that is greater than 90. This prefilter requires WorldEdit.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3340</id>
	<key><![CDATA[As you can see, macros just expand the types of matches that can be done on the input data. Whenever applicable, macro is used in favor of more specific types, so you are free to use which syntax best suites your needs. Here is another example:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3341</id>
	<key><![CDATA[Strictly speaking, prefilters are not needed. A series of checks in the event itself can be used to determine if an event should run. However, using prefilters makes it much easier to control events, and allows for better optimization on the back end of the code. Each event will list what prefilters it supports, and what type the prefilter is. Prefilters add restrictions, by default if no prefilters are added, the event will run. There are 6 types of prefilters, listed below, with examples.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3342</id>
	<key><![CDATA[Macro]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3343</id>
	<key><![CDATA[Sometimes a parameter may makes sense to use multiple filter types. In that case, it is a macro filter. The type of filter is detected by examining the filter given. If the filter starts and ends with '/', it is a regex. If it is surrounded by parenthesis, it considered an expression, and otherwise is considered a string match.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3344</id>
	<key><![CDATA[The variable in the expression is the key of the entry, in this case, y is replaced with the y value of the event. If the expression resolves to true, the filter passes, if not, the filter fails, and the event is not run. Expressions must have parenthesis around them to be considered value expressions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3345</id>
	<key><![CDATA[Item Match]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3346</id>
	<key><![CDATA[Not all things will be doable with prefilters. For very complex filters, you may still need to use if statements inside the code itself. However, whenever possible, you should use prefilters, both for their ease of use, and their potential for code optimization.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3347</id>
	<key><![CDATA[Expression]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3348</id>
	<key><![CDATA[Math Match]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3349</id>
	<key><![CDATA[Math matches will match if two values are mathematically equivalent. 3.0 and 3 would not match in a strict string match, but they are mathematically equivalent.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3350</id>
	<key><![CDATA[Item matches are string matches for the name of the item type. (eg. 'RED_WOOL')]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3351</id>
	<key><![CDATA[String matches are exact string matches. This is pretty straightforward.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3352</id>
	<key><![CDATA[String Match]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3353</id>
	<key><![CDATA[Regex matches allow for a more complex way of matching a value. Perhaps you want to do something when all players with the letters abc anywhere in their name interact with an object.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3354</id>
	<key><![CDATA[3 - Procedure execution times are shown. The parameters passed to the procedure will be displayed as well, so you can differentiate between various procedure executions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3355</id>
	<key><![CDATA[The profiler shows different information based on your granularity, but this chart shows the general types of  information shown. As you go to more verbose, more information is shown, as well as the lower levels' information.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3356</id>
	<key><![CDATA[The profiler is controlled with the profiler.config file, which is created in the CommandHelper directory. There are a  few settings of interest, each documented in the file. To turn profiling on, set the "profiler-on" switch to true. Note  that profiling can introduce up to a one millisecond lag '''per triggered profile point''', (untriggered profile points  take about .001ms) so turning profiling on and leaving it on during normal server operation is not recommended.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3357</id>
	<key><![CDATA[Setting the granularity to a higher setting will cause more profile points to be triggered, so if debugging in a live  scenario, it is best to turn the granularity to a lower number. Typically, 1 is sufficient to identify general slow  points in your script, which can then be moved to a test server, with a high granularity.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3358</id>
	<key><![CDATA[4 - File IO times are shown. Sometimes, file IO will appear out of sequence, because IO is sometimes asynchronous, however, the times will still be recorded. The following functions run times will be shown: read(), get_values(), get_value(), store_value(), clear_value(), has_value().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3359</id>
	<key><![CDATA[What types of information is profiled?]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3360</id>
	<key><![CDATA[1 - Only high level information is shown about how long aliases, events, execution queue, and set_timeout/set_interval tasks took. Compilation of all MethodScript files is logged.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3361</id>
	<key><![CDATA[MethodScript Inefficiencies]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3362</id>
	<key><![CDATA[Results can't really be compared with each other, unless it came from the same server under similar loads. The results are only meaningful when compared against benchmarks, which can be set by running a few simple commands that do almost nothing, and comparing against that, or comparing against two different scripts run at the same time.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3363</id>
	<key><![CDATA[Comparing Results]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3364</id>
	<key><![CDATA[Sometimes, the java garbage collector introduces slowness, which can't be controlled at all. The profiler can't do anything about this, but it will tell you when the GC was run on the individual profile points, which will allow you to adjust your times accordingly. This will typically invalidate that set of results however, so it is good to know what results are considered "calibrated". The Garbage Collector tends to add at LEAST 5 ms, though this will vary greatly from machine to machine.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3365</id>
	<key><![CDATA[Java Garbage Collection]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3366</id>
	<key><![CDATA[The profiler is a built in mechanism to assist you in debugging troublesome scripts that take longer than expected. In  general, CH is designed to be fast; performance is a key concern, but being that you have very fine control over its  operation, it is always possible to make a poorly designed script that takes too long to complete. Various mechanisms  exist to help you fix a script that takes too long (namely the [[%s|Execution Queue]]) but  ''identifying'' a laggy script can be a challenge. This is where the profiler comes in.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3367</id>
	<key><![CDATA[It is possible that you identify slow spots in MethodScript itself. That is great! Setting the granularity to 5 will  spit out how long each and every native function takes, and if you find that there are functions that take exceedingly  long, then file a bug report, and hopefully performance can be improved.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3368</id>
	<key><![CDATA[5 - Every single function is individually profiled. The parameters passed to each function will be shown as well. WARNING: This is extremely CPU intensive, and should only be used on a test server. Note that execution times may appear out of order when using asynchronous tasks, such as set_timeout, etc. This is normal. Compilation times are also logged, per file.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3369</id>
	<key><![CDATA[2 - Loop times are shown; for, foreach, while, and dowhile. The parameters passed to the loops will be displayed as well, so you can differentiate between various loop sizes. Compilation of MethodScript files are individually logged.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3370</id>
	<key><![CDATA[The profiles.xml file is located in the %sprefs/%s folder, and has at minimum, a root %sprofiles%s tag. Different functions will require different types of profile information, but in general, the bare minimum profile will look like this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3371</id>
	<key><![CDATA[In general, it is best to take advantage of this, and ensure that your profiles.xml file is never exposed or otherwise committed to a public repository. Meanwhile, your code may be freely shared, and the various profiles can be re-created by other users, using their own connection information, without having to edit your code directly.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3372</id>
	<key><![CDATA[Profiles allow you to keep sensitive credential information out of your code directly. Various methods may ask for a "profile" instead of or in addition to an associative array with various configuration options.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3373</id>
	<key><![CDATA[The profileName is what is referenced in code. For instance, in the %s function, the first parameter may be either the profile name, or an array specifying the same information as the profile xml. Different functions will require different extra information in the profile, some may be optional, some required. See the individual functions for more information about the parameters in particular.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3374</id>
	<key><![CDATA[MethodScript uses Java style regexes, so in general, any regex guides you find online for Java will apply to  MethodScript as well, with the obvious caveat that the actual functions used in Java will vary. Regex is a non-trivial  subject, and entire websites have been dedicated to it, so it is not in the scope of this wiki to cover it. For further  reading, [%s see this website]. A "test harness" script is also provided with the  [[%s|installable Local Packages]]. The package to install is  "RegexTestHarness".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3375</id>
	<key><![CDATA['''Networking''']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3376</id>
	<key><![CDATA[This page serves as a general guide for the features I intend on implementing. Note that I reserve the right to modify,  rearrange, add, remove, eat, or delete this list or any parts of it at any given time, with or without notice to you or  your lawyers. :D However, more than likely, if there is a feature on this list, I plan to add it at some point, but it  may get shuffled around some in the process. Items shown in '''bold''' are major tasks, and their completion would  likely bump the major or minor version number (and will take longer), while other features would probably only bump  the supplemental version number, unless several were released at once. Sub bullets must wait on their parent task being  completed before they could be done. Adding more raw functions to allow more hooks into the game itself or functions to  simplify common programming tasks are continually being added. Also note that these tasks are not in any particular  order, though the main bullet points are roughly in order.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3377</id>
	<key><![CDATA['''Mob Control''']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3378</id>
	<key><![CDATA['''Javadoc for Procedures''' (Smart comments. There now exists a class in the pure utilities that is capable of parsing this into a usable format)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3379</id>
	<key><![CDATA['''Framework to allow remote programs to connect to the server and execute scripts''' (with security built in)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3380</id>
	<key><![CDATA[[[%s|IRC functionality]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3381</id>
	<key><![CDATA[Raw sockets]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3382</id>
	<key><![CDATA[Self creating documentation]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3383</id>
	<key><![CDATA['''Full blown debugger''' (Netbeans plugin is the end goal, though cmdline tools (gdb style) will be implemented first, to secure the raw functionality. This depends on Networking, because the debugger must support remotes first, which will also cover local debugging)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3384</id>
	<key><![CDATA[In addition, MethodScript borrows strong points from other languages, which in addition to making it easier to learn for  people who have exposure to other languages, also helps it to stand on the shoulders of giants, and is able to "start  from scratch" and get rid of features that aren't desirable with other languages, while not having to worry about losing  backwards compatibility.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3385</id>
	<key><![CDATA[[[%s|'''Object Oriented Design''']]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3386</id>
	<key><![CDATA['''Long Term''']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3387</id>
	<key><![CDATA[This is a [%s valid question]. What does MethodScript offer that other scripting languages don't?  Simplicity. This has several benefits, and drawbacks that we must consider. In general, MethodScript is much easier to  learn than other languages. In essence, everything is a function, including common control structures. This makes many  concepts easier to learn, and makes for easily embeddable scripts. This is demonstrated by MethodScripts being embedded  in the aliases.msa file. Each script is run separately from each other, and is embedded inside a simpler format, which  facilitates easier integration into existing paradigms. Secondly, as a scripting language, it is easy to transmit in  plain text, which makes it perfect for simple configuration and customization. Finally, it has many built in features  that simplify development, such as the include() function. With everything, there are drawbacks though. Since it is not  strongly typed, this makes it easier to use, but harder to maintain. It is not possible to easily refactor dynamic  elements. Though it will be psuedo object oriented, it is somewhat added on top, it wasn't initially designed with this  in mind. Though the design of the object oriented features should be properly designed, they are being designed inside  the existing constraints of the non-object oriented features.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3388</id>
	<key><![CDATA['''Low Level Packet Handling''']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3389</id>
	<key><![CDATA['''Serialization of compiled scripts''' (That is, the ability to write out the compiled scripts to file system, allowing the scripts to bypass compilation at startup. This would speed up startup time significantly, but this feature must be done right, too many other build systems get this wrong, and it causes more problems than it's worth sometimes)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3390</id>
	<key><![CDATA['''Localizations/Translation''' (possibly [%s automatic] too)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3391</id>
	<key><![CDATA[Eventually, it is the hope that MethodScript be made into a generic framework that allows for any application to easily  implement it's own functions that can be applied to whatever domain is being used. Many of the functions are completely  independent of Minecraft, and could be included in a "core" that is distributed, and each application can define their  own API. With the built in documentation features, it would be easy to expand (and keep the documentation up-to-date and  useful).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3392</id>
	<key><![CDATA[''Why choose MethodScript over Javascript? Or PHP? Or AwesomeScript? Or ThatOtherScript?'']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3393</id>
	<key><![CDATA[File system functionality (This will only happen after completion of a "virtual filesystem", to allow for strict sandboxing of scripts)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3394</id>
	<key><![CDATA[Finally, unlike JavaScript, MethodScript's documentation is a priority, and documentation is created from the  authoritative source. The website's goal is to provide comprehensive documentation and examples, which helps promote  understanding.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3395</id>
	<key><![CDATA['''Web Server that serves up the automatically created documentation''' (with options for limiting access)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3396</id>
	<key><![CDATA['''SSP version of CommandHelper''']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3397</id>
	<key><![CDATA['''External Task Manager''' (This will likely go along with the Netbeans plugin)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3398</id>
	<key><![CDATA['''MethodScript STL''' (Also depends on the debugger and multithreading. I'm not gonna start writing complex MScript code without a good way to find errors in it.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3399</id>
	<key><![CDATA[A routine is created with the routine function. The most basic routine will accept a closure with no arguments.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3400</id>
	<key><![CDATA[we would end up seeing an interweaving of routine 1 and 2's output jumbled together. The order in which routines run (or complete) is generally undefined unless locks or channels are involved.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3401</id>
	<key><![CDATA[but this code isn't an atomic operation, so if the lock were closed between the call to _is_lock_open() and rlock(), an exception would be thrown, which is not what we want in this case. If you can guarantee that either the lock will never be closed, or you want an exception to be thrown if the lock is closed, rlock() is an appropriate choice.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3402</id>
	<key><![CDATA[Channeling]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3403</id>
	<key><![CDATA[Blocking calls]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3404</id>
	<key><![CDATA[Since routines create a new thread, multiple activities might be running at once. For instance, if we ran the following code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3405</id>
	<key><![CDATA[Another, more flexible form of communication is through blocking calls. %s, %s, %s, and %s are the basis of this type of communication. These methods are a communication signal, but do not pass data around via "pipe" like structures, but simply signal to other routines that some sort of operation has completed. Usually, the routines will be communicating the data through other means, perhaps via import/export or some other way. We can slightly modify the producer/consumer example above to show a good use of blocking calls.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3406</id>
	<key><![CDATA[Locks and Routines]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3407</id>
	<key><![CDATA[This will cause the routines that are currently blocked to throw the exception, and future calls to rwait will immediately throw as well. This provides a convenient "out" for the routines, if an indeterminant amount of data is being processed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3408</id>
	<key><![CDATA[This kicks off the new routine, in its own, new thread, and the routine function itself returns immediately. The closure will be executed immediately, and any return value will be ignored, though returning anything but %s from this closure will trigger a warning. The closure may accept parameters, but this is addressed below.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3409</id>
	<key><![CDATA[This provides a "thread pool" of 5 routines which concurrently process the data that was divided up by the producer. Once all the consumers are occupied with the data, the producer will pause until one of the consumers becomes available, at which point it will pass the data to the now This example is a bit buggy, however, because once the producer is done, the consumers will all still be idling, waiting for data. This is where the %s function is used.  Here is a rewritten example that will behave better, and actually shut down eventually.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3410</id>
	<key><![CDATA[To use a channel, you must first obtain a lock. This is a special primitive data type that is inherently synchronized (and passed by value to closures),  and is passed to various functions to return data via channeling. This lock represents some inherent communication channel that your routines will communicate across. Routines are not limited to just one lock at a time, however. To create a lock, use the %s function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3411</id>
	<key><![CDATA[Concurrency with routines]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3412</id>
	<key><![CDATA[In general, routines shouldn't share existing memory across routines (and in fact may not be able to easily, because of the nature of closures), but instead should use channeling. A channel is a communication method amongst routines that is inherently synchronized. Essentially, these allow routines to safely pass data to other routines that are waiting for that data (or will be waiting for it).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3413</id>
	<key><![CDATA[In this example, after the producer loops through the data, the lock is closed. At this point, any future calls to rwait (or rsignal, for that matter) will cause a LockClosedException to be thrown. FIXME: I'm not sure about this feature -&gt;All exception types except this will cause the normal error handling process to occur, but in this case, the routine knows to catch it and silently terminate, though it can be caught and handled separately.&lt;-]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3414</id>
	<key><![CDATA[When the call to runlock_all is made, all routines waiting for the lock using rlock will unblock, and resume operation. runlock() works the same as runlock_all(), but only causes one blocked routine to resume (chosen randomly). If the lock is closed, rlock() will throw a LockClosedException, so we use rlock_open() instead. rlock_open() returns if either a normal call to rlock() would cause the function to return, or the lock is closed. Normally rlock() would throw an exception if the lock were closed, but rlock_open() works as an atomic statement. The non-atomic equivalent of this would be]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3415</id>
	<key><![CDATA[A %slock%s object is a special MethodScript data type, which provides two types of functionality to routines that have complex interaction with each other. The first method is used through channeling, the second is through blocking calls.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3416</id>
	<key><![CDATA[After the lock is created, you can use the channel to signal to other routines, or wait for another routine to signal it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3417</id>
	<key><![CDATA[Creating a Routine]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3418</id>
	<key><![CDATA[Routines provide a way for advanced script writers to make scripts more efficient by moving some code into other execution units which can run parallel to others. Routines are similar to threads in other languages, but are loosely based of of "goroutines" from the Go language. Routines are largely independent from each other; most memory is not shared between them, because they use closures to encapsulate variables, which prevents sharing of primitives. References are shared, so arrays are shared across instances, but arrays are inherently synchronized to allow multiple routines to change data without race conditions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3419</id>
	<key><![CDATA[Assume that both the the producer and consumers need to do all the processing off the main thread, so we know that the bulk of all our processing will be done in routines. We can set up the producer and consumers in the main thread, then the consumers will wait until the producer has completely finished its processing.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3420</id>
	<key><![CDATA[Here is a basic example of using a dynamic number of routines.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3421</id>
	<key><![CDATA[Both %s and %s are blocking calls; they will not return until both are being called at the same time. Usually this means that you want both the signal and wait calls to be within a routine, however, there is no rule that you must do so, but each routine will block until each side of the "pipe" is activated. Multiple routines may be waiting for a signal. In this case, barring various options being set, one of the waiting routines is picked at random and the two ends of the channel are connected at that point. This is useful in the case of a producer/consumer setup, where there is only one producer, but multiple consumers (perhaps created in a loop), and the consumers will take longer than the producer.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3422</id>
	<key><![CDATA[Debugger]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3423</id>
	<key><![CDATA[The debugger is designed to help server owners diagnose problems for event related issues. Say that we have two plugins  that aren't behaving well together. We can turn on the debugger, target that particular event, and print out information  about what plugins did what, and in what order as well.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3424</id>
	<key><![CDATA[What is a profiler?]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3425</id>
	<key><![CDATA[With this framework in place however, it is very easy for us to see and respond to any event on the server, even events  that are being delivered to other plugins. So, for the profiler, we simply start a timer right before we fire the event,  and stop it right after it finishes. For the debugger, we spit out information about information in the event, which  plugin it's going to, and what listener is responding to it. With the addition of the perf4j framework, we can also then  aggregate performance data.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3426</id>
	<key><![CDATA[These tools can be controlled on the fly from within a script. Here are example scripts that will start and stop the  profiler/debugger, and can be modified to suit your needs.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3427</id>
	<key><![CDATA[In addition to server owners, the debugger can provide more information for plugin authors. It's decently difficult to  set up a proper debugging environment for your plugin, so instead, it may be easy enough to install CommandHelper, and  have it log information about events as your plugin is running.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3428</id>
	<key><![CDATA[Also, developers of other plugins can take advantage of this, by installing CommandHelper next to their plugin, and  having CommandHelper log performance of their plugin. This will allow them to figure out what parts of the plugin need  to be focused on for improvement.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3429</id>
	<key><![CDATA[Example Scripts]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3430</id>
	<key><![CDATA[This will enable the debugger, but we haven't set any filters yet. Output won't actually occur until we set filters  though, because the event filter is a whitelist filter.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3431</id>
	<key><![CDATA[In addition, you can add filters to narrow which plugins you are interested in with the set_debug_plugin_filter. This is  a semi-whitelist. If the list is empty, all plugins are logged, but if you add 1+ plugins to the list, only those  plugins are shown. The name of the plugin may not be it's commonly referred to name. To determine a plugin's name, you  can use the dump_listeners() function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3432</id>
	<key><![CDATA[The profiler is meant for anyone that wants to dig down further and analyze the performance of their server. Let's say  that you've recently installed several plugins, and now your server performance has slowed to a crawl. Instead of  uninstalling these plugins one at a time, we can log performance, and quickly determine which plugin is the problem.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3433</id>
	<key><![CDATA[Profiler]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3434</id>
	<key><![CDATA[Ok, so now we know what a Profiler and Debugger are, but what exactly can be done with CommandHelper specifically?  CommandHelper has a play-dirty mode already. This mode allows for CommandHelper to hook deep in to Bukkit's event  system. By default, play-dirty mode is off, because I break many rules to get it to work properly. Essentially what  happens is that CommandHelper ''injects'' it's own event firing system into Bukkit, essentially replacing Bukkit's own  system. With play-dirty mode, all events actually fire off through CommandHelper. The original purpose of this was to be  able to fully manage commands. Since CommandHelper doesn't do anything initially when you install it, any action taken  by the plugin is a direct command from the server administrator. Because of this, I take certain liberties to overwrite  and manipulate other plugin's behavior, which would normally be unacceptable.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3435</id>
	<key><![CDATA[The main function to enable logging is the debug_log_events function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3436</id>
	<key><![CDATA[CommandHelper comes bundled with a server wide event debugger and profiler. In fact, this can be used by itself, even if  you don't use the rest of the plugin at all. To explain this feature fully, it should first be explained what a profiler  and debugger actually are, a bit about Bukkit itself, and who the intended users of this feature are.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3437</id>
	<key><![CDATA[If an event is logged, it is written out to the performance logging file, and then CH itself is done. So how do we get  performance data from this? First, you must download the  [%s perf4j library]. Place this file in the  folder that your logs are being created in, then open up a terminal, and run %sjava -jar perf4j.jar --help%s.  This will display all the actions you can do with perf4j. Once of the more useful features is to create an aggregate  summary of all the data. %sjava -jar perf4j.jar nameOfLogFile.log -o aggregate.csv -f csv%s will create a csv  file that can be opened in excel. There are other options as well. (I have not quite yet figured out how to generate  graphs.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3438</id>
	<key><![CDATA[Who is this feature meant for?]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3439</id>
	<key><![CDATA[What is a debugger?]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3440</id>
	<key><![CDATA[This is a simplistic form of debugging. How CommandHelper fits in with all of this is discussed below.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3441</id>
	<key><![CDATA[toEnable is a boolean, and turns debugging on or off. level is an integer from 1-5, and sets the verbosity level of the  output. logToScreen is a boolean, which defaults to false. If set to true, in addition to logging to a file, it will log  to the server console. This can be useful for plugin developers, but if you are running a server, then logging to  console will cause the same information to log to to two places. If you a server owner, it is better to use the tail -f  command on a unix machine to view the debug data live.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3442</id>
	<key><![CDATA[Ok, so now we know how long it took to run. We could echo this out or log it to a file, or do any number of things with  this information. But now, what if there were other factors involved? What if maybe sometimes we ended up writing a  large file out, or maybe we're trying to test it out on different computers, and some of them are slower than others?  Maybe we want to get an average case for this. In order to calculate an average, we have to get several runs of the  function to test it. This is where perf4j comes in. Perf4j is a framework that allows for easy calculations of  statistical information about a process. We simply have to log the information we are interested in to file, and perf4j  converts it into an easy to digest summary of the data. We will discuss this more below, when we talk about how to  actually activate the profiler in CommandHelper.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3443</id>
	<key><![CDATA[In general, a debugger is a program that hooks into another program, and allows us to see information about that program  at a given snapshot in time. More complex debuggers will allow us to pause program execution, and dynamically examine  parts of the program, but in general, the simplest debugger is a print statement. If we were writing a program, and we  wanted to see what the following value was:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3444</id>
	<key><![CDATA[then the simplest thing we can do is:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3445</id>
	<key><![CDATA[A profiler allows you to get statistics about the performance of a particular portion of software. For instance, let's  say you write some software, and it writes out information to a file. In general, to see how well this performs, you use  this pseudo code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3446</id>
	<key><![CDATA[The profiler is activated using the enable_performance_logging function. Events are filtered using the  set_debug_event_filter and set_debug_plugin_filter, though debugging and performance logging can be activated separately  from each other.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3447</id>
	<key><![CDATA[This takes an array of the event types we are interested in. Calling this function will replace the old filter. The list  of all the valid event types can be displayed by calling dump_listeners(%s), which will display all the event types.  Provide an array of event types you are interested, and they will be logged. If you '''really''' are interested in every  single event, you can call set_debug_event_filter('*'), which will add all the events.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3448</id>
	<key><![CDATA[A word on Bukkit and Events]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3449</id>
	<key><![CDATA[The debugger has several levels of verbosity. The lower the verbosity level, the less information is displayed. This is  a double edged sword. On one hand, less information is easier to understand, but may not contain the information you  actually want. On the other hand, too much information can cause data blindness, the information we want is there, but  it's buried deep within noise, and so isn't useful. This is why there are three mechanisms for focusing the information  that is displayed. Verbosity, event filters, and plugin filters.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3450</id>
	<key><![CDATA[Both the performance logger and debugger can be enabled on-the-fly, through standard CommandHelper functions. These  functions are both restricted by default, and can be completely disabled (and are by default) in the preferences file.  Set allow-debug-logging to true and allow-profiling to true to enable the respective functions. To properly use the  profiler, the debugger must also be enabled. To enable the entire operation to occur, CommandHelper must be allowed to  inject into the event system, so play-dirty mode must be on as well. There are also preferences to establish where data  is logged to, the debug-log-file, and profiling-file settings. These both support date and timestamp variables, so you  can automatically segment your log files by time.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3451</id>
	<key><![CDATA[Change the ''directory'' value to wherever you intend on installing this locally. Make sure this directory path ends in ''/docs''.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3452</id>
	<key><![CDATA[Rebuild the project normally, using maven. (Note that it seems that maven doesn't always pick up the changes to resource files, so you may need to do clean and build.) Then, from the cmdline, run]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3453</id>
	<key><![CDATA[ALIAS|code - This syntax highlights mscript code that is defined in an msa file]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3454</id>
	<key><![CDATA[There are several others worth looking at, see the DocGenTemplate.java source code for each.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3455</id>
	<key><![CDATA[The client renders the wiki formatting, as well as the syntax highlighting for non-mscript code blocks. Most simple wiki markup is supported, including tables. See the [%s page here] for a cheat sheet for this markup. Wiki templates (double left curly brace/double right curly brace) do not work, except for  a very limited subset, including function, object, keyword, and TakeNote. Raw HTML is also supported, including script tags, however, html should be a%sed whenever possible.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3456</id>
	<key><![CDATA[Different pages are generated from different sources, and may follow slightly different deployment rules, to see the specific rules that are followed, see the SiteDeploy.java file. Note that several file types are automatically scanned for, and their mere existence in the resources is enough to cause them to be processed. Other types of files are manually listed, and may be handled differently. Consult the SiteDeploy file to see how each page is exactly generated.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3457</id>
	<key><![CDATA[There are three processing stages. First, when the site is deployed, there is some template replacement done then. The java uses %s&lt;&#37;%s and %s&#37;&gt;%s or for simple templates where arguments need not also be parsed, just %s&#37;&#37;%s and %s&#37;&#37;%s. These allow the static pages to replace information in them at deploy time, using the jar itself to do the templating work. This is useful for pages that need information from the codebase, or it would in general be easier to parse the template in java instead of javascript. The template replacement has the template name, and can also accept arguments, for instance  %s&lt;&#37;TEMPLATE_NAME&#37;&gt;%s and for templates with arguments:  %s&lt;&#37;TEMPLATE_NAME|argument&#37;&gt;%s where TEMPLATE_NAME is the name of the template, and arguments are pipe separated. If the arguments have nested templates, they must use &lt;&#37; &#37;&gt;, the double percent variety cannot be nested. Depending on where exactly the page contents were generated from, the templates that are available may vary, and you'll need to trace the code for that specific page to see what templates are available. By and large however, all templates defined in DocGenTemplates.java are available everywhere.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3458</id>
	<key><![CDATA[Several steps of the rendering stage are (currently) handled in javascript, including the wiki parsing, and syntax highlighting for non-mscript code blocks.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3459</id>
	<key><![CDATA[Following these directions will help you view the site locally:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3460</id>
	<key><![CDATA[Client side rendering]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3461</id>
	<key><![CDATA[There are a few notable templates worth discussing.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3462</id>
	<key><![CDATA[There are multiple approaches here, this just provides one approach. The key is that you need a local web server running, it's not sufficient to simply open the raw html files in your browser. These directions are the minimal instructions, but you may use an existing server for viewing, or modify this approach to suit your needs.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3463</id>
	<key><![CDATA[NOWIKI|text - Escapes the text, ensuring that no wiki markup will be processed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3464</id>
	<key><![CDATA[Create a configuration file somewhere on your file system, call it site-deploy-local.ini]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3465</id>
	<key><![CDATA[This page explains the templating system, and how it works. There are a number of systems that interact together to produce these web pages, and if you wish to contribute, it is helpful to understand how they work together. There are 3 main systems to be aware of. Initial template replacement, wiki replacement, and page rendering.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3466</id>
	<key><![CDATA[After making a change]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3467</id>
	<key><![CDATA[One time setup]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3468</id>
	<key><![CDATA[Next, we need to do the initial generation:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3469</id>
	<key><![CDATA[[%s Install node and npm.]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3470</id>
	<key><![CDATA[From the command prompt, ''cd'' to one folder above where you specified in the ''directory'' value in the config (that is, the root of the website) and run]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3471</id>
	<key><![CDATA[Testing Locally]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3472</id>
	<key><![CDATA[When making changes to the documentation, it may be worth running locally to see your changes before they go to the live site.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3473</id>
	<key><![CDATA[PRE|text - Creates a &lt;pre&gt; code block, escaping all html special characters in the text]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3474</id>
	<key><![CDATA[If a page needs to run javascript, it can, by way of normal script tags. Do be aware that the typical jquery onload mechanism does not work, because there is page rendering that needs to happen first. In order to properly hook into the code after the page really is finished loading, a special promise object is defined. All your code should go in  a block that looks like this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3475</id>
	<key><![CDATA[Adding the ''--use-local-cache'' flag will potentially speed up the deployment. Refresh the webpage that was launched by the http-server command.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3476</id>
	<key><![CDATA[CODE|code - This syntax highlights pure mscript code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3477</id>
	<key><![CDATA[After the templates are replaced, for pages, the file is inserted into the frame.html wrapper, which provides the basic structure of the html document.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3478</id>
	<key><![CDATA[Alternatively, you can install the http-server package, and leave of the ''npx'' command.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3479</id>
	<key><![CDATA[Each dev session]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3480</id>
	<key><![CDATA[On the first run, this may take a while, so just sit back and relax.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3481</id>
	<key><![CDATA[Leave this command window open while you develop. You may also wish to disable the cache in your web browser, so that old versions of the pages won't be cached.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3482</id>
	<key><![CDATA[Initial template replacement and deployment]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3483</id>
	<key><![CDATA[SYNTAX|type|code - Given the language or code type, will apply the proper html to make sure the text is syntax highlighted (for languages other than mscript)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3484</id>
	<key><![CDATA[Once the page is deployed, for html pages, they are also validated, so make sure that the page content will validate.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3485</id>
	<key><![CDATA[is an example of a valid runtime specification for a mysql connection. In any place that the profile is specified, an array of this type may be provided instead.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3486</id>
	<key><![CDATA[Configuration]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3487</id>
	<key><![CDATA[PostgreSQL]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3488</id>
	<key><![CDATA[ssl]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3489</id>
	<key><![CDATA[password]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3490</id>
	<key><![CDATA[The port you are connecting to. If not specified, 3306 is assumed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3491</id>
	<key><![CDATA[host]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3492</id>
	<key><![CDATA[Making a query]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3493</id>
	<key><![CDATA[WorldGuard]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3494</id>
	<key><![CDATA[The port you are connecting to. If not specified, 5432 is assumed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3495</id>
	<key><![CDATA[The username you are connecting with.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3496</id>
	<key><![CDATA[This statement is used for inserting rows into your table. You can use this in two different ways shown below. The returned result would be the first rownumber that was added (with auto increment) or %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3497</id>
	<key><![CDATA[All queries use a standardized form of SQL provided by Java, though vendor specific SQL statements are supported, depending on the connection type. Learning SQL is beyond the scope of this article, and the article assumes you know at least basic SQL, however, if you need a refresher, [%s this site] can provide a basic tutorial. Additionally, the [%s MySQL reference manual] is very well written, and most of the information in it will apply to other database systems as well. You may also consider purchasing a book on SQL for more in depth learning.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3498</id>
	<key><![CDATA[Optional]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3499</id>
	<key><![CDATA[The path to the sql file. If the path is relative, it is considered relative to this file, however absolute paths are recommended, to prevent ambiguity.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3500</id>
	<key><![CDATA[This statement is used for updating existing rows in your table. For example, we may want to add 250 downloads to each plugin.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3501</id>
	<key><![CDATA[Some common examples follow, though the full SQL language is available.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3502</id>
	<key><![CDATA[which as you can see could much more likely lead to errors or unsafe usage, and is much harder to read.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3503</id>
	<key><![CDATA[This is the table generated by the first two queries.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3504</id>
	<key><![CDATA[The SQL framework uses JDBC to connect, so any database backend compatible with JDBC can be supported with MethodScript. You must have an SQL server set up and running already, which is beyond the scope of this article.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3505</id>
	<key><![CDATA[useSSL]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3506</id>
	<key><![CDATA[The host you are connecting to. If not specified, "localhost" is assumed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3507</id>
	<key><![CDATA[port]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3508</id>
	<key><![CDATA[The query function returns an array (in the case of a select) or various other return types, depending on the SQL statement. For selects, an array of associative arrays with the results is returned. For inserts, %s is returned, unless the statement used an auto-increment, in which case, that value is returned. Deletes and updates return the number of rows affected. All other operations return %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3509</id>
	<key><![CDATA[The %s function is the basis for all queries. Connections are automatically kept for the duration of the script, so there is no need to worry about manually opening and closing connections to the server; the runtime will handle that for you. During each query, there are only two required parameters, the connection information (either a profile name or a connection array) and the query itself (and any statement parameters). All queries use a "prepared statement" format, which ensures that SQL injections are not possible.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3510</id>
	<key><![CDATA[If set: "useSSL=false". If value "true": "useSSL=true". Default: useSSL will not be an argument.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3511</id>
	<key><![CDATA[INSERT]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3512</id>
	<key><![CDATA[If set (with any value, but preferably "true") then ssl will be used to connect. Defaults to false.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3513</id>
	<key><![CDATA[The name of the database you are connecting to]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3514</id>
	<key><![CDATA[PostgreSQL requires a separate PostgreSQL server to be running, either remotely or locally. For more information about setting up a PostgreSQL server, look for more information on the PostgreSQL website:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3515</id>
	<key><![CDATA[WorldEdit]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3516</id>
	<key><![CDATA[descWG]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3517</id>
	<key><![CDATA[The password you are connecting with.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3518</id>
	<key><![CDATA[database]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3519</id>
	<key><![CDATA[DELETE]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3520</id>
	<key><![CDATA[Required]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3521</id>
	<key><![CDATA[A simple SELECT:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3522</id>
	<key><![CDATA[SQLite is the simplest SQL version to configure. No extra installation is required, as databases are plain files, and is supported out of the box. The base connection information required is just the file tag, though other information can be specified.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3523</id>
	<key><![CDATA[descCB]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3524</id>
	<key><![CDATA[UPDATE]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3525</id>
	<key><![CDATA[descCH]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3526</id>
	<key><![CDATA[Essentially, the connection information is specified via xml tags per profile, and connections can be referenced by id. In the following tables, the Tag column is the xml tag in the profile (in the above example, the username and password tags) and the status column tells you if the tag is required or optional. In all profiles, the id attribute is required, as is the type element. At startup, the xml is validated, and errors are reported, and must be corrected before continuing. The XML must be valid. If these attributes are hard coded, then the connection information specified should be specified as an associative array, subject to the same policies as the xml for required tags.. For instance,]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3527</id>
	<key><![CDATA[MethodScript provides various methods for connecting to and running SQL commands. The methods exposed ALWAYS use prepared queries, making your code far less prone to database injection attacks, as well as better compile time checks where possible.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3528</id>
	<key><![CDATA[Craftbook]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3529</id>
	<key><![CDATA[To simplify connection information to various databases, MethodScript allows two ways of connecting to a server. Either via ''profiles'' or via in code connection information. When connecting statically, connection via profiles is the preferred solution, since it makes coding easier, and makes it harder to accidentally leak database credentials when sharing code. See [[Profiles]] for more information about setting up profiles in general. Connections to different SQL server types may require different connection information, so you'll need to see the connection configuration information below for each supported server type. In general, the configuration format is as follows:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3530</id>
	<key><![CDATA[SELECT]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3531</id>
	<key><![CDATA[MySQL requires a separate MySQL server to be running, either remotely or locally. For more information about setting up a MySQL server, look for more information on the MySQL website:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3532</id>
	<key><![CDATA[descWE]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3533</id>
	<key><![CDATA[A more complex SELECT:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3534</id>
	<key><![CDATA[As you can see, the id is automatically placed into the statement, no escaping required, and there is still a guarantee that no SQL injections will occur. Essentially, if @id were a string, this would translate into the following code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3535</id>
	<key><![CDATA[username]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3536</id>
	<key><![CDATA[While less code to write, this has the unfortunate side effect that the whole script must be wrapped in a concatenation block, which means that for each line of code, the concatenation effect must also run, even in cases where the  concatenation doesn't make sense. This adds overhead to the code for no extra value in 99% of cases, and so strict mode disallows this feature, requiring explicit concatenation operators, at the benefit of decreased code runtime.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3537</id>
	<key><![CDATA[Statement semicolons]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3538</id>
	<key><![CDATA[However, since parenthesis are also allowed to be used to group values together, it would be ambiguous if the parenthesis were simply a grouping mechanism, or if they are intended to execute the previous closure. In non-strict mode, the semicolons will be required in these cases only when the behavior is not clear, however, in strict mode, semicolons are required on all statements.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3539</id>
	<key><![CDATA[Auto Concatenation]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3540</id>
	<key><![CDATA[While this seems arbitrary, separating statements is required in two cases. Using the ++ or -- operators, it is ambiguous whether the operator is meant to apply to the previous value (postfix) or following value (prefix). In the future, direct closure execution will be allowed with parenthesis:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3541</id>
	<key><![CDATA[Conforming to strict mode has its advantages, however. Errors that would have gone unnoticed are highlighted much more quickly. Strict mode enforces better programming practices and clearer and cleaner code. Strict mode will be expanded in the future, and those expansions will be listed below, so that you can begin to write conformant code, and it will not break once strict mode expands to include those options. However, unlisted modes may be added in the future with no notice, however, they will then be added to this documentation.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3542</id>
	<key><![CDATA[A bare string is a string without quotes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3543</id>
	<key><![CDATA[Compiler warnings, such as deprecations and others are normally warned about, but compilation continues. In strict mode, these warnings instead trigger a compile error, and must be fixed immediately. However, in combination with the  suppressWarnings file option, individual warnings can be ignored, and these will trigger neither a compiler warning or a compiler error.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3544</id>
	<key><![CDATA[One guarantee is that code that is written to conform to strict mode will always run the same in non-strict mode.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3545</id>
	<key><![CDATA[Auto concatenation is when two objects with no operator between them are taken to be concatenated, with a space added between.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3546</id>
	<key><![CDATA[{{Warning|text=Note, putting your files in strict mode may require more work when upgrading, as your scripts may no longer compile. Future additions to strict mode will be implemented, and if your scripts do not conform, you will have to upgrade them immediately.}}]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3547</id>
	<key><![CDATA[Semicolons are used to denote end of statements, and they are currently allowed in code, but they are completely optional, and unused. In strict mode, they must be used. Not all constructs are statements, however. For instance, a  msg() call is a statement, but a for loop and a proc definition are not.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3548</id>
	<key><![CDATA[Using bare strings runs the risk that an identifier (such as a keyword) will be introduced in the future, which has the same name as the bare string. In this case, the compiler will use the functionality of the identifier, rather than the string, and your code could suddenly change without you knowing, causing hard to diagnose bugs. Thus, in strict mode, bare strings are not allowed, you must quote all strings.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3549</id>
	<key><![CDATA[Strict mode places the compiler in an much more restrictive mode, where backwards compatibility is not as much of a concern, and where things that would have been compiler warnings previously will be turned into compiler errors, and generally causes the compiler to be more pedantic.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3550</id>
	<key><![CDATA[In strict mode, all newly defined variables (and procedure definitions) must be typed. For instance:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3551</id>
	<key><![CDATA[Compiler Warnings]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3552</id>
	<key><![CDATA[Object typing]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3553</id>
	<key><![CDATA[Some languages solve this same problem with newlines, instead of semicolons. However, MethodScript has a design  principal which states that whitespace should never be used as code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3554</id>
	<key><![CDATA[Please see the page on [[%s|cross casting]] for a further discussion on the auto keyword.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3555</id>
	<key><![CDATA[No Bare Strings]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3556</id>
	<key><![CDATA[(not yet implemented)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3557</id>
	<key><![CDATA[Adding type safety to your code is a well documented advantage, as it allows the compiler to more easily and quickly  detect invalid code, as you cannot in the future assign a value of a different type to a variable that was defined with another type. In non-strict mode, types are still allowed, and have the same behavior, but untyped values are assumed to have the type ''auto''. This type is still allowed in strict mode, but the declaration must be explicit.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3558</id>
	<key><![CDATA[Strict mode can be enabled per file with the appropriate [[%s|file option]] or globally with a config setting. It can also be set as a runtime setting, but this will only benefit files that have not been compiled yet (includes, eval'd code, etc). To enable this runtime setting, use:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3559</id>
	<key><![CDATA[(not implemented yet)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3560</id>
	<key><![CDATA[Inserts a form feed character]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3561</id>
	<key><![CDATA[(Only in double quoted strings) A literal @ symbol, for when this could be confused with a variable]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3562</id>
	<key><![CDATA[Inserts a backspace character]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3563</id>
	<key><![CDATA[\a]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3564</id>
	<key><![CDATA[If you need a literal single quote inside of a string, you must escape it with the backslash character.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3565</id>
	<key><![CDATA[\b]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3566</id>
	<key><![CDATA[Both double quotes and single quotes may be escaped, though double quote characters aren't necessarily needed to be escaped. Both of the following lines are the same:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3567</id>
	<key><![CDATA[Bare Strings]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3568</id>
	<key><![CDATA[\f]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3569</id>
	<key><![CDATA[Inserts the %s character]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3570</id>
	<key><![CDATA[Other escape sequences are supported:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3571</id>
	<key><![CDATA[Inserts an alarm (bell) character]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3572</id>
	<key><![CDATA[Double Quoted Strings]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3573</id>
	<key><![CDATA[\n]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3574</id>
	<key><![CDATA[None of the special symbols, namely the comma and exclamation point are considered operators when quoted in this manner. Some characters in the string are still handled specially, however.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3575</id>
	<key><![CDATA[\r]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3576</id>
	<key><![CDATA[Note that using the \u escape sequence is only supported if you are hardcoding the value, for dynamic inputs, you must use %s, using string concatenation won't work.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3577</id>
	<key><![CDATA[\Uxxxxxxxx]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3578</id>
	<key><![CDATA[Bare strings are unquoted, loose strings in source code. For instance, in the code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3579</id>
	<key><![CDATA[\t]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3580</id>
	<key><![CDATA[The following parse rules apply to variables embedded in the string. If an at sign (%s@%s) is encountered, the parser will greedily take as many characters as possible to form a valid variable name, (any letters, lowercase or capital, underscores, and numbers).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3581</id>
	<key><![CDATA[Inserts a vertical tab character]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3582</id>
	<key><![CDATA[Doubly quoted strings, (referred to as "smart strings") using the %s"%s  symbol, follow all the escape rules of singly quoted strings, but also have  variable interpolation. No features that a smart string provides are impossible to do otherwise, but allow for more concise and readable code. @Variables, and simple array accesses are allowed to be embedded in the string itself, as if they had been concatenated in. ($Variables are not supported.) As a very simple example, consider  the following code, of which both examples are equivalent:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3583</id>
	<key><![CDATA[\\&nbsp;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3584</id>
	<key><![CDATA[The backslash is itself a special character, and cannot be used except when followed by a pre-defined special character, as defined below. To use a literal backslash, use two backslashes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3585</id>
	<key><![CDATA[\v]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3586</id>
	<key><![CDATA[Inserts a literal single quote character]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3587</id>
	<key><![CDATA[Double strings with variables in them are considered dynamic values, and cannot be used in cases where a static value is required, for instance, array labels. If the string does not contain any variables, it works the same as a singly quoted string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3588</id>
	<key><![CDATA[Insert a carriage return character]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3589</id>
	<key><![CDATA[A string is a primitive data type that allows for arbitrary characters. Strings may come from several sources, but string literals directly in source code must follow a few particular rules.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3590</id>
	<key><![CDATA[Inserts the specified UTF-16 character]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3591</id>
	<key><![CDATA[The words "This is a string" are considered bare strings. Each word is technically a separate string, but due to MethodScript's language feature of auto-concatenation, they form a single string, with spaces separating the words.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3592</id>
	<key><![CDATA[Insert a newline character]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3593</id>
	<key><![CDATA[Strings quoted using single quotes are "normal" strings. Only a small amount of escaping is required in these strings, most all characters are taken as literal UTF-8 characters.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3594</id>
	<key><![CDATA[If the end of the variable name may be confused with the next character in the string, you may "escape" the whole sequence using braces. The second example in the above code can be written as follows, to produce the desired results:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3595</id>
	<key><![CDATA[Quoted Strings]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3596</id>
	<key><![CDATA[Insert a tab character]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3597</id>
	<key><![CDATA[An arbitrary unicode character may be inserted directly via the \u escape sequence. It should be \u, followed by the four hex digit code for that symbol. Since UTF-8 is supported directly, however, you can add the symbol directly. All the following are equivalent:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3598</id>
	<key><![CDATA[All other escapes are invalid, and will cause a compile error.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3599</id>
	<key><![CDATA[Inserts the specified UTF-8 character]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3600</id>
	<key><![CDATA[Inserts a literal backslash character]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3601</id>
	<key><![CDATA[Inserts a literal double quote character]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3602</id>
	<key><![CDATA[As you can see, the second example is much more concise, and is generally easier to read. The two examples are exactly equivalent however, in fact, double quotes are internally converted to the non-double quote equivalent during compilation.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3603</id>
	<key><![CDATA[In double quoted strings only, if you need a literal at sign, you must escape it, using a backslash:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3604</id>
	<key><![CDATA[\uxxxx]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3605</id>
	<key><![CDATA[A Struct is a special type of class, which allows for more precise associative array definitions, while not quite allowing for the full power of objects. A struct may only be declared with public members, and no methods. Any associative array can be cross cast to a struct, and vice versa.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3606</id>
	<key><![CDATA[To create a new struct, you use it the same as if you were constructing a new object, using %snew%s. All structs work as if they have exactly one no-arg constructor. Assuming we have a struct named "Struct", then this code would create a new one:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3607</id>
	<key><![CDATA[A struct is defined in exactly the same way as a class, except it may ONLY have a members block, and is declared with the %sstruct%s keyword. If we set the parameters with a value, that becomes their default, which itself defaults to %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3608</id>
	<key><![CDATA[If used properly, structs can work well in cases where a "named argument list" is desirable.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3609</id>
	<key><![CDATA[Using a struct]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3610</id>
	<key><![CDATA[Members in a struct are accessed the same as members in classes, with the -> operator. Assuming our example struct has the int member @i, we can get and set it like this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3611</id>
	<key><![CDATA[Defining a struct]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3612</id>
	<key><![CDATA[This creates a new struct, with all the properties initialized to their defaults. Additionally, since cross casting is available, the following works as well:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3613</id>
	<key><![CDATA[Adding access modifiers is optional, though if specified, must be public.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3614</id>
	<key><![CDATA[A good use of structs is when you have lots of configuration for an object. Instead of using a constructor with lots of optional parameters, or having separate setter methods for each field, you can use a configuration struct to simplify the configuration.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3615</id>
	<key><![CDATA[When using a struct, you gain the advantage of type safety in associative arrays, assuming they aren't dynamic. Usually however, it may be a better idea to use full Objects, so you can also add methods later. However, a configurable factory is a good use of structs in combination with objects, which is demonstrated below.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3616</id>
	<key><![CDATA[Block comments that are informational (rather than commenting out code) should follow these conventions: use /* for non documentation purposes, or for general comment blocks where the comment does not directly correspond with the next element, for instance, if the comment applies to the whole block of code, or more generally within blocks of code, rather than in element definitions. Comments that correspond with definitions of elements (classes, variables, procs, etc) should start with /**, which indicates and enables documentation help for that element in IDEs and reflection. These types of comments are known as "smart comments" and are treated specially by the compiler, and are not removed at compile time (though the compiler does otherwise ignore them). In any case, when using either /* or /**, comment blocks should line up the first star in a column. For blocks of code where the comment is not flush with the left side of the document, tabs should be used to push the comment block out, and except in the case of the first line, should add a single space before and after the star. A newline should be added after the begin comment operator, and before the end comment. The smart comment parser will ignore the first star in a line, and all the beginning whitespace.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3617</id>
	<key><![CDATA[The exception is when if is being used as a tertiary statement (that is, the return value of if is not being ignored):]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3618</id>
	<key><![CDATA[Whitespace]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3619</id>
	<key><![CDATA[Writing readable code is a huge part of easily debugging potential problems. While technically the compiler can read your code no matter how it's formatted (so long as it is syntactically correct), the compiler isn't the only thing that needs to read it, humans do too. So making your code "pretty" is a big step in making maintainable, debuggable, and shareable code. Many code styles are equally readable, and so in many cases, it is pure preference how you choose to format your code, however, this style guide is what will be used by any standard compilant code formatting tools that may be written in the future, and so following these examples is good practice.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3620</id>
	<key><![CDATA[Many text editors change tabs to spaces, and this is generally undesirable. The general rational behind this is that a tab is generally more flexible in text editors, it is usually possible to define "tab width," which allows programmers to customize this to their tastes, without actually having to change the code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3621</id>
	<key><![CDATA[else, and else if]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3622</id>
	<key><![CDATA[The code inside the blocks should be indented one more than the condition statements, but comma that represents the else should be on a line of its own, and aligned with the parent if. Additionally, a # else comment is helpful.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3623</id>
	<key><![CDATA[Ifelses should follow the same general guidelines, though]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3624</id>
	<key><![CDATA[In the case of using if or ifelse, it is preferred that brace syntax is used, however, code that still uses the pure functional approach should follow these guidelines:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3625</id>
	<key><![CDATA[The descriptions in a smart comment should end with a punctuation mark, and should be complete sentences.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3626</id>
	<key><![CDATA[For a full discussion on brace syntax, please see this article: [[%s|Brace Syntax]]. Brace syntax is preferred in all cases over functional syntax where possible, unless otherwise noted. (Most notably tertiary if statements.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3627</id>
	<key><![CDATA[Naming Convention]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3628</id>
	<key><![CDATA[Note that there is one level of indention for each case, and two levels of indentation for the code inside the case. The functional usage of switch should never be used, as it is exceedingly difficult to read.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3629</id>
	<key><![CDATA[In general, code should only be nested up to a maximum of 5-7 levels, if you begin to nest deeper than this, consider breaking code off into a procedure, and calling that procedure. Indentation is one of the most important metrics for making code readable, and in general, poorly indented code will be far less readable, all other formatting issues aside.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3630</id>
	<key><![CDATA[Technically, most all whitespace is optional. For technical reasons, it is possible to fit all scripts on one line, and no tabs, spaces, or newlines are required by the lexer. However, this does not lend itself to human readability, so proper whitespace is vital to making code easily readable.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3631</id>
	<key><![CDATA["Code branches", that is conditional blocks, should be indented one tab further than their parent, except in the case of tertiary usage of an if(). For example:]]></key>
	<eligibleForMachineTranslation>false</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3632</id>
	<key><![CDATA[statements should use the following format:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3633</id>
	<key><![CDATA[Indentation]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3634</id>
	<key><![CDATA[Divider line comments are generally undesirable (i.e. //----------------------------------------), instead use region comments, which are hints to IDEs that support the feature, to provide a visual section for you.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3635</id>
	<key><![CDATA[In cases where you are using multiple blocks, at some point, all the blocks must end. In this case, do not put all the ending parenthesis on the same line, but instead, match the end parenthesis with the start of the block]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3636</id>
	<key><![CDATA[Variables should be named using camel case.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3637</id>
	<key><![CDATA[Switch]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3638</id>
	<key><![CDATA[This aligns with the function naming convention of MethodScript itself: use snake case for globals methods, and camel case for instance methods.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3639</id>
	<key><![CDATA[Tabs]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3640</id>
	<key><![CDATA[Using this syntax, should extra code need to be added to the end of the block, it is much easier to locate the corresponding ending parenthesis/brace/bracket.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3641</id>
	<key><![CDATA[Ending blocks]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3642</id>
	<key><![CDATA[Brace Syntax]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3643</id>
	<key><![CDATA[Global procedures should be named using snake case, however.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3644</id>
	<key><![CDATA[Generally, the double slash (//) is preferred to the number sign (#) for line comments, with the notable exception of the hashbang at the top of the file, if present. A space should be added after the line comment operator, and before the first line of the comment text (//Bad) (// Good), the exception being IDE hint comments (i.e. #region)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3645</id>
	<key><![CDATA[This will print out the syntax file to the console. You can pipe the output to a file with:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3646</id>
	<key><![CDATA[java -jar CommandHelper.jar syntax npp obsidian]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3647</id>
	<key><![CDATA[The MethodScript jar comes packaged with a syntax highlighter generator for several different text editors.  The syntax files can be updated with data from your specific jar, so it is guaranteed to be up to date.  To run the tool, run]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3648</id>
	<key><![CDATA[This will save the file in the current directory. Follow the procedure for your specific text editor to update the syntax files using the freshly generated syntax file. (This varies depending on your text editor.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3649</id>
	<key><![CDATA[java -jar CommandHelper.jar syntax]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3650</id>
	<key><![CDATA[java -jar CommandHelper.jar syntax npp obsidian > syntaxFile.xml]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3651</id>
	<key><![CDATA[from the command line. You will see a list of supported text editors. Select your text editor, and run, for instance:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3652</id>
	<key><![CDATA[Why the differences?]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3653</id>
	<key><![CDATA[In programming in general, when you create a variable, it can be created in two ways, it can either create a new object/value, or it can simply point to an existing one. When you have a ''pointer'' to an existing value, it works much like a symlink on a file system; making changes to a pointer actually makes changes to the value pointed to. However, assignments (and by extension passing a value to a procedure) change what value the variable points to. For primitives, that is, a string or a number, this concept doesn't actually matter, because you can't "change" the underlying primitive value, you can only reassign a new value to the existing variable, and that assignment doesn't affect other variables.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3654</id>
	<key><![CDATA[When you think of sending parameters to a procedure as assign()'s, it becomes easier to see how the same concept applies to a proc as well.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3655</id>
	<key><![CDATA[As you can see, even though @b is assigned to @a, since it is actually assigned by value, changing the value of @a does not affect @b. This mechanism works in all cases for arrays as well.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3656</id>
	<key><![CDATA[The above example copied by reference, as was explained in the earlier section. Changes to @array1 are reflected in @array2, because they both "point" to the same array. The variable itself only contains a reference to the array, not the value of the array itself. Contrast this to a cloned array, which copies the value over:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3657</id>
	<key><![CDATA[If we seemingly "''inline''" (we actually aren't inlining it, see below)  the procedure, we get different results though:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3658</id>
	<key><![CDATA[This works differently, because we have forgotten that a procedure call introduces an extra "assignment" before it runs. To truly "inline" a procedure, we must do an assignment beforehand, so something like this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3659</id>
	<key><![CDATA[Now, let's look at changing the underlying value of an array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3660</id>
	<key><![CDATA[In mscript, all values are passed by value of a reference, and assignments are too. However, primitives do not have a "reference," so are simply passed by value of. It is important to understand what this means in terms of how this will affect your code. Since this is a difficult concept to understand even for seasoned programmers, the concept will be described through examples.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3661</id>
	<key><![CDATA[Keep in mind that it's not ''really'' an assign, however, it's simply an array_set() wrapped up in a more aesthetic syntax.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3662</id>
	<key><![CDATA[In this example, the value wasn't changed in array2. However, this comes at a cost. For large arrays, we now have two mostly identical copies of the array in memory. Sometimes this is required, and if so, there's nothing that can be done. But since most often this isn't strictly required, there's no point in eating up more memory than we actually need. Why aren't primitives handled the same way then? Well, actually, strings are reference based, thanks to the way the JVM works, but since they aren't modifiable, assigning by reference or value doesn't make a difference. But for other primitives, passing by value is done because there is no memory hit for reference vs value, because in general, the memory used to "point" to an int will be the same as just keeping the value of the int itself, but the extra layer of abstraction would slow down accesses. So passing by value makes more sense for primitives.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3663</id>
	<key><![CDATA[An array could be quite large, so copying it around each time it is assigned could severely impact performance and memory usage. So by default, it copies the reference instead of the value (which is constant sized and much smaller typically), however, the easy clone operator means that you can quickly copy the value, without much hassle, if that's truly what you need.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3664</id>
	<key><![CDATA[As you can see here, though @a was re-assigned in the procedure, it did not affect @myA, as you can essentially think of the procedure call as working by doing several mini-assignments: assign(@a, @myA) assign(@b, @myB). When we change the assignment of @a inside the procedure, @myA is not affected, however changing the internals of the value @b, that does affect @myB (and by extension @myA, since @myA points to @myB).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3665</id>
	<key><![CDATA[As you can see, we are now changing the underlying value, instead of completely changing what value as a whole @a references. What might be confusing is that assignments provide a convenience method for setting values in arrays, so this code performs the same way:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3666</id>
	<key><![CDATA[Reference vs. Value]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3667</id>
	<key><![CDATA[When we do the second assignment to @a, we aren't changing the ''value'' of what's being pointed to, we are simply changing what we are pointing to.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3668</id>
	<key><![CDATA[This code demonstrates assignment by value of primitives.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3669</id>
	<key><![CDATA[For existing mock frameworks in other languages, they are usually quite good, but due to various limitations in the language, there are some key drawbacks. For instance, final classes cannot be mocked, because mocks in these languages are just classes that are created on the fly, and extend a given class, so if the class cannot be extended, it requires even more cumbersome and more complex frameworks to do the mocking. Private methods and fields cannot be accessed by the mocks, and static methods cannot be mocked. These limitations make mocks useless in some cases, and makes it impossible to do a proper unit test. Often, this code is tested in integration or functional tests, but it can be quite a large process to do so, and in theory, if a mock would work, it would be ideal. Given that, MethodScript provides built in support for mocks, including support for mocking final classes, private methods, and static methods.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3670</id>
	<key><![CDATA[In general, unit testing is a mechanism to test individual units of code (hence the name). This is opposed to integration testing or functional testing, though the unit testing framework can be used to do integration testing as well.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3671</id>
	<key><![CDATA[In general, a mock framework is a framework that allows easy yet powerful stubbing/faking, but instead of using real objects such as MyStub or MyFake in the above example, the framework generates what can be thought of as a stub or a fake on the fly. In addition, a mock framework usually contains mechanisms for verifying that the mocked object was called in a certain way, with certain parameters. Additionally, the "code" in the mock can easily be modified at runtime by the test code, so that the behavior can mimic realistic scenarios, with relatively little effort.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3672</id>
	<key><![CDATA[Functional testing, on the other hand, works more like a black box test. The program as a whole is run, as if run by a user. In some cases, this is the most desirable test type, but the unit testing framework does not provide support for this.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3673</id>
	<key><![CDATA[You may name the test method whatever you like, but the return value should be %s, and the method should not take any parameters.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3674</id>
	<key><![CDATA[In general, the unit test framework can be used without mocking, and across larger sets of objects to accomplish what is known as integration testing. The line between this and unit tests can be blurry anyways, but strictly speaking, unit tests should not interact with external objects (other than through mocks). But often times, there is little value in doing such a limited test, as the real test lies in the interaction between various objects. In this case, you can use the unit test framework, minus perhaps the mocks, and this is a perfectly acceptable use of the framework.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3675</id>
	<key><![CDATA[In a unit test, the block of code that is under test is the only thing that should actually be run. Functions often have external side effects though, (such as when calling a method that makes an http call, the server would actually be hit with an http call) which is usually undesirable. There are a number of solutions to this, and the correct one depends heavily on what type of test you're writing, and what your desired outcome is. In general, there are three main types of ''test doubles'':]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3676</id>
	<key><![CDATA[In addition to support for mocks, MethodScript provides a mechanism for running unit tests ''MSUnit''. Most importantly, MethodScript defines some generic annotations, which can be used by all test code, but it also provides a basic runner for the tests. Third party libraries could provide alternative runners, and in fact, when integrating with an IDE, the default runner is not used. Much of the unit test framework is inspired by xUnit, so if you are familiar with unit testing in general, these concepts should not be much of a leap, though there are some extremely notable improvements.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3677</id>
	<key><![CDATA['''Mocks''' are objects pre-programmed with expectations which form a specification of the calls they are expected to receive.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3678</id>
	<key><![CDATA[Scoping]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3679</id>
	<key><![CDATA[Our unit test code that tests the add method might look like this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3680</id>
	<key><![CDATA[Global functions can also easily be mocked, using the same general syntax, with the exception that all arguments must be mocked, there is no shortcut for leaving off the arguments.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3681</id>
	<key><![CDATA[In come mocks]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3682</id>
	<key><![CDATA[Integration Testing]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3683</id>
	<key><![CDATA[Assuming that during unit testing, you provide a new instance of MyStub or MyFake, then the rest of the code in the real methods will work as intended. This pattern is often times useful when you have more complex objects, or for integration tests, where creating mocks over and over is tiresome. However, the downside of this approach is that you have to write your code in such a way as to support this, and anyways, if you are writing integrations with third party code which you cannot change, this might be impossible anyways.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3684</id>
	<key><![CDATA[The testAdd method shows that we expect a return value of 4.0 when we add 2 and 2. If these values are not equal, then the test method will throw an AssertException, which will signal to the unit test framework that this test has failed, and the test will end. The other tests in the suite will continue to run, however. We can also mock methods, using the mock framework, which may be useful to bypass some methods that are not under test. The when() function is used to assign mock functionality for a particular method, and is a method with special runtime support, which does not actually execute the parameter passed to it. verify() is special in the same way.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3685</id>
	<key><![CDATA[In addition, global functions can be easily mocked as well.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3686</id>
	<key><![CDATA[This example is not useful, because we are not passing the Calculator object to another object, but merely demonstrates how mocks work. In this case, it's more useful to use a ''spy'' instead. A ''spy'' works more or less like a mock, but unless otherwise instructed, will execute the real method in the underlying object. Unlike a mock, however, creating a spy does need a real instance of the class. If the class has a no arg constructor (even a private one), and this is the appropriate constructor to call for the test, then nothing additional needs doing. However, if you wish the object to be constructed with another constructor, you can provide the instance to the spy function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3687</id>
	<key><![CDATA['''Stubs''' provide canned answers to calls made during the test, usually not responding at all to anything outside what's programmed in for the test. Stubs may also record information about calls, such as an email gateway stub that remembers the messages it 'sent', or maybe only how many messages it 'sent'.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3688</id>
	<key><![CDATA[At the lowest level, MethodScript provides the core resources needed to properly do unit testing, using special language support for things like mocks, private member access, and other common unit test paradigms, that require unwieldy and cumbersome third party libraries to support.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3689</id>
	<key><![CDATA[Unit Test Framework (MSUnit)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3690</id>
	<key><![CDATA[In general, tests should be isolated activities. This allows for tests to be run in parallel, prevents dependencies on test run order, and makes writing tests easier to visualize. To support this notion, MethodScript enforces test isolation at a low level. TestSuites are mostly just a logical grouping of tests, but if a method in the test suite is marked as @{BeforeTest} or @{AfterTest}, then these methods will be called before and after each @{Test} method. However, each test is run within its own environment, which is not shared with other test runs. Any changes made to static values (including mocking the behavior of static methods) or other memory based structures are not saved. Furthermore, the persistence network is backed by a memory based implementation, the actual persistence.ini file is completely ignored. %s and  %s go to a memory backed VFS, and http_request is blocked from making actual http calls (the function may be mocked to simulate a web request, however.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3691</id>
	<key><![CDATA[In some cases, a more complex mechanism needs to be used, particularly when the item under test does not return a value, but interacts with a value passed in, most generally a closure. In that case, you can use thenDo to give it an action to do when it is called, rather than having it return a value. The closure sent to thenDo will recieve the arguments that were passed in to the original function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3692</id>
	<key><![CDATA[Unit testing is an important part of writing maintainable and correct code. In most programming languages, unit testing is bolted on after the fact, but MethodScript elevates the concept of unit testing to a first class part of the language specification itself.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3693</id>
	<key><![CDATA[However, there may be legitimate reasons to allow side effects. This is allowed by using the allowSideEffects parameter of the @{TestSuite} annotation. This is false by default, but if set to true, then for that test suite only, none of the external restrictions are enforced (persistence network, read/write, http_request). Additionally, within the test suite, the state of the environment is not reset before each test, though @{BeforeTest} and @{AfterTest} are still run before and after the test. There is also a guarantee that tests will run in order, from top to bottom, and they will not run in parallel. In general, this has many drawbacks, however, and will considerably slow down your unit tests, so should be used sparingly, if ever. Generally, the better solution is to refactor your actual code and tests such that  the tests can run indepenedently of each other.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3694</id>
	<key><![CDATA[Fakes and stubs are already possible to achieve if your code is written in such a way as to take full advantage of interfaces and dependency injection. For instance:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3695</id>
	<key><![CDATA[Functional Testing]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3696</id>
	<key><![CDATA[What is Unit Testing?]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3697</id>
	<key><![CDATA[Let us suppose we are writing a Calculator class. The following code could be used to unit test the calculator. Let us first take a look at the abbreviated Calculator class.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3698</id>
	<key><![CDATA[Private methods may be called directly from within the test code, and this is not a compile error.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3699</id>
	<key><![CDATA['''Fake objects''' (or ''fakes'') actually have working implementations, but usually take some shortcut which makes them not suitable for production (an in memory database is a good example).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3700</id>
	<key><![CDATA[Here is an example of a chained assignment:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3701</id>
	<key><![CDATA[In this case, both @var1 and @var2 get assigned to 6. This is because the ivar is returned, and then resolved  to the value 6, which is then stored in @var1. This resolution behavior is typical, but a few functions have  special functionality to handle this, such as assign/=, and if, and loops, so the variable isn't resolved immediately.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3702</id>
	<key><![CDATA[Because assign/= returns the actual ivariable that was set, and %s requires an ivar as the first argument, this works ok.  In addition, this is possible:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3703</id>
	<key><![CDATA[As you can see, constants are only used to determine if a command matches, but otherwise not used.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3704</id>
	<key><![CDATA[three]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3705</id>
	<key><![CDATA[two]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3706</id>
	<key><![CDATA[$var2:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3707</id>
	<key><![CDATA[/cmd one $var1 $var2 $var3 $ = ...]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3708</id>
	<key><![CDATA[$var3:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3709</id>
	<key><![CDATA[/cmd $var1 $var2 $ = msg($var1 $var2 $)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3710</id>
	<key><![CDATA[In this case, if the user types "/cmd one two three four five six", it would match, and the defined variables would be as follows:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3711</id>
	<key><![CDATA[This code will send the player "2".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3712</id>
	<key><![CDATA[five six]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3713</id>
	<key><![CDATA[IVariables]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3714</id>
	<key><![CDATA[four]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3715</id>
	<key><![CDATA[Variables are set in a command, like so:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3716</id>
	<key><![CDATA[$var1:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3717</id>
	<key><![CDATA[These variables are used when it comes to ''matching'' a command, however, when the script is running, they are thought of as constants.  This is because you, as the programmer, can't change them. They may change from run to run of the command, so they are still technically  variables. The variable $ is a special variable, and matches any parameter after, which also means that it must be the final thing in a  command definition. This is why it is referred to as the final var. It is treated as a string. However, if you wish to treat it as an  array (for example, to parse the arguments individually), use parse_args($) to return an array of individual items. Here is a more complex,  but valid scenario:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3718</id>
	<key><![CDATA[IVariables are defined by the programmer, and are a pure mscript feature. To create a variable, you simply use it,  the default value in the variable is an empty string. Usually however, you want to define it with a value before you  use it. This can be done with the %s function. %sassign%s takes an ivariable, and any other  parameter. Unlike most functions, it does require an actual variable, which most functions will never return.  (%sassign%s or %s=%s does, however, so it is possible to chain an assignment with another function)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3719</id>
	<key><![CDATA[In CommandHelper, there are two types of variables, variables (start with $) and ivariables (start with @).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3720</id>
	<key><![CDATA[We would deliver this to the browser using the following main code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3721</id>
	<key><![CDATA[Barebones usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3722</id>
	<key><![CDATA[The most prominent architecture of a web page (or any UI for that matter) is the  [%s Model-View-Controller (MVC)] paradigm. This pattern allows for the best separation of concerns, by moving the  data driven portions of the application into separate code from the UI components. A good template system would only allow access to the ''View'' portion of the paradigm, which is what MethodScript does by default. MethodScript uses standard XHTML as its display model, which easily translates to web applications. The UI library in MethodScript mirrors all the XHTML tags with objects, and vice versa, and allows the creation of more complex macro components that are made up of the native xhtml primitives, either in pure MethodScript, or xhtml templates. In addition, of the subset of functions that are compilable to javascript, those scripts are compiled into javascript at compile time, using the standard xhtml script tag, which allows for client side UI logic to be embedded or included the same as pure javascript would preventing you from having to learn an all new language, in addition to being able to fully optimize the logic at compile time. It also allows for javascript code side by side, in standard script tags. All xhtml+MethodScript template files are first class in pure MethodScript code, which allows for the business logic to access the UI components as easily as pure MethodScript elements, while still maintaining strong typing. In addition, most all standard CSS components have class based accessors as well, allowing for type safety, inheritance, and variable based CSS templates to be generated.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3723</id>
	<key><![CDATA[The equivalent structure written in a MyDiv.mst file is slightly simpler, because the attributes simply need to be declared with a type, and possibly a default value, using the attr attribute in the root element. The availability of the attributes is checked at compile time, so if you forget to declare one of them, then use it, it will be a compile error. All attributes from the parent are also available to be used as well inside of the template.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3724</id>
	<key><![CDATA[This renders the following markup (assuming the output is set to be tidied and configured to output xhtml):]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3725</id>
	<key><![CDATA[Barring bugs in MethodScript itself, the output javascript is guaranteed to never throw any (unintended) exceptions, or cause undefined behavior in the DOM.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3726</id>
	<key><![CDATA[Additionally, when working with specific elements with ids, we don't need to use document.getElementById("id"), we can simply use id. The compile figures out what type that is exactly, and adds it as a valid child, if it is statically declared. For dynamically declared elements with ids, you would have to use getElementById, but generally that's a code smell, since you shouldn't be generating ids programmatically anyways (use class references instead). Further, doing it this way helps to enforce decoupling, because any javascript using an id is by definition tightly coupled with that element, and so the code specific to it should be logically placed in the same file anyways, to make it easier to find. Generic library code shouldn't be using the ids anyways, and so the ids simply won't be available in the header code, making your dom access follow proper inheritance principals.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3727</id>
	<key><![CDATA[and the following equivalent pseudo MethodScript (server side):]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3728</id>
	<key><![CDATA[Optimized.mst:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3729</id>
	<key><![CDATA[Some functions cannot be run directly on the client side, because they need data from the server. In this case, many functions transparently will compile to applicable javascript, and handle both the server and client side code to do manage this process for you. For instance, let's assume we want to read information from the persistance data on the server. We can simply use async_get_value like normal (get_value isn't available in the javascript compiler), and the call will still work.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3730</id>
	<key><![CDATA[If you have an attribute named $var, and you need a literal %s$var%s, you can use the xml escape sequence &amp;#36;var.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3731</id>
	<key><![CDATA[HelloWorld.mst:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3732</id>
	<key><![CDATA[persist.mst:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3733</id>
	<key><![CDATA[The equivalent to doing this in pure MethodScript is equally straightforward, but less clear. The important thing to remember is that this uses rclosure linking rules. The XHTML->addScript method is used to add a script to an element. The same template shown above would be written in pure MethodScript like this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3734</id>
	<key><![CDATA[All CSS and DOM elements are mapped to first class MethodScript data structures, so the type safety is applicable to all values. For experimental CSS values, raw string based styles can be added, but the standard values all have first class mappings.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3735</id>
	<key><![CDATA[Each event has its own event object that is passed in, and has all the data that would be in the equivalent javascript event, allowing full access to the event. Check the API for each event for more information about each.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3736</id>
	<key><![CDATA[When writing UI code, especially HTML, for truly dynamic web pages, you need to run some client side logic to do what you need. For instance, say you have a button that when clicked makes a number count up. In this case, you need to (ultimately) write javascript to do that. However, javascript is a cumbersome, unwieldy language in many cases, so MethodScript offers the ability to compile to javascript in many cases. Most of the core functionality is available in the cross compiler, and some additional features are used specifically in these scripts. Most notably is the ability to access the dom. Note that while this code does get compiled at the same time as the rest of your script, it doesn't actually get run as MethodScript, it is cross compiled to javascript, and included as part of the entire output html. A very simple Hello World program would look like this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3737</id>
	<key><![CDATA[FadeDiv.mst:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3738</id>
	<key><![CDATA[A barebones example has potentially two parts, the root XHTML page, and the controller code. In the simplest example though, it is simply a XHTML class that is accessed. We won't consider that example yet, because there is no interaction with MethodScript in that case, and the XHTML template would simply be passed through, virtually untouched. Instead, we will assume that a pure MethodScript file is accessed, which uses MethodScript to display the XHTML template instead. In the basic case, when a .ms file is accessed through the web server, it is run once, and is expected to call the display method on a XHTML object, which will in turn output the rendered xhtml to the client. (It can output any text in reality, which is used for instance, in the course of ajax request responses.) HTTP headers may be buffered at any point before this, and are sent just before the body of the HTTP response. Let's look at example code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3739</id>
	<key><![CDATA[There are two key concepts that you need to know to effectively write MethodScript templates: variable inclusion, and dynamic scripting. All templates that use only variable inclusion compile directly into equivalent pure MethodScript classes, and dynamic scripting portions are compiled down to javascript and virtual MethodScript code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3740</id>
	<key><![CDATA[If a first class mapping doesn't exist, or you are trying to access experimental or non-standard values, you can use the reflection mechanism to bypass the compiler, just as you would in normal MethodScript code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3741</id>
	<key><![CDATA[Dynamic Scripting]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3742</id>
	<key><![CDATA[In fact, if you put the rendered XHTML into a template file, it would essentially compile to equivalent MethodScript.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3743</id>
	<key><![CDATA[The @{XHTML} annotation is used to tell the UI compiler that this class is available in mst templates. More advanced usage is shown later in this tutorial.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3744</id>
	<key><![CDATA[Ajax wrappers]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3745</id>
	<key><![CDATA[This approach is very useful, however due to the unrestricted nature of PHP, it can cause problems with separating concerns. [%s Smarty] was created to assist with the [%s separation of concerns],  but requires learning an all new templating language syntax (on top of also needing to know PHP) and so adds a layer of complication that doesn't really solve the underlying problem (because you can still mix too much logic into the UI code anyways). MethodScript's templating system takes these concerns into consideration, and while it by default promotes good separation of concerns, it does not actually restrict a user from breaking these concerns, where flexibility (or minimal code) is desired.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3746</id>
	<key><![CDATA[Usually you won't use the XHTML object directly. If you have a standard page layout, it is best to create a factory method that will create and set up an XHTML object for you, and then return that, which can be further operated on for that page specifically. Now lets consider the case where we ourselves are creating a template. Templates are defined by the fact that they have the .mst extension. This puts the compiler into a "template compiling mode" instead of assuming pure mscript. The component must extend an existing UIComponent class (which all the XHTML objects extend). The class name is the name of the file it is in, and it extends whatever type the root element is. For instance, if we had a simple component that has static text inside a div (assuming it is saved in MyDiv.mst), we can write this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3747</id>
	<key><![CDATA[Since the root element is a div, the doctype is inherited from it, though attributes and elements can be added as well. Because of this, all elements have a doctype, even if it isn't directly specified. Written in equivalent pure mscript, this class would look like this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3748</id>
	<key><![CDATA[Javascript runtime: For dynamic pages, the javascript segments will run as needed during the course of user interaction. If the javascript communicates back to the server, the segments of cached async code are run, and respond appropriately to the user.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3749</id>
	<key><![CDATA[Regardless of the transformer used, your code must always validate as well formed, and valid xml. Once the validation has occurred though, the model is released to the transformer to be rendered to actual text output. The default transformer simply outputs xhtml, but other transformers can be used to change the output based on, perhaps, the user's browser, or to create a mobile device layout, for instance. The transformer has three stages it can choose to override individually. The first, it is given the whole display tree as an object, and it can choose to modify the tree as an object. Secondly, it is given each individual element to render on it's own (with context information). Finally, the entire output string is given to the transformer, at which point it can do text based transformations on it. The transformer can be set statically, or can be registered as part of the outermost UIComponent, or it can be specified at render time when the display method is called on the outermost UIComponent. The most specific transformer is then used.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3750</id>
	<key><![CDATA[TypeScript support]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3751</id>
	<key><![CDATA[As you can tell, the backend process is very complicated, however, most of the work is done at compilation time, which makes actual runtime of the scripts faster, and most of the hard work is hidden from you.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3752</id>
	<key><![CDATA[As you can see, the dom access is generally easier, or just as easy in javascript, but we get the advantage that in MethodScript, many invalid operations become a compile error. For instance, the display property only recognizes some string values, so that is an enum, so the following code would cause a compile error, even though it would work (though it would be ignored) in javascript.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3753</id>
	<key><![CDATA[Transformers]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3754</id>
	<key><![CDATA[In the case of using pure MethodScript, you can even conditionally add scripts if needed. In either case however, before the script is cross compiled to javascript, it is optimized in the MethodScript compiler, which may significantly change the output script. This condenses the output code so that only the elements that truly need to be client side are sent. Any logic that can be determined at compile time will be resolved at compile time. While it is possible to add multiple script blocks in a mst template, it doesn't affect the output script (other than lexical correctness, if your scripts aren't logically complete) because the script will be gathered up and placed in the appropriate location anyways.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3755</id>
	<key><![CDATA[Before we move on to the usage of these concepts, lets look at a perfectly static page that doesn't use any MethodScript in the template itself.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3756</id>
	<key><![CDATA[The dynamic scripting can also be used to make html changes at compile time. For instance, given the following template:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3757</id>
	<key><![CDATA[This results in the following equivalent html (the actual html rendered will be more complicated, but for this example, it has be simplified to equivalent javascript):]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3758</id>
	<key><![CDATA[Before delving into MethodScript's templating system, it is useful to discuss the shortcomings of existing templating systems. PHP was originally designed as a template language. In fact, there are still relics in PHP that support inline template syntax for mostly HTML pages:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3759</id>
	<key><![CDATA[MethodScript supports templating for web (or any other template needs) through template language tags. In many ways, the support for templates is much like JSP and PHP, but differs in a few key ways, which allow greater flexibility when creating text via templates.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3760</id>
	<key><![CDATA[As you can see, the html is already pre-rendered with the correct styling. If you actually did intend on the code to remain javascript for whatever reason (perhaps you wanted it to flash unstyled content??) then you would have to write the javascript in directly.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3761</id>
	<key><![CDATA[Events are handled via individualized event handlers for each event type. Each element has its own events available to it via javascript compiled MethodScript. A simple example is a button that pops up an alert when it is clicked.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3762</id>
	<key><![CDATA[MethodScript/MST compilation: The code is compiled into units. Templates are compiled and validated during this stage, and all code is checked for lexical correctness, as well as type safety. Segments of code in templates that are to be compiled into javascript are set aside for now, though the MethodScript optimizer will have already done as much optimization as possible. The scripts that need to be compiled to javascript are then cross compiled into javascript and server side MethodScript (where applicable) and cached until needed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3763</id>
	<key><![CDATA[Alert.mst:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3764</id>
	<key><![CDATA[This would compile to the following output:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3765</id>
	<key><![CDATA[As you can see, MethodScript does most of the work for you, making it far simpler to use than javascript. However, this does not stop you from using javascript yourself. Any javascript you embed in the template will be included exactly as is, so existing javascript librarys can be used. Unfortunately, you cannot interface MethodScript with javascript directly, though MethodScript can call javascript functions indirectly. Inside of the tag, the %sthis%s keyword is available, and refers to that instance of the html tag.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3766</id>
	<key><![CDATA[One of the most important things that javascript provides is the ability to access the dom. MethodScript exposes this functionality in an easy to use way, so you can take advantage of some of the type safety that the templating system uses, while still being able to access core properties easily. The simplest and most straightforward example would be for a div to hide itself after a few seconds. To do this, we can use the methods in the XHTML class in a script block.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3767</id>
	<key><![CDATA[To declare your own element with attributes in MethodScript is a two step process. First, you must set the attributesClass value of the @{XHTML} annotation to your struct class, which should extend the nearest parent class's attributesClass struct. (The top level XHTML element, which everything must extend from ultimately defines an empty struct, called Attributes.) Secondly, you must implement the (Attributes) or (Attributes, UIComponents...) constructor. Upon creation (either through pure MethodScript or via mst templates) this data will be passed in then. All attribute values must extend the primitive type, and cannot be objects.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3768</id>
	<key><![CDATA[Javascript Compiler]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3769</id>
	<key><![CDATA[This would actually result in html code that had no javascript in it, because the dom manipulation would happen at compile time, because all the components are known to the compiler, and they don't require any javascript to be run by the client. The output html would be simple:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3770</id>
	<key><![CDATA[For example:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3771</id>
	<key><![CDATA[which would result in the the following html:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3772</id>
	<key><![CDATA[and regardless of how we just defined that, we can use it via pure MethodScript like this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3773</id>
	<key><![CDATA[This transforms into fairly complicated HTML, because as much code as possible is converted to client side javascript, but since much of the script still must run server side, this compiles into a cached script that is registered with the runtime, and responds appropriately to the call. Since the script may expose security holes if the data isn't properly validated, even more complication may be added to the javascript and server side compiled script. Essentially, this turns into the following javascript (client side):]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3774</id>
	<key><![CDATA[Variable Inclusion]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3775</id>
	<key><![CDATA[MethodScript runtime: When a user accesses a web page, it starts the process of generating the actual output html. The parameters sent by the user are used to piece together the output from the cached sections of templates, or fully dynamically if using pure MethodScript. Once the construction of the output is complete, the output is sent to the user.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3776</id>
	<key><![CDATA[DOM access]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3777</id>
	<key><![CDATA[Variable inclusion is the most straightforward way to make templates dynamic, and this principal is core to the understanding of the templating system. When a component defines a property, it is eligible to be used as an attribute. Attributes can be set via the component constructor, or as individual xml attributes in a template. When creating a custom component, attributes are defined via the constructor as a struct, or in a DTD ATTLIST in a template. Once defined, the variable is defined in the template as a $var, and are simply expanded out. Note that only primitive values are available in attributes, if you have a more complex layout, you'll need to use static scripting to properly layout a page.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3778</id>
	<key><![CDATA[External MethodScript-compiled-to-javascript can also be included, akin to how you would include a script tag in the head of an html page. To do this, in the XHTML object, call the useScript method, and pass it a reference to a .ms file, which will be cross compiled and be made available in the javascript. Your server can be configured to manage caching automatically, or if you have a volatile environment, to simply turn off caching, and the compiled javascript will be re-rendered each time it is requested as a part of the browser request process.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3779</id>
	<key><![CDATA[Declaring attributes in custom components]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3780</id>
	<key><![CDATA[Some final notes on the MethodScript to Javascript compiler:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3781</id>
	<key><![CDATA[Scripts may look nothing like each other. Where possible, anything that can be done server side does not get compiled into the javascript, but the compiled javascript is guaranteed to be equivalent to the behavior defined in the MethodScript. The compiler does this by using a different compilation algorithm in the supported functions, which makes them "magic" in the sense that you can't directly replicate this behavior with custom code, unless you hook into the compiler functionality. There are three steps when running the compiler and script: MethodScript/MST compilation,  MethodScript runtime, Javascript runtime. Each of these steps transforms the output significantly, so tracing a problem can be tricky if you don't understand what the system is doing at each step.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3782</id>
	<key><![CDATA[Note that the output javascript may not look anything at all like you expected, as it is run through several optimizations to ensure the least amount of code is actually sent to the client, however, the behavior should be consistent. You can turn debug flags on in the compiler, and it will output comments into the html explaining in more detail where certain javascript came from, as well as how the compilation process happened, so if you do find a bug in your code, it is easy to trace back to the root of the problem by reverse engineering the javascript. Additionally, obfuscation, minification, and formatting options can be set as well.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3783</id>
	<key><![CDATA[DOM Events]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3784</id>
	<key><![CDATA[All server data methods are individually supported in this equivalent manner, that is, whatever data is needed to run the script on the server is requested from the client, and as little data as possible to actually run the script server side is sent, allowing for zero data leaks to the client, while maximizing functionality.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3785</id>
	<key><![CDATA[or like this in another template:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3786</id>
	<key><![CDATA[In addition to writing Javascript, you may also set the type="text/typescript" and the compiler will use the builtin TypeScript compiler to cross compile from TypeScript to JavaScript.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3787</id>
	<key><![CDATA[[[%s|OPTIMIZE_DYNAMIC]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3788</id>
	<key><![CDATA[Vital Info]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3789</id>
	<key><![CDATA[Find a bug in this page? %sEdit this page yourself, then submit a pull request.%s (Note this page is automatically generated from the documentation in the source code.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3790</id>
	<key><![CDATA[This function should only be used by the compiler, behavior may be undefined if it is used in code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3791</id>
	<key><![CDATA[Usages]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3792</id>
	<key><![CDATA[Sorry, there are no examples for this function! :(]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3793</id>
	<key><![CDATA[A dummy function. This should not show up in the documentation.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3794</id>
	<key><![CDATA[The output would be:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3795</id>
	<key><![CDATA[Example 1]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3796</id>
	<key><![CDATA[Given the following code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3797</id>
	<key><![CDATA[Example 2]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3798</id>
	<key><![CDATA[[[%s|CONSTANT_OFFLINE]] %s [[%s|CACHE_RETURN]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3799</id>
	<key><![CDATA[Demonstrates a negative number]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3800</id>
	<key><![CDATA[Demonstrates a positive number]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3801</id>
	<key><![CDATA[[[%s|CONSTANT_OFFLINE]] %s [[%s|OPTIMIZE_DYNAMIC]] %s [[%s|CACHE_RETURN]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3802</id>
	<key><![CDATA[Demonstrates adding two numbers together, using the operator syntax]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3803</id>
	<key><![CDATA[Example 3]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3804</id>
	<key><![CDATA[Example 4]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3805</id>
	<key><![CDATA[See Also]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3806</id>
	<key><![CDATA[Demonstrates order of operations]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3807</id>
	<key><![CDATA[Demonstrates grouping with parenthesis]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3808</id>
	<key><![CDATA[Demonstrates adding two numbers together]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3809</id>
	<key><![CDATA[Demonstrates adding a shaped recipe.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3810</id>
	<key><![CDATA[The output might be:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3811</id>
	<key><![CDATA[The recipeArray can contain the following keys:  Shaped Recipe Data. Turns 9 stone into obsidian.  Shapeless Recipe Data. Combines tall grass and dirt to make grass block. Furnace Recipe Data. Turn grass or mycelium into dirt through smelting. (multi-item type input) StoneCutting Recipe Data. Turns diamond hoe into diamond. (single item type input)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3812</id>
	<key><![CDATA[Adds a recipe to the server and returns whether it was added or not.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3813</id>
	<key><![CDATA[None]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3814</id>
	<key><![CDATA[Getting entities in your chunk]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3815</id>
	<key><![CDATA[Getting entities in a chunk]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3816</id>
	<key><![CDATA[Getting all entities in a world]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3817</id>
	<key><![CDATA[Outputs debug information about a variable to standard out. Unlike %s, this only accepts an ivar; it is a meta function. The runtime will then take the variable, and output information about it, in a human readable format, including the variable's defined type, actual type, name and value.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3818</id>
	<key><![CDATA[Basic usage with auto type]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3819</id>
	<key><![CDATA[With subtype]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3820</id>
	<key><![CDATA[With defined type]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3821</id>
	<key><![CDATA[[[%s|CONSTANT_OFFLINE]] %s [[%s|OPTIMIZE_DYNAMIC]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3822</id>
	<key><![CDATA[Functional usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3823</id>
	<key><![CDATA[Short circuit]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3824</id>
	<key><![CDATA[Operator syntax, false condition]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3825</id>
	<key><![CDATA[Returns the boolean value of a logical AND across all arguments. Uses lazy determination, so once an argument returns false, the function returns. Operator syntax is supported: @a && @b]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3826</id>
	<key><![CDATA[Operator syntax, true condition]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3827</id>
	<key><![CDATA[Basic usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3828</id>
	<key><![CDATA[Associative array creation]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3829</id>
	<key><![CDATA[[[%s|Learning Trail: Arrays]], [[%s|Learning Trail: Array Iteration]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3830</id>
	<key><![CDATA[Demonstrates finding a value]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3831</id>
	<key><![CDATA[Example 5]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3832</id>
	<key><![CDATA[Demonstrates not finding a value]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3833</id>
	<key><![CDATA[[[%s|NO_SIDE_EFFECTS]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3834</id>
	<key><![CDATA[Demonstrates finding a value listed multiple times]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3835</id>
	<key><![CDATA[Demonstrates finding a string]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3836</id>
	<key><![CDATA[Demonstrates finding a value in an associative array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3837</id>
	<key><![CDATA[Demonstrates usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3838</id>
	<key><![CDATA[Demonstrates that the array is cloned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3839</id>
	<key><![CDATA[Demonstrated that arrays within the array are also cloned by a deep clone.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3840</id>
	<key><![CDATA[Basic usage, with false condition]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3841</id>
	<key><![CDATA[Pulls out only the odd numbers in an associative array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3842</id>
	<key><![CDATA[Filters an array by callback. The items in the array are iterated over, each one sent to the closure one at a time, as key, value. The closure should return true if the item should be included in the array, or false if not. The filtered array is then returned by the function. If the array is associative, the keys will continue to map to the same values, however a normal array, the values are simply pushed onto the new array, and won't correspond to the same values per se.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3843</id>
	<key><![CDATA[Pulls out only the odd numbers]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3844</id>
	<key><![CDATA[Returns the element specified at the index of the array. If the element doesn't exist, an exception is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3845</id>
	<key><![CDATA[Demonstrates basic functional usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3846</id>
	<key><![CDATA[[[%s|OPTIMIZE_CONSTANT]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3847</id>
	<key><![CDATA[Demonstrates default (note that you cannot use the bracket syntax with this)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3848</id>
	<key><![CDATA[Demonstrates basic usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3849</id>
	<key><![CDATA[You can use a more traditional method to access elements in an array: array[index] is the same as array_get(array, index), where array is a variable, or function that is an array. In fact, the compiler converts array[index] into array_get(array, index). So if there is a problem with your code, you will get an error message about a problem with the array_get function, even though you may not be using that function directly. If using the plain function access, then if a default is provided, the function will always return that value if the array otherwise doesn't have a value there. This is opposed to throwing an exception or returning %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3850</id>
	<key><![CDATA[Demonstrates exception]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3851</id>
	<key><![CDATA[[[%s|Learning Trail: Arrays]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3852</id>
	<key><![CDATA[Given an array and glue, to-strings all the elements in the array (just the values, not the keys), and joins them with the glue, defaulting to a space. For instance array_implode(array(1, 2, 3), '-') will return "1-2-3".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3853</id>
	<key><![CDATA[With associative array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3854</id>
	<key><![CDATA[Not found]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3855</id>
	<key><![CDATA[[[%s|OPTIMIZE_DYNAMIC]] %s [[%s|NO_SIDE_EFFECTS]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3856</id>
	<key><![CDATA[Demonstrates nested arrays]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3857</id>
	<key><![CDATA[Demonstrates a false condition]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3858</id>
	<key><![CDATA[Demonstrates nested arrays, where the value is not an array (if the first element is not an array an exception will be thrown, but inner values need not be arrays).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3859</id>
	<key><![CDATA[Demonstrates an associative array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3860</id>
	<key><![CDATA[Example 6]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3861</id>
	<key><![CDATA[Demonstrates a true condition]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3862</id>
	<key><![CDATA[Usage as if it were array_push]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3863</id>
	<key><![CDATA[Usage with normal arrays. The default comparison method is HASH]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3864</id>
	<key><![CDATA[The value is taken from the left array. This is not important for primitives, but when using arrays and a custom closure, it may make a difference.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3865</id>
	<key><![CDATA[Demonstrates behavior with duplicate values]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3866</id>
	<key><![CDATA[Demonstrates that STRICT_EQUALS does not consider different types to be equal]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3867</id>
	<key><![CDATA[1) but since the comparison method uses equals, not sequals, these arrays are considered equivalent.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3868</id>
	<key><![CDATA[Usage with a custom closure]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3869</id>
	<key><![CDATA[Usage with associative array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3870</id>
	<key><![CDATA[Returns an array that is the intersection of the two provided arrays. If either array is associative, it puts the function in associative mode. For normal arrays, the values are compared, and for associative arrays, the keys are compared, but the values are taken from the left array. comparisonMode is only applicable for normal arrays, and defaults to HASH, but determines the mode in which the system decides if two values are equal or not. A closure may be sent instead, which should return true if the two values are considered equals or not. Using the HASH mode is fastest, as this puts the function in an optimizing mode, and it can run at O(n log n). Otherwise, the runtime is O(n**2). The results between HASH and STRICT_EQUALS should almost never be different, and so in that case using STRICT_EQUALS has a lower performance for no gain, but there may be some cases where using the hash code is not desirable. EQUALS is necessary if you wish to disregard typing, so that array(1, 2, 3) and array('1', '2', '3') are considered equal. Duplicate values in the left array are duplicated, but duplicates in the right are not.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3871</id>
	<key><![CDATA[1 (but does not]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3872</id>
	<key><![CDATA[Example 7]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3873</id>
	<key><![CDATA[Note that the results of this method are the same as the previous example, but this version would be faster, and is preferred in all but the most exceptional cases.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3874</id>
	<key><![CDATA[Demonstrates usage with equals. Note that &apos;1&apos;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3875</id>
	<key><![CDATA[Example 8]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3876</id>
	<key><![CDATA[Use with associative arrays]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3877</id>
	<key><![CDATA[Basic use with normal arrays]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3878</id>
	<key><![CDATA[Returns the keys in this array as a normal array. If the array passed in is already a normal array, the keys will be 0 -> (array_size(array) - 1)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3879</id>
	<key><![CDATA[Parsing a csv file with minimal code]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3880</id>
	<key><![CDATA[With associative arrays]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3881</id>
	<key><![CDATA[With overwrites]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3882</id>
	<key><![CDATA[Usage with normal array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3883</id>
	<key><![CDATA[Operator syntax. Note the difference between this and the array clone operator is that this occurs on the Left Hand Side (LHS) of the assignment.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3884</id>
	<key><![CDATA[Pushes the specified value(s) onto the end of the array. Unlike calling array_set(@array, array_size(@array), @value) on a normal array, the size of the array is increased first. The special operator syntax @array[] = 'value' is also supported, as shorthand for array_push().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3885</id>
	<key><![CDATA[Demonstrates functional usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3886</id>
	<key><![CDATA[Demonstrates pushing multiple values (note that it is not possible to use the bracket notation and push multiple values)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3887</id>
	<key><![CDATA[Usage with an associative array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3888</id>
	<key><![CDATA[Usage with a normal array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3889</id>
	<key><![CDATA[Usage with a normal array, using getKeys false, and returning 2 results]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3890</id>
	<key><![CDATA[Returns a random selection of keys or values from an array. The array may be either normal or associative. Number defaults to 1, and getKey defaults to true. If number is greater than the size of the array, a RangeException is thrown. No value will be returned twice from the array however, one it is "drawn" from the array, it is not placed back in. The order of the elements in the array will also be random, if order is important, use array_sort().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3891</id>
	<key><![CDATA[Combining the strings in an array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3892</id>
	<key><![CDATA[Summing the values of an array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3893</id>
	<key><![CDATA[Removes an index from an array. If the array is a normal array, all values' indices are shifted left one. If the array is associative, the index is simply removed. If the index exists, the value removed is returned. If the index doesn't exist, the array remains unchanged, however it'll throw a RangeException for normal arrays (returns %s for associative arrays).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3894</id>
	<key><![CDATA[Demonstrates custom fill]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3895</id>
	<key><![CDATA[Failure]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3896</id>
	<key><![CDATA[Demonstrates not finding a value because of a type mismatch]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3897</id>
	<key><![CDATA[Demonstrates not finding a value because of a value mismatch]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3898</id>
	<key><![CDATA[Demonstrates using assignment]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3899</id>
	<key><![CDATA[Demonstrated that arrays within the array are not cloned by a shallow clone.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3900</id>
	<key><![CDATA[Basic usage, with true condition]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3901</id>
	<key><![CDATA[String sort]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3902</id>
	<key><![CDATA[Ignore case sort]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3903</id>
	<key><![CDATA[Sorts an array in place, and also returns a reference to the array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3904</id>
	<key><![CDATA[Regular sort]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3905</id>
	<key><![CDATA[Custom sort]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3906</id>
	<key><![CDATA[Numeric sort]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3907</id>
	<key><![CDATA[If the sortType is a closure, it will perform a custom sort type, and the array may contain any values, including sub array values. The closure should accept two values, @left and @right, and should return true if the left value is larger than the right, and false if the left value is smaller than the right, and %s if they are equal. The array will then be re-ordered using a merge sort, using your custom comparator to determine the sort order.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3908</id>
	<key><![CDATA[String sort (with words)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3909</id>
	<key><![CDATA[The complexity of this sort algorithm is guaranteed to be no worse than n log n, as it uses merge sort. The array is sorted in place, a new array is not explicitly created, so if you sort an array that is passed in as a variable, the contents of that variable will be sorted, even if you don't re-assign the returned array back to the variable. If you really need the old array, you should create a copy of the array first, like so: assign(@sorted, array_sort(@array[])). The sort type may be one of the following: REGULAR, NUMERIC, STRING or STRING_IC, or it may be a closure, if the sort should follow custom rules (explained below). A regular sort sorts the elements without changing types first. A numeric sort always converts numeric values to numbers first (so 001 becomes 1). A string sort compares values as strings, and a string_ic sort is the same as a string sort, but the comparision is case-insensitive. If the array contains array values, a CastException is thrown; inner arrays cannot be sorted against each other. If the array is associative, a warning will be raised if the General logging channel is set to verbose, because the array's keys will all be lost in the process. To a%s this warning, and to be more explicit, you can use array_normalize() to normalize the array first. Note that the reason this function is an in place sort instead of explicitly cloning the array is because in most cases, you may not need to actually clone the array, an expensive operation. Due to this, it has slightly different behavior than array_normalize, which could have also been implemented in place.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3910</id>
	<key><![CDATA[Works like array_sort, but does the sort on another thread, then calls the closure and sends it the sorted array. This is useful if the array is large enough to actually "stall" the server when doing the sort. Sort type should be one of REGULAR, NUMERIC, STRING or STRING_IC]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3911</id>
	<key><![CDATA[Mix array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3912</id>
	<key><![CDATA[Removes all non-unique values from an array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3913</id>
	<key><![CDATA[Removal of different datatypes, by setting compareTypes to false]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3914</id>
	<key><![CDATA[No removal of different datatypes]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3915</id>
	<key><![CDATA[compareTypes is true by default, which means that in the array array(1, '1'), nothing would be removed from the array, since both values are different data types. However, if compareTypes is false, then the first value would remain, but the second value would be removed. A new array is returned. If the array is associative, by definition, there are no unique values, so a clone of the array is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3916</id>
	<key><![CDATA[Example 11]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3917</id>
	<key><![CDATA[Example 10]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3918</id>
	<key><![CDATA[Operator syntax using combined operators]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3919</id>
	<key><![CDATA[Accepts an ivariable ivar as a parameter, and puts the specified value mixed in it. Returns the variable that was assigned. Operator syntax is also supported: %s@a = 5;%s. Other forms are supported as well, +=, -=, *=, /=, .=, which do multiple operations at once. Array assigns are also supported: @array[5] = 'new value in index 5';]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3920</id>
	<key><![CDATA[[[%s|OPTIMIZE_CONSTANT]] %s [[%s|OPTIMIZE_DYNAMIC]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3921</id>
	<key><![CDATA[Operator syntax with type]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3922</id>
	<key><![CDATA[String assignment with type]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3923</id>
	<key><![CDATA[String assignment with invalid type]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3924</id>
	<key><![CDATA[Operator syntax]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3925</id>
	<key><![CDATA[Array assignment]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3926</id>
	<key><![CDATA[[[%s|Learning Trail: Variables]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3927</id>
	<key><![CDATA[Example 9]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3928</id>
	<key><![CDATA[Usage with an array with sequential keys]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3929</id>
	<key><![CDATA[Usage with an empty array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3930</id>
	<key><![CDATA[Asyncronously reads in a file.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3931</id>
	<key><![CDATA[This may be a remote file accessed with an SCP style path. (See the [[%s|wiki article]] about SCP credentials for more information.) If the file is not found, or otherwise can't be read in, an IOException is thrown. If the file specified is not within base-dir (as specified in the preferences file), a SecurityException is thrown. (This is not applicable for remote files) The line endings for the string returned will always be \n, even if they originally were \r\n. This method will immediately return, and asynchronously read in the file, and finally send the contents to the callback once the task completes. The callback should have the following signature: closure(@contents, @exception){ &lt;code&gt; }. If @contents is %s, that indicates that an exception occured, and @exception will not be %s, but instead have an exeption array. Otherwise, @contents will contain the file's contents, and @exception will be %s. This method is useful to use in two cases, either you need a remote file via SCP, or a local file is big enough that you notice a delay when simply using the read() function. async_read is threadsafe.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3932</id>
	<key><![CDATA[As an array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3933</id>
	<key><![CDATA[With single number]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3934</id>
	<key><![CDATA[Two arguments]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3935</id>
	<key><![CDATA[[[%s|CONSTANT_OFFLINE]] %s [[%s|CACHE_RETURN]] %s [[%s|NO_SIDE_EFFECTS]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3936</id>
	<key><![CDATA[Returns a new read only copy of the underlying byte array. This array is much more efficient than if the array were made manually, however, it is read only. If you need to manipulate the array's contents, then you can clone the array, however, the returned array (and any clones) cannot be automatically interfaced with the byte array primitives. This operation is discouraged, because normal arrays are very inefficient for dealing with low level bit data.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3937</id>
	<key><![CDATA[[[%s|OPTIMIZE_DYNAMIC]] %s [[%s|CUSTOM_LINK]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3938</id>
	<key><![CDATA[Usage in masking applications. Note that 5 in binary is 101 and 4 is 100. (See bit_or for a more complete example.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3939</id>
	<key><![CDATA[Usage in masking applications. (Used to create a mask)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3940</id>
	<key><![CDATA[Invalid number]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3941</id>
	<key><![CDATA[Broadcasts a message to all or some players and/or console. If permission is given, only players with that permission and console will see the broadcast. If an array of recipients is given, only online players in the list will see the broadcast. Console will receive the broadcast only when the array contains case-insensitive '~console'. Offline players and duplicate recipients in the list will be ignored. If permission/recipients is %s, all players and console will see the broadcast. Throws FormatException when the given recipients array is associative.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3942</id>
	<key><![CDATA[Returns true if the command was run, or false otherwise. Note however that if an alias ends up throwing an exception to the top level, it will not bubble up to this script, it will be caught and dealt with already; if this happens, this function will still return true, because essentially the return value simply indicates if the command matches an alias.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3943</id>
	<key><![CDATA[Allows a CommandHelper alias to be called from within another alias. Typically this is not possible, as a script that runs "/jail = /jail" for instance, would simply be calling whatever plugin that actually provides the jail functionality's /jail command. However, using this function makes the command loop back to CommandHelper only.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3944</id>
	<key><![CDATA[Dynamically calls a user defined procedure. call_proc(_myProc, 'var1') is the equivalent of _myProc('var1'), except you could dynamically build the procedure name if need be. This is useful for dynamic coding, however, closures work best for callbacks. Throws an InvalidProcedureException if the procedure isn't defined. If you are hardcoding the first parameter, a warning will be issued, because it is much more efficient and safe to directly use a procedure if you know what its name is beforehand.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3945</id>
	<key><![CDATA[Works like call_proc, but allows for variable or unknown number of arguments to be passed to a proc. The array parameter is "flattened", and call_proc is essentially called. If the array is associative, an exception is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3946</id>
	<key><![CDATA[Works like runas, except any messages sent to the command sender during command execution are attempted to be intercepted, and are then returned as a string, instead of being sent to the command sender. Note that this is VERY easy for plugins to get around in such a way that this function will not work, this is NOT a bug in CommandHelper, nor is it necessarily a problem in the other plugin either, but the other plugin will have to make changes for it to work properly. A PluginInternalException is thrown if something goes wrong. Any number of things may go wrong that aren't necessarily this function's fault, and in those cases, this exception is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3947</id>
	<key><![CDATA[Changes the current working directory to the path specified, or the user's home directory if omitted. This only works from cmdline mode.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3948</id>
	<key><![CDATA[Dynamically creates a CEntry. This is used internally by the compiler.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3949</id>
	<key><![CDATA[CEntry]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3950</id>
	<key><![CDATA[label, content]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3951</id>
	<key><![CDATA[Returns the unicode character for a given unicode value. This is meant for dynamic input that needs converting to a unicode character, if you're hardcoding it, you should just use '\u1234' syntax instead, however, this is the dynamic equivalent of the \u string escape, so '\u1234']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3952</id>
	<key><![CDATA[[[%s|CONSTANT_OFFLINE]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3953</id>
	<key><![CDATA[char_from_unicode(parse_int('1234', 16))]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3954</id>
	<key><![CDATA[Checks to see if this plaintext password does in fact hash to the hash specified. Unlike md5 or sha1, simply comparing hashes won't work. This function is aware of and compatible with secure_string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3955</id>
	<key><![CDATA[Clamps a value between a certain range, inclusive. If the value is less than the min, the min is returned, if it is greater than the max, the max is returned, and if it is between the two values, the original value is returned. Alternatively, if min > max, clamp works in reverse mode. In that case, the value must be less than max (actually the minimum) and greater than min (actually the maximum). If the value is between the two, it is determined which of the two values it is closer to, and then that value is returned. If the value is exactly between both min and max, the minimum (actually the max) is returned. If min]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3956</id>
	<key><![CDATA[Reverse mode, clamping to minimum]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3957</id>
	<key><![CDATA[Reverse mode, no clamping below]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3958</id>
	<key><![CDATA[Reverse mode, clamping to maximum]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3959</id>
	<key><![CDATA[Clamp to minimum]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3960</id>
	<key><![CDATA[No clamping]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3961</id>
	<key><![CDATA[Reverse mode, clamping to minimum due to equal distance]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3962</id>
	<key><![CDATA[Reverse mode, no clamping above]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3963</id>
	<key><![CDATA[Clamp to maximum]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3964</id>
	<key><![CDATA[Clears a player's entire inventory (including armor).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3965</id>
	<key><![CDATA[Using the id returned from set_timeout]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3966</id>
	<key><![CDATA[Use from within an interval]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3967</id>
	<key><![CDATA[[[%s|Learning Trail: Persistence Network]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3968</id>
	<key><![CDATA[Creates a closure]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3969</id>
	<key><![CDATA[Executes a closure]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3970</id>
	<key><![CDATA[Returns a closure on the provided code. A closure is a datatype that represents some code as code, not the results of some code after it is run. Code placed in a closure can be used as a string, or executed by other functions using the execute() function. If a closure is "to string'd" it will not necessarily look like the original code, but will be functionally equivalent. The current environment is "snapshotted" and stored with the closure, however, this information is only stored in memory, it isn't retained during a serialization operation. Also, the special variable @arguments is automatically created for you, and contains an array of all the arguments passed to the closure, much like procedures. See the wiki article on [[%s|closures]] for more details and examples.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3971</id>
	<key><![CDATA[[[%s|Learning Trail: Closures]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3972</id>
	<key><![CDATA[Returns the color modifier given a color name. If the given color name isn't valid, white is used instead. The list of valid colors is: §0, §1, §2, §3, §4, §5, §6, §7, §8, §9, §a, §b, §c, §d, §e, §f, §k, §l, §m, §n, §o, or §r, in addition the integers 0-15 will work, or the hex numbers from 0-F, and k, l, m, n, o, and r, which represent styles. Unlike manually putting in the color symbol, using this function will return the platform's color code, so if you are wanting to keep your scripts platform independent, it is a much better idea to use this function as opposed to hard coding your own color codes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3973</id>
	<key><![CDATA[Replaces all the colorizable text in the string. For instance, colorize('&aText') would be equivalent to (color('a').'Text'). By default, the symbol is '&', but that can be any arbitrary string that you specify. If text is not a string, that value is simply returned. If you need to "escape" a symbol, (that is have a literal symbol followed by a letter that is a valid color) just repeat the symbol twice, for instance '&&c' would return a literal '&c' instead of a red modifier.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3974</id>
	<key><![CDATA[Symbolic usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3975</id>
	<key><![CDATA[Logs a message to the console. If prefix is true, prepends "CommandHelper:" to the message. Default is true. If you wish to set the default value of prefix to false, use set_runtime_setting('function.console.prefix_default', false).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3976</id>
	<key><![CDATA[Consumes an event, so that lower priority handlers don't even recieve the event. Monitor level handlers will still recieve it, however, and they can check to see if the event was consumed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3977</id>
	<key><![CDATA[Argument specified]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3978</id>
	<key><![CDATA[Skips the rest of the code in this loop, and starts the loop over, with it continuing at the next index. If this function is called outside of a loop, the command will fail. If int is set, it will skip 'int' repetitions. If no argument is specified, 1 is used.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3979</id>
	<key><![CDATA[Converts old pre-1.13 item arrays to new item arrays. Almost all item arrays will be converted successfully when passing them to a function that accepts item arrays. However, if the array is missing the 'type' key, several item types might not convert accurately due to name conflicts. This function offers convenience and ensures better conversion accuracy. Use this if you have item arrays stored in a database and want to convert them all at once. Passing new item arrays to this function is not supported. Conversions may not be supported in far future versions of Minecraft.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3980</id>
	<key><![CDATA[Adds a new objective to the scoreboard, throwing a CREScoreboardException if the name is already in use. The vanilla criteria names are DEATHCOUNT, HEALTH, PLAYERKILLCOUNT, TOTALKILLCOUNT, and DUMMY. You can put anything, but if none of the other values match, 'dummy' will be used. Those values which are not 'dummy' are server-managed. Throws a LengthException if the name is more than 16 characters. Scoreboard defaults to 'main' if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3981</id>
	<key><![CDATA[Adds a new team to the scoreboard. Throws a ScoreboardException if a team already exists with the given name. Throws a LengthException if the team name is more than 16 characters. Scoreboard defaults to 'main' if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3982</id>
	<key><![CDATA[Returns the first false value. The arguments to this function are lazily evaluated, so if the first value evaluates to false, the rest of the arguments will not be evaluated. If none of the values are false, true is returned. Usage of the operator is preferred: &&&]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3983</id>
	<key><![CDATA[Returns a modern material for the a legacy item id, name, notation, or array. If an invalid argument is passed in, %s is returned. Given 1 or '1:0', returns 'STONE'. Given an item array with {name: STONE, data: 1}, returns 'GRANITE'.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3984</id>
	<key><![CDATA[Does a lookup to return the data value of a name. For instance, returns 1 for 'stone'. If the data value cannot be found, %s is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3985</id>
	<key><![CDATA[Demonstrates symbolic usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3986</id>
	<key><![CDATA[Use of secure_string and string]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3987</id>
	<key><![CDATA[Dereferences a property on a value.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3988</id>
	<key><![CDATA[object, element]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3989</id>
	<key><![CDATA[[[%s|TERMINAL]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3990</id>
	<key><![CDATA[Demonstrates divide by zero error]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3991</id>
	<key><![CDATA[Demonstrates double return]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3992</id>
	<key><![CDATA[Returns the first true value. The arguments to this function are lazily evaluated, so if the first value evaluates to true, the rest of the arguments will not be evaluated. If none of the values are true, the last value is returned (which will be falsy). Usage of the operator is preferred: |||]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3993</id>
	<key><![CDATA[Basic usage with first value used]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3994</id>
	<key><![CDATA[Basic usage with default used]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3995</id>
	<key><![CDATA[[[%s|Learning Trail: Loops]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3996</id>
	<key><![CDATA[Like while, but always runs the code at least once. The condition is checked after each run of the code, and if it is true, the code is run again. break and continue work inside a dowhile, but continuing more than once is pointless, since the loop isn't inherently keeping track of any counters anyways. Breaking multiple times still works however. In general, using brace syntax is preferred: do { code(); } while(@condition); instead of using dowhile() directly.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3997</id>
	<key><![CDATA[Pure functional usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3998</id>
	<key><![CDATA[Drops the specified item stack at the specified player's feet (or at an arbitrary Location, if an array is given), and returns its entity UUID. spawnNaturally takes a boolean, which forces the way the item will be spawned. If true, the item will be dropped with a random velocity.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>3999</id>
	<key><![CDATA[exception]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4000</id>
	<key><![CDATA[Registers as a dynamic component, for optimization testing; that is to say, this will not be optimizable ever. It simply returns the argument provided, or %s if none.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4001</id>
	<key><![CDATA[[%sargument%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4002</id>
	<key><![CDATA[The timeout for connections, in ms. If the connection takes longer than this to complete, the connection is terminated, and an IOException will be thrown. A value of 0 turns timeouts off, though this is not recommended.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4003</id>
	<key><![CDATA[subject]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4004</id>
	<key><![CDATA[Sending a plain text email settings saved in profiles.xml as type &quot;email&quot; and id &quot;myID&quot;. This is most useful for keeping credentials out of code directly.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4005</id>
	<key><![CDATA[body]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4006</id>
	<key><![CDATA[type]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4007</id>
	<key><![CDATA[Sending an html email with an inline image]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4008</id>
	<key><![CDATA[If the profile is specified, then the transport settings are pulled from the profile specified in profiles.xml instead,  with any other options specified overridding the values specified in the profile. See [[Profiles]] for more information about setting up profiles in general. The type of the profile is "email". All transport settings may be specified in the profile. This is useful so that sensitive information isn't hardcoded. Here is an example profile:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4009</id>
	<key><![CDATA[The subject of the email]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4010</id>
	<key><![CDATA[string%sarray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4011</id>
	<key><![CDATA[from]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4012</id>
	<key><![CDATA[The username for authenticated connections. In general, if using authentication, it is also a good idea to set use_ssl to true, if the smtp host provides it, as otherwise authentication information is sent via cleartext. Many commercial providers require authentication before they will allow an email to be sent.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4013</id>
	<key><![CDATA[The password for authenticated connections.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4014</id>
	<key><![CDATA[array()]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4015</id>
	<key><![CDATA[use_start_tls]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4016</id>
	<key><![CDATA[An email is a text based message that is sent using the standard email protocol. Various components of the message including a recipient list, subject, and attachments, including one that serves as the message body. The options are listed below, and most of them are optional, with a default provided. A FormatException is thrown if any of the required parameters are missing, or if any of the parameters are in the wrong format. An IOException is thrown if the underlying connection has an IOException, and all other exceptions will cause a PluginInternalException to be thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4017</id>
	<key><![CDATA[For full information about emails, see [%s RFC 2822].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4018</id>
	<key><![CDATA[Transport settings:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4019</id>
	<key><![CDATA[filename]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4020</id>
	<key><![CDATA[&lt;required&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4021</id>
	<key><![CDATA[The attachment content. It may be either a string, in which case it is added to the email as is, or a byte_array, in which case it is base64 encoded for you.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4022</id>
	<key><![CDATA[Sending an email, with multiple recipients]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4023</id>
	<key><![CDATA[This is shorthand for adding a plain text body to the email.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4024</id>
	<key><![CDATA[string%sbyte_array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4025</id>
	<key><![CDATA[Sends an email. See the extended description for more information.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4026</id>
	<key><![CDATA[Email settings:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4027</id>
	<key><![CDATA[attachments]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4028</id>
	<key><![CDATA[The SMTP port to connect to]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4029</id>
	<key><![CDATA[Setting the body is actually shorthand for adding an attachment with type text/plain, inline disposition, and the plain string content. In order to send an html email, you'll need to use attachments. |}]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4030</id>
	<key><![CDATA[The mime type of the attachment. In general, the least specific mime type is application/octet-stream, so you should use this if you aren't sure of the mime type. For a list of all official IANA defined mime types, see [%s here].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4031</id>
	<key><![CDATA[timeout]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4032</id>
	<key><![CDATA[content]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4033</id>
	<key><![CDATA[Sending an email, with a binary attachment]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4034</id>
	<key><![CDATA[If true, the smtps protocol is used. Otherwise, plain smtp is used.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4035</id>
	<key><![CDATA['localhost']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4036</id>
	<key><![CDATA[The host to connect to, e.g. 'smtp.example.com'. No protocol should be provided.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4037</id>
	<key><![CDATA[Sending a plain text email using default transport and email settings]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4038</id>
	<key><![CDATA['&lt;No Subject&gt;']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4039</id>
	<key><![CDATA[Sending an email, with a text attachment]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4040</id>
	<key><![CDATA[The description of this attachment.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4041</id>
	<key><![CDATA[The filename of this attachment.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4042</id>
	<key><![CDATA[[[%s|Learning Trail: Profiles]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4043</id>
	<key><![CDATA[Note that if debug-mode is true, more information about the connection itself will be output during the connection. This method blocks until the email has completed sending, so it may be useful to send the email on a separate thread.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4044</id>
	<key><![CDATA[use_ssl]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4045</id>
	<key><![CDATA[Sending a html email, with text fallback]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4046</id>
	<key><![CDATA[false]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4047</id>
	<key><![CDATA[Sending a plain text email using gmail]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4048</id>
	<key><![CDATA[The from address to be used in the email.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4049</id>
	<key><![CDATA[The recipient, or recipient list. If the value is a string, it should be a simple email address, and will be set as a TO field. Alternatively, a list of addresses may be provided, in which case each of them will be added to the TO list. CC and BCC recipients may also be added. Instead of a string, provide an array with the keys "type" and "address", where type is one of "TO", "CC", or "BCC", and the address is the email address. To send the email to one recipient using CC or BCC, use this form: array(array(type: 'BCC', address: 'email@example.com'))]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4050</id>
	<key><![CDATA[disposition]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4051</id>
	<key><![CDATA[There are two types of options that can be provided, transport settings, and email settings. The transport settings affect connection to the smtp server, and email settings affect the email itself.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4052</id>
	<key><![CDATA[The content disposition.  Generally, you will only use either "inline" or "attachment". If the disposition is set to "inline", then  it will be up to the email client to display this attachment to the user automatically, selecting from the best type that it can render, for instance, or inline images. If it is set to "attachment", it will be offered as a download to the user, in most clients. Other content disposition headers may be set as well. See RFC 2183 for full information on how to use this field.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4053</id>
	<key><![CDATA[Allows for providing various attachments to an email, such as HTML or a file. It is an array of zero or more arrays, with the following keys:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4054</id>
	<key><![CDATA[Many smtp servers require this setting to be true. Check with the provider to find out if this is the case.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4055</id>
	<key><![CDATA[Adds an enchantment to an item in the player's inventory. Type can be a single string, or an array of enchantment names. If slot is %s, the currently selected slot is used. If the enchantment cannot be applied to the specified item, an EnchantmentException is thrown, and if the level specified is not valid, a RangeException is thrown. If type is an array, level must also be an array, with equal number of values in it, with each int corresponding to the appropriate type. The minecraft names for enchantments may be used: [%s], and level may be a roman numeral as well.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4056</id>
	<key><![CDATA[Adds enchantments to an item in the player's inventory. A single enchantment type and level can be specified or an enchantment array may be given. If slot is %s, the currently selected slot is used. If an enchantment cannot be applied to the specified item, an EnchantmentException is thrown. The enchantment array must have the enchantment as keys and levels as the values. (eg. array('unbreaking': 1)) The minecraft names for enchantments may be used: [%s], and the level parameter may be a roman numeral as well.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4057</id>
	<key><![CDATA[Returns an informational list of all valid enchantment names. Note that this will simply cover all enchantment types, but may not be a comprehensive list of names that can be accepted, there may be more, however, the list returned here is "comprehensive" and "official". Additionally, this may vary from server type to server type.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4058</id>
	<key><![CDATA[Returns the compile date, in a millisecond unit time stamp, of when MethodScript was compiled, or %s, if that can't be computed for various reasons.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4059</id>
	<key><![CDATA[Returns an array of all entities within the given distance from the location. Set type argument to filter entities to a specific entity type. You can pass an array of types. Valid types (case doesn't matter): DROPPED_ITEM, MAGMA_CUBE, SILVERFISH, MULE, HUSK, VINDICATOR, PILLAGER, SHULKER_BULLET, VILLAGER, AREA_EFFECT_CLOUD, PAINTING, TURTLE, TRADER_LLAMA, SMALL_FIREBALL, CAVE_SPIDER, SLIME, DROWNED, FIREBALL, EVOKER, MINECART_HOPPER, ENDERMITE, PLAYER, SALMON, ZOMBIE, PANDA, MINECART_COMMAND, OCELOT, ENDERMAN, ZOMBIE_VILLAGER, LLAMA, ENDER_DRAGON, WITCH, EXPERIENCE_ORB, ITEM_FRAME, WITHER, ARROW, CREEPER, ILLUSIONER, COD, ENDER_EYE, ZOMBIE_HORSE, MINECART_TNT, FIREWORK, PRIMED_TNT, RAVAGER, BOAT, SHULKER, FISHING_HOOK, PHANTOM, BLAZE, SKELETON_HORSE, COW, WANDERING_TRADER, PIG, MINECART_MOB_SPAWNER, WOLF, IRON_GOLEM, PIG_ZOMBIE, SHEEP, VEX, ENDER_PEARL, TRIDENT, POLAR_BEAR, MINECART, SNOWMAN, MINECART_CHEST, LEASH_HITCH, SQUID, DRAGON_FIREBALL, ELDER_GUARDIAN, HORSE, ARMOR_STAND, LIGHTNING, PARROT, EVOKER_FANGS, FOX, GIANT, STRAY, SPECTRAL_ARROW, CAT, RABBIT, DONKEY, ENDER_CRYSTAL, TROPICAL_FISH, SPIDER, SKELETON, WITHER_SKELETON, MUSHROOM_COW, CHICKEN, SNOWBALL, THROWN_EXP_BOTTLE, WITHER_SKULL, PUFFERFISH, GUARDIAN, EGG, LLAMA_SPIT, FALLING_BLOCK, SPLASH_POTION, GHAST, BAT, DOLPHIN, MINECART_FURNACE, or UNKNOWN]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4060</id>
	<key><![CDATA[Returns whether or not the first entity can have the other entity in an unimpeded line of sight, ignoring the direction it's facing. For instance, for players this mean that it can have the other entity on its screen and that this one is not hidden by opaque blocks. This uses the same algorithm that hostile mobs use to find the closest player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4061</id>
	<key><![CDATA[Returns an array containing all blocks along the living entity's line of sight. transparents is an array of block IDs, only air by default. maxDistance represents the maximum distance to scan. The server may cap the scan distance, but probably by not any less than 100 meters.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4062</id>
	<key><![CDATA[Sample output]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4063</id>
	<key><![CDATA[Returns the number of seconds until this entity stops being on fire, 0 if it already isn't.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4064</id>
	<key><![CDATA[Removes the specified entity from the world, without any drops or animations. Note: you can't remove players. As a safety measure for working with NPC plugins, it will not work on anything human, even if it is not a player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4065</id>
	<key><![CDATA[playercreated: Whether the iron golem was built by a player or not.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4066</id>
	<key><![CDATA[type: The type of the rabbit (can be BROWN, WHITE, BLACK, BLACK_AND_WHITE, GOLD, SALT_AND_PEPPER, or THE_KILLER_BUNNY).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4067</id>
	<key><![CDATA[MAGMA_CUBE]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4068</id>
	<key><![CDATA[DROPPED_ITEM]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4069</id>
	<key><![CDATA[angry: Whether the zombie is angry.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4070</id>
	<key><![CDATA[powered: If the Creeper is powered or not.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4071</id>
	<key><![CDATA[HUSK]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4072</id>
	<key><![CDATA[critical: If this arrow is critical. (boolean)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4073</id>
	<key><![CDATA[effect: Whether the strike is an effect that does no damage. Not editable.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4074</id>
	<key><![CDATA[gravity: If the ArmorStand has gravity (falls) or not (floats in midair). Defaults to true.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4075</id>
	<key><![CDATA[source: The source of the cloud. Can be living entity, dispenser location array, or %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4076</id>
	<key><![CDATA[VILLAGER]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4077</id>
	<key><![CDATA[SHULKER_BULLET]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4078</id>
	<key><![CDATA[chest: Whether the horse has a chest equipped.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4079</id>
	<key><![CDATA[AREA_EFFECT_CLOUD]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4080</id>
	<key><![CDATA[damage: If the falling block can damage entities.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4081</id>
	<key><![CDATA[beamtarget: The location the EnderCrystal beam is targeting, or %s if there's no target.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4082</id>
	<key><![CDATA[PAINTING]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4083</id>
	<key><![CDATA[derp: With derp mode set to true the snowman wears no pumpkin]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4084</id>
	<key><![CDATA[sitting: If the wolf is sitting.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4085</id>
	<key><![CDATA[effects: An array of firework effect arrays. (see %s)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4086</id>
	<key><![CDATA[baseplate: Whether or not the ArmorStand has a base plate. Defaults to true.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4087</id>
	<key><![CDATA[size: The size of the slime.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4088</id>
	<key><![CDATA[knockback: The knockback strength. (double)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4089</id>
	<key><![CDATA[domestication: The domestication level of the horse (can't be higher than the maximum domestication level).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4090</id>
	<key><![CDATA[SLIME]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4091</id>
	<key><![CDATA[offset: The offset of the block being displayed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4092</id>
	<key><![CDATA[style: The horse's style (can be NONE, SOCKS, WHITEFIELD, WHITE_DOTS, or BLACK_DOTS).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4093</id>
	<key><![CDATA[phase: What AI phase the EnderDragon is in. (can be BREATH_ATTACK, CHARGE_PLAYER, CIRCLING, DYING, FLY_TO_PORTAL, HOVER, LAND_ON_PORTAL, LEAVE_PORTAL, ROAR_BEFORE_ATTACK, SEARCH_FOR_BREATH_ATTACK_TARGET, or STRAFING)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4094</id>
	<key><![CDATA[radiuspertick: The distance the radius will change per tick.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4095</id>
	<key><![CDATA[reapplicationdelay: The interval in ticks for how often effects are applied to entities in cloud.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4096</id>
	<key><![CDATA[pickupdelay: The delay before the item is available to be picked up.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4097</id>
	<key><![CDATA[durationonuse: The amount the duration will change when the effects are applied.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4098</id>
	<key><![CDATA[charged: Whether or not the wither skull is charged.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4099</id>
	<key><![CDATA[carried: The block that the Enderman is carring.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4100</id>
	<key><![CDATA[saddle: An item pertaining to the saddle a horse has put on. Can be anything.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4101</id>
	<key><![CDATA[Returns an associative array containing all the data of the given entity that are too specific to have its own function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4102</id>
	<key><![CDATA[saddled: If the pig has a saddle.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4103</id>
	<key><![CDATA[particle: The particle which comprises the cloud (can be SMOKE_NORMAL, ENCHANTMENT_TABLE, REDSTONE, SNOW_SHOVEL, BUBBLE_COLUMN_UP, SPELL_MOB, CAMPFIRE_SIGNAL_SMOKE, BLOCK_DUST, SWEEP_ATTACK, WATER_SPLASH, LANDING_LAVA, SLIME, FALLING_LAVA, DRAGON_BREATH, CURRENT_DOWN, ITEM_CRACK, FALLING_DUST, SNEEZE, WATER_BUBBLE, FLASH, VILLAGER_ANGRY, HEART, END_ROD, CRIT_MAGIC, SUSPENDED, WATER_DROP, SPELL, FALLING_WATER, SPELL_INSTANT, LAVA, VILLAGER_HAPPY, SQUID_INK, CRIT, CLOUD, BUBBLE_POP, COMPOSTER, NAUTILUS, EXPLOSION_LARGE, TOWN_AURA, SUSPENDED_DEPTH, CAMPFIRE_COSY_SMOKE, NOTE, SNOWBALL, SPELL_MOB_AMBIENT, DAMAGE_INDICATOR, SMOKE_LARGE, TOTEM, BARRIER, EXPLOSION_NORMAL, FLAME, SPIT, PORTAL, MOB_APPEARANCE, DOLPHIN, SPELL_WITCH, DRIP_WATER, EXPLOSION_HUGE, WATER_WAKE, UNKNOWN, FIREWORKS_SPARK, DRIP_LAVA, or BLOCK_CRACK).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4104</id>
	<key><![CDATA[drop: Whether or not the EnderEye will drop an item on despawn.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4105</id>
	<key><![CDATA[fuseticks: The number of ticks until the explosion.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4106</id>
	<key><![CDATA[DONKEY, MULE]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4107</id>
	<key><![CDATA[visible: Whether or not the ArmorStand is visible. Defaults to true.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4108</id>
	<key><![CDATA[crouching: Whether or not the fox is crouching.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4109</id>
	<key><![CDATA[color: The color of the shulker (can be WHITE, ORANGE, MAGENTA, LIGHT_BLUE, YELLOW, LIME, PINK, GRAY, LIGHT_GRAY, CYAN, PURPLE, BLUE, BROWN, GREEN, RED, or BLACK).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4110</id>
	<key><![CDATA[OCELOT]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4111</id>
	<key><![CDATA[MINECART_COMMAND]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4112</id>
	<key><![CDATA[ENDERMAN]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4113</id>
	<key><![CDATA[marker: Whether or not it has a tiny collision box and disables interaction. Defaults to false.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4114</id>
	<key><![CDATA[dropitem: If the falling block will break into an item if it cannot be placed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4115</id>
	<key><![CDATA[ZOMBIE_VILLAGER]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4116</id>
	<key><![CDATA[FIREBALL, DRAGON_FIREBALL, SMALL_FIREBALL]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4117</id>
	<key><![CDATA[sitting: If the parrot is sitting.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4118</id>
	<key><![CDATA[color: The base color of the fish (can be WHITE, ORANGE, MAGENTA, LIGHT_BLUE, YELLOW, LIME, PINK, GRAY, LIGHT_GRAY, CYAN, PURPLE, BLUE, BROWN, GREEN, RED, or BLACK).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4119</id>
	<key><![CDATA[critical: If this trident is critical. (boolean)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4120</id>
	<key><![CDATA[customname: The name of the command minecart.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4121</id>
	<key><![CDATA[ENDER_DRAGON]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4122</id>
	<key><![CDATA[EXPERIENCE_ORB]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4123</id>
	<key><![CDATA[rotation: The rotation of the frame's item (can be CLOCKWISE, CLOCKWISE_135, CLOCKWISE_45, COUNTER_CLOCKWISE, COUNTER_CLOCKWISE_45, FLIPPED, FLIPPED_45, or NONE).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4124</id>
	<key><![CDATA[direction: The direction the wither skull is heading toward.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4125</id>
	<key><![CDATA[SPLASH_POTION, LINGERING_POTION (removed in 1.14, use SPLASH_POTION)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4126</id>
	<key><![CDATA[profession: The profession of the villager (can be BUTCHER, FARMER, LIBRARIAN, NITWIT, ARMORER, CARTOGRAPHER, CLERIC, FISHERMAN, FLETCHER, LEATHERWORKER, MASON, NONE, SHEPHERD, TOOLSMITH, or WEAPONSMITH).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4127</id>
	<key><![CDATA[ITEM_FRAME]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4128</id>
	<key><![CDATA[ARROW]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4129</id>
	<key><![CDATA[size: The size of the magma cube.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4130</id>
	<key><![CDATA[angry: If the wolf is angry.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4131</id>
	<key><![CDATA[CREEPER]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4132</id>
	<key><![CDATA[ENDER_EYE]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4133</id>
	<key><![CDATA[TIPPED_ARROW (removed in 1.14, use ARROW)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4134</id>
	<key><![CDATA[critical: If this spectral arrow is critical. (boolean)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4135</id>
	<key><![CDATA[FIREWORK]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4136</id>
	<key><![CDATA[PRIMED_TNT]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4137</id>
	<key><![CDATA[BOAT]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4138</id>
	<key><![CDATA[SHULKER]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4139</id>
	<key><![CDATA[block: The material name of the block being displayed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4140</id>
	<key><![CDATA[anger: The pig zombie's anger level.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4141</id>
	<key><![CDATA[pattern: The pattern type on the fish (can be KOB, SUNSTREAK, SNOOPER, DASHER, BRINELY, SPOTTY, FLOPPER, STRIPEY, GLITTER, BLOCKFISH, BETTY, or CLAYFISH).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4142</id>
	<key><![CDATA[waittime: The age of the cloud in ticks before effects can be applied.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4143</id>
	<key><![CDATA[amount: How much experience is contained within the orb.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4144</id>
	<key><![CDATA[PIG]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4145</id>
	<key><![CDATA[target: The UUID of the entity the bullet will head toward, or %s if there is no target.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4146</id>
	<key><![CDATA[arms: Whether or not the ArmorStand has arms. Defaults to false.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4147</id>
	<key><![CDATA[radius: The radius of the cloud.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4148</id>
	<key><![CDATA[SKELETON_HORSE, ZOMBIE_HORSE]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4149</id>
	<key><![CDATA[WOLF]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4150</id>
	<key><![CDATA[sitting: If the ocelot is sitting. (1.13 only)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4151</id>
	<key><![CDATA[PIG_ZOMBIE]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4152</id>
	<key><![CDATA[IRON_GOLEM]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4153</id>
	<key><![CDATA[block: The falling block. Not editable.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4154</id>
	<key><![CDATA[damage: The amount of damage. (double)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4155</id>
	<key><![CDATA[strength: The firework rocket's flight time.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4156</id>
	<key><![CDATA[direction: The direction the fireball is heading toward.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4157</id>
	<key><![CDATA[SHEEP]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4158</id>
	<key><![CDATA[type: The art on the painting (can be KEBAB, AZTEC, ALBAN, AZTEC2, BOMB, PLANT, WASTELAND, POOL, COURBET, SEA, SUNSET, CREEBET, WANDERER, GRAHAM, MATCH, BUST, STAGE, VOID, SKULL_AND_ROSES, WITHER, FIGHTERS, POINTER, PIGSCENE, BURNING_SKULL, SKELETON, or DONKEY_KONG).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4159</id>
	<key><![CDATA[MINECART, MINECART_FURNACE, MINECART_HOPPER, MINECART_MOB_SPAWNER, MINECART_TNT]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4160</id>
	<key><![CDATA[despawnticks: The number of ticks counted until despawn. (will despawn after 80 ticks)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4161</id>
	<key><![CDATA[TRIDENT]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4162</id>
	<key><![CDATA[patterncolor: The color of the pattern on the fish.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4163</id>
	<key><![CDATA[SNOWMAN]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4164</id>
	<key><![CDATA[item: The item for the thrown potion.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4165</id>
	<key><![CDATA[command: The command that the command minecart will run when activated.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4166</id>
	<key><![CDATA[radiusonuse: The distance the radius will change when the effects are applied.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4167</id>
	<key><![CDATA[explosionradius: The radius of the Creeper's explosion.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4168</id>
	<key><![CDATA[base: If the EnderCrystal base is showing or not.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4169</id>
	<key><![CDATA[HORSE]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4170</id>
	<key><![CDATA[duration: The duration of the cloud in ticks.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4171</id>
	<key><![CDATA[ARMOR_STAND]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4172</id>
	<key><![CDATA[PARROT]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4173</id>
	<key><![CDATA[LIGHTNING]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4174</id>
	<key><![CDATA[EVOKER_FANGS]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4175</id>
	<key><![CDATA[sitting: Whether or not the fox is sitting.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4176</id>
	<key><![CDATA[FOX]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4177</id>
	<key><![CDATA[color: The llama's color (can be CREAMY, WHITE, BROWN, or GRAY).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4178</id>
	<key><![CDATA[ZOMBIE, HUSK, ZOMBIE_VILLAGER, DROWNED]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4179</id>
	<key><![CDATA[LLAMA, TRADER_LLAMA]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4180</id>
	<key><![CDATA[SPECTRAL_ARROW]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4181</id>
	<key><![CDATA[type: The type of the parrot (can be RED, BLUE, GREEN, CYAN, or GRAY).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4182</id>
	<key><![CDATA[small: Whether or not the ArmorStand is scaled to child-size. Defaults to false.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4183</id>
	<key><![CDATA[source: The source of the primed TNT. Not editable.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4184</id>
	<key><![CDATA[CAT]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4185</id>
	<key><![CDATA[maxfuseticks: The max amount of time in server ticks that the Creeper can be primed before exploding.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4186</id>
	<key><![CDATA[RABBIT]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4187</id>
	<key><![CDATA[item: The item in the frame.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4188</id>
	<key><![CDATA[jump: The jump strength (between 1.0 and 2.0).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4189</id>
	<key><![CDATA[type: The type of fox. (can be RED or SNOW)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4190</id>
	<key><![CDATA[armor: An item pertaining to the armor a horse has put on.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4191</id>
	<key><![CDATA[potionmeta: An array of potion effect arrays for the cloud.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4192</id>
	<key><![CDATA[potionmeta: An associative array with a "base" potion array and a "potions" array of effect arrays for a tipped arrow.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4193</id>
	<key><![CDATA[ENDER_CRYSTAL]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4194</id>
	<key><![CDATA[type: The type of the ocelot (can be BLACK_CAT, RED_CAT, SIAMESE_CAT, or WILD_OCELOT). (1.13 only)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4195</id>
	<key><![CDATA[TROPICAL_FISH]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4196</id>
	<key><![CDATA[color: The color array of the particle.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4197</id>
	<key><![CDATA[glowingticks: The number of ticks the hit entity will glow. (int)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4198</id>
	<key><![CDATA[profession: The profession of the villager (can be BUTCHER, FARMER, LIBRARIAN, NITWIT, ARMORER, CARTOGRAPHER, CLERIC, FISHERMAN, FLETCHER, LEATHERWORKER, MASON, NONE, SHEPHERD, TOOLSMITH, or WEAPONSMITH). This list differs in 1.14 from 1.13.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4199</id>
	<key><![CDATA[poses: An array where the keys are body parts, and the values are 3D vector arrays. Each component of those arrays is the angle (in radians) of the rotation of that body part around the corresponding axis, relative to the default position (where all angles are 0). Setting these values uses an update method, where only values specified will be changed. This allows you to rotate a single body part around a single axis without knowing the rotations on the other axis or of other body parts beforehand.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4200</id>
	<key><![CDATA[MUSHROOM_COW]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4201</id>
	<key><![CDATA[type: Which tree species the boat is composed of. (can be ACACIA, BIRCH, DARK_OAK, JUNGLE, OAK, or SPRUCE)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4202</id>
	<key><![CDATA[color: The horse's color (can be BLACK, BROWN, CHESTNUT, CREAMY, DARK_BROWN, GRAY, or WHITE).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4203</id>
	<key><![CDATA[itemstack: An array representing the item.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4204</id>
	<key><![CDATA[WITHER_SKULL]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4205</id>
	<key><![CDATA[type: The type of mushroom cow. (can be RED or BROWN).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4206</id>
	<key><![CDATA[color: The collar color of the wolf (can be WHITE, ORANGE, MAGENTA, LIGHT_BLUE, YELLOW, LIME, PINK, GRAY, LIGHT_GRAY, CYAN, PURPLE, BLUE, BROWN, GREEN, RED, or BLACK).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4207</id>
	<key><![CDATA[baby: Whether the pig zombie is a baby.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4208</id>
	<key><![CDATA[FALLING_BLOCK]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4209</id>
	<key><![CDATA[sheared: Whether the sheep is sheared.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4210</id>
	<key><![CDATA[target: The target location array that the EnderEye will travel towards.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4211</id>
	<key><![CDATA[baby: Whether the zombie is a baby.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4212</id>
	<key><![CDATA[color: The color of the sheep (can be WHITE, ORANGE, MAGENTA, LIGHT_BLUE, YELLOW, LIME, PINK, GRAY, LIGHT_GRAY, CYAN, PURPLE, BLUE, BROWN, GREEN, RED, or BLACK).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4213</id>
	<key><![CDATA[baby: Whether the husk is a baby.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4214</id>
	<key><![CDATA[source: The UUID of the living entity, usually an Evoker, that is the source of the fangs. Can be %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4215</id>
	<key><![CDATA[maxdomestication: The maximum domestication level of the horse.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4216</id>
	<key><![CDATA[sitting: Whether or not the cat is sitting.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4217</id>
	<key><![CDATA[type: The type of the cat. (can be ALL_BLACK, BLACK, BRITISH_SHORTHAIR, CALICO, JELLIE, PERSIAN, RAGDOLL, RED, SIAMESE, TABBY, or WHITE)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4218</id>
	<key><![CDATA[A stationary entity]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4219</id>
	<key><![CDATA[Returns an entity's motion vector represented as an associative array with the the keys x, y, and z. As a convenience, the magnitude is also included.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4220</id>
	<key><![CDATA[Not equivalent]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4221</id>
	<key><![CDATA[Executes arbitrary MethodScript. Note that this function is very experimental, and is subject to changing or removal. To globally disable use of eval, set the runtime setting "function.eval.disable" to true, which will cause use of the function to throw an exception.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4222</id>
	<key><![CDATA[[[%s|Learning Trail: Closures]], %s,]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4223</id>
	<key><![CDATA[Executes the given closure. You can also send arguments to the closure, which it may or may not use, depending on the particular closure's definition. If the closure returns a value with return(), then that value will be returned with execute. Otherwise, %s is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4224</id>
	<key><![CDATA[[[%s|Learning Trail: Closures]],]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4225</id>
	<key><![CDATA[Executes the given closure in the context of a given player or ~console. A closure that runs player(), for instance, would return the specified player's name. The label argument sets the permission label that this closure will use. If %s is given, the current label will be used, like with execute().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4226</id>
	<key><![CDATA[Creates an explosion with a given size at a given location. Size defaults to size of a creeper (3), and %s uses the default. If safe is true, (defaults to false) the explosion won't hurt the surrounding blocks. If size is 0, and safe is true, you will still see the animation and hear the sound, but players won't be hurt, and neither will the blocks.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4227</id>
	<key><![CDATA[Array key usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4228</id>
	<key><![CDATA[Storage of references]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4229</id>
	<key><![CDATA[Default value usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4230</id>
	<key><![CDATA[Sometimes, when you need to calculate an advanced mathematical expression, it is messy to write out everything in terms of functions. This function will allow you to evaluate a mathematical expression as a string, using common mathematical notation. For example, (2 + 3) * 4 would return 20. Variables can also be included, and their values given as an associative array. expr('(x + y) * z', array(x: 2, y: 3, z: 4)) would be the same thing as the above example. This function requires WorldEdit in plugins, lib, or the server root in order to run.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4231</id>
	<key><![CDATA[Returns extension info for the extensions the system has loaded, or the given extension if extensionName is specified. Included data will be events, functions and version, keyed by the name of the extension (or __unidentified__ if it's an old-style extension).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4232</id>
	<key><![CDATA[[[%s|Learning Trail: Loops]], [[%s|Learning Trail: Array Iteration]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4233</id>
	<key><![CDATA[With continue. (See continue() for more examples)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4234</id>
	<key><![CDATA[With braces]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4235</id>
	<key><![CDATA[With a slice, counting down]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4236</id>
	<key><![CDATA[Using &quot;as&quot; keyword]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4237</id>
	<key><![CDATA[Walks through array, setting ivar equal to each element in the array, then running code. In addition, foreach(1..4, @i, code()) is also valid, setting @i to 1, 2, 3, 4 each time. The same syntax is valid as in an array slice. If key is set (it must be an ivariable) then the index of each iteration will be set to that. See the examples for a demonstration.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4238</id>
	<key><![CDATA[With a slice]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4239</id>
	<key><![CDATA[Using &quot;in&quot; keyword]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4240</id>
	<key><![CDATA[With else clause]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4241</id>
	<key><![CDATA[Basic functional usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4242</id>
	<key><![CDATA[Enhanced syntax may also be used in foreach, using the "in", "as" and "else" keywords. See the examples for examples of each structure. Using these keywords makes the structure of the foreach read much better. For instance, with foreach(@value in @array){ } the code very literally reads "for each value in array", making ascertaining the behavior of the loop easier. The "as" keyword reads less plainly, and so is not recommended for use, but is allowed. Note that the array and value are reversed with the "as" keyword. An "else" block may be used after the foreach, which will only run if the array provided is empty, that is, the loop code would never run. This provides a good way to provide "default" handling. Array modifications while iterating are supported, and are well defined. See [[%s|the page documenting array iterations]] for full details.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4243</id>
	<key><![CDATA[Using &quot;in&quot; keyword, with a key]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4244</id>
	<key><![CDATA[With array keys]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4245</id>
	<key><![CDATA[Empty array, so else block running]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4246</id>
	<key><![CDATA[Basic usage, with the else code not running]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4247</id>
	<key><![CDATA[Returns true if the function is known to MethodScript. This is a special function; it is resolved at compile time, and allows for conditional uses of functions that may or may not exist, such as functions that might or might not be loaded in an extension, or from different versions. This is useful for shared code in environments where an extension may or may not be available, or an older version of MethodScript. if(function_exists('my_extension_function')){ my_extension_function() } can then be used to selectively "bypass" the compiler restrictions that would normally cause a fatal compile error, since that function is missing. Therefore, you can wrap extension related code around extension specific blocks, and make that code portable to other installations that may not have the extension installed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4248</id>
	<key><![CDATA[Wrapping a block of code that uses extension functions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4249</id>
	<key><![CDATA[Gets the specified art at the given location. If the item at the specified location isn't a painting, an]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4250</id>
	<key><![CDATA[Will be one of the following: KEBAB, AZTEC, ALBAN, AZTEC2, BOMB, PLANT, WASTELAND, POOL, COURBET, SEA, SUNSET, CREEBET, WANDERER, GRAHAM, MATCH, BUST, STAGE, VOID, SKULL_AND_ROSES, WITHER, FIGHTERS, POINTER, PIGSCENE, BURNING_SKULL, SKELETON, DONKEY_KONG.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4251</id>
	<key><![CDATA[The value returned may be one of the following: BEACH, SAVANNA, MUSHROOM_FIELD_SHORE, SUNFLOWER_PLAINS, STONE_SHORE, FROZEN_OCEAN, BIRCH_FOREST, THE_VOID, DEEP_LUKEWARM_OCEAN, END_HIGHLANDS, DEEP_FROZEN_OCEAN, END_MIDLANDS, FLOWER_FOREST, ERODED_BADLANDS, END_BARRENS, SNOWY_TUNDRA, MODIFIED_WOODED_BADLANDS_PLATEAU, GRAVELLY_MOUNTAINS, SNOWY_TAIGA, TAIGA_MOUNTAINS, JUNGLE, GIANT_SPRUCE_TAIGA, OCEAN, ICE_SPIKES, SMALL_END_ISLANDS, BAMBOO_JUNGLE_HILLS, FROZEN_RIVER, THE_END, DARK_FOREST, MODIFIED_BADLANDS_PLATEAU, SWAMP_HILLS, COLD_OCEAN, MODIFIED_JUNGLE_EDGE, WOODED_MOUNTAINS, PLAINS, SNOWY_MOUNTAINS, MOUNTAINS, SAVANNA_PLATEAU, JUNGLE_EDGE, TALL_BIRCH_HILLS, GIANT_TREE_TAIGA, RIVER, BIRCH_FOREST_HILLS, WOODED_BADLANDS_PLATEAU, DESERT_LAKES, DARK_FOREST_HILLS, LUKEWARM_OCEAN, NETHER, BAMBOO_JUNGLE, TAIGA_HILLS, MODIFIED_JUNGLE, DEEP_COLD_OCEAN, GIANT_TREE_TAIGA_HILLS, BADLANDS, SHATTERED_SAVANNA_PLATEAU, DEEP_WARM_OCEAN, MUSHROOM_FIELDS, GIANT_SPRUCE_TAIGA_HILLS, SNOWY_TAIGA_HILLS, DEEP_OCEAN, BADLANDS_PLATEAU, TAIGA, WOODED_HILLS, MOUNTAIN_EDGE, SHATTERED_SAVANNA, DESERT, SNOWY_TAIGA_MOUNTAINS, SNOWY_BEACH, WARM_OCEAN, FOREST, JUNGLE_HILLS, TALL_BIRCH_FOREST, MODIFIED_GRAVELLY_MOUNTAINS, SWAMP, UNKNOWN, or DESERT_HILLS]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4252</id>
	<key><![CDATA[Returns the biome type of this block column. The location array's y value is ignored.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4253</id>
	<key><![CDATA[Gets the id of the block at the coordinates. The format of the return will be x:y where x is the id of the block, and y is the meta data for the block. All blocks will return in this format, but blocks that don't have meta data will return 0 in y (eg. air is "0:0"). If a world isn't provided in the location array or as an argument, the current player's world is used. (deprecated for get_block())]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4254</id>
	<key><![CDATA[Returns an associative array with various information about a block. If an index is specified, it will return a boolean.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4255</id>
	<key><![CDATA[The accuracy of these values will depend on the server implementation.%s %ssolid: If a block is solid (i.e. dirt or stone, as opposed to a torch or water)%s %sflammable: Indicates if a block can catch fire%s %stransparent: Indicates if light can pass through%s %soccluding: indicates If the block fully blocks vision%s %sburnable: Indicates if the block can burn away]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4256</id>
	<key><![CDATA[Returns the redstone power level that is supplied to this block [0-15]. If is_block_powered(locationArray, 'DIRECT_ONLY') returns true, a redstone dust placed at the given location would be powered the return value - 1.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4257</id>
	<key><![CDATA[Returns the contents of the system clipboard. Can only be used in cmdline mode. Flavor defaults to %s, and is currently unused. Only strings are currently supported. If a string version of the clipboard contents cannot be parsed, a FormatException is thrown. If the platform doesn't support clipboard operations, an UnsupportedOperationException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4258</id>
	<key><![CDATA[Returns the entity's health as a percentage of its maximum health. If the specified entity doesn't exist, or is not a LivingEntity, a format exception is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4259</id>
	<key><![CDATA[Returns the UUID of the given entity's rider, or %s if it doesn't have one. If there are multiple riders, only the first is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4260</id>
	<key><![CDATA[Returns an array of UUIDs for the given entity's riders.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4261</id>
	<key><![CDATA[Returns the UUID of the given entity's vehicle, or %s if none exists.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4262</id>
	<key><![CDATA[If all slots are requested, an associative array of item objects is returned, and if only one item is requested, just that single item object is returned. An item is an associative array with the following keys, name: the string id of the item, qty: The number of items in their inventory, meta: An array of item meta or %s if none exists (see %s for details).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4263</id>
	<key><![CDATA[Gets an array of the specified inventory. If the block or entity can't have an inventory, a FormatException is thrown. If the index is specified, only the slot given will be returned. The max index of the array in the array is different for different types of inventories. If there is no item at the slot specified, %s is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4264</id>
	<key><![CDATA[Returns the name of the inventory specified. If the block or entity can't have an inventory or a name, an IllegalArgumentException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4265</id>
	<key><![CDATA[Returns the max size of the inventory specified. If the block or entity can't have an inventory, a FormatException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4266</id>
	<key><![CDATA[Returns the inventory type at the location specified, or of the entity specified. If the entity or location specified is not capable of having an inventory, a FormatException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4267</id>
	<key><![CDATA[Note that not all valid inventory types may actually be returnable, due to lack of support in the server, but the valid return types are: BREWING, CHEST, CRAFTING, CREATIVE, DISPENSER, DROPPER, ENCHANTING, ENDER_CHEST, FURNACE, HOPPER, MERCHANT, PLAYER, WORKBENCH, ANVIL, BEACON, SHULKER_BOX, BARREL, BLAST_FURNACE, LECTERN, SMOKER, LOOM, CARTOGRAPHY, GRINDSTONE, STONECUTTER]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4268</id>
	<key><![CDATA[Returns an array of arrays of the enchantments and their levels on the given item. For example: array('sharpness': 1, 'unbreaking': 3).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4269</id>
	<key><![CDATA[Returns an associative array of known ItemMeta for the slot given, or %s if there isn't any. All items can have a display(name), lore, and/or enchants,  and more info will be available for the items that have it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4270</id>
	<key><![CDATA[Demonstrates a skull]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4271</id>
	<key><![CDATA[Demonstrates a custom banner]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4272</id>
	<key><![CDATA[Demonstrates a piece of leather armor]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4273</id>
	<key><![CDATA[Demonstrates a generic item without meta]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4274</id>
	<key><![CDATA[Demonstrates an EnchantedBook]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4275</id>
	<key><![CDATA[Demonstrates a written book]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4276</id>
	<key><![CDATA[Demonstrates a custom potion]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4277</id>
	<key><![CDATA[Returned keys: %sAll items - "display" (string), "lore" (array of strings), "enchants" (An associative array of enchantments with the vanilla name of enchantment as the key, and value being an enchantment array with the key "elevel" for the level of the enchantment), "model" (an int representing vanilla's CustomModelData for use with resource packs), "flags" (array). Possible flags: HIDE_ENCHANTS, HIDE_ATTRIBUTES, HIDE_UNBREAKABLE, HIDE_DESTROYS, HIDE_PLACED_ON or HIDE_POTION_EFFECTS%sDamageable: "damage" on the item (0 is undamaged; each item type has its own max durability), "unbreakable" (boolean) and "repair" (int, repair cost)%sBooks - "title" (string), author (string), "pages" (array of strings)%sEnchantedBooks - "stored" (associative array of enchantments (see Example))%sLeather Armor - "color" (color array (see Example))%sPlayer Skulls - "owner" (string)%sPotions - "potions" (array of custom potion effects (see get_peffect()), "base" (an array with the keys "type", "extended", and "upgraded")%sBanners - "patterns" (an array of pattern arrays, each with the keys "shape" and "color")%sShields - "basecolor" (string), and "patterns" like in Banners.%sFireworks - "firework" (array with strength (int), "effects" (array of effect arrays (see Example)))%sFirework Charges - "effect" (single Firework effect array)%sStorage Blocks - "inventory" (an array of item arrays)%sMob Spawners - "spawntype" (an entity type)%sFurnace - "burntime" (int), "cooktime" (int), and in "inventory" these keys can exist if an item exists in that slot: "result", "fuel", and "smelting".%sBrewing Stand - "brewtime" (int), "fuel" (int), and in "inventory" these keys can exist if an item exists in that slot: "fuel", "ingredient", "leftbottle", "middlebottle", and "rightbottle".%sTropical Fish Bucket - "fishcolor" (the base dye color of the fish), "fishpatterncolor" (the color of the pattern on the fish), and "fishpattern" (the pattern type on the fish).%sCrossbow - "projectiles" (an array of item arrays, only accepts arrows and fireworks).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4278</id>
	<key><![CDATA[Demonstrates a generic item with meta]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4279</id>
	<key><![CDATA[Demonstrates a custom firework]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4280</id>
	<key><![CDATA[Returns the UUID of the entity that is holding the given living entity's leash, or %s if it isn't being held.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4281</id>
	<key><![CDATA[Returns the name of the player that's display on the player list.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4282</id>
	<key><![CDATA[Gets an array of all currently loaded chunks for a world. The current player's world is used if one is not provided. The chunk objects are associative arrays with the keys: x, z, and world.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4283</id>
	<key><![CDATA[Attaches the name of the player running the function at the key &apos;aKey&apos; to the block at the given location, and outputs all values attached to the same block and at the same key.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4284</id>
	<key><![CDATA[Attaches the boolean value true at the key &apos;my.key&apos; to the entity whose the id is 1001, and outputs the value attached to the same entity and at the same key byMethodScript.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4285</id>
	<key><![CDATA[Attaches the string &apos;example&apos; at the key &apos;key&apos; to the player running the function, and outputs all values attached at the same key.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4286</id>
	<key><![CDATA[Attaches %s at the key &apos;key&apos; to the player named &apos;player&apos;, and outputs the value attached to the same player and at the same key byMethodScript.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4287</id>
	<key><![CDATA[Attaches an array at the key &apos;anotherKey&apos; to the world named &apos;world&apos;, and outputs all values attached to the same world and at the same key.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4288</id>
	<key><![CDATA[Returns the mob's age as an integer. Zero represents the point of adulthood. Throws an UnageableMobException if the mob is not a type that ages]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4289</id>
	<key><![CDATA[Basic use]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4290</id>
	<key><![CDATA[Returns an associative array showing the equipment this mob is wearing. This does not work on most "dumb" entities, only mobs (entities with AI).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4291</id>
	<key><![CDATA[Getting a mob&apos;s equipment]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4292</id>
	<key><![CDATA[Returns the owner's name, or %s if the mob is unowned.An UntameableMobException is thrown if mob isn't tameable to begin with.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4293</id>
	<key><![CDATA[Gets the mob's target if it has one, and returns the target's entityUUID. If there is no target, %s is returned instead. Not all mobs will have a returnable target.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4294</id>
	<key><![CDATA[Returns whether or not a mob's custom name is always visible. If this is true it will be as visible as player names, otherwise it will only be visible when near the mob.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4295</id>
	<key><![CDATA[Returns an array of arrays about the objectives on the given scoreboard, which defaults to 'main' if not given. If criteria is given, only objectives with that criteria will be returned. The arrays contain the keys name, displayname, slot, modifiable, and criteria.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4296</id>
	<key><![CDATA[Simple usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4297</id>
	<key><![CDATA[Returns an array of potion effects that are currently active on a given player. The array can contain potion effect objects, with the key defining the type of potion effect. The arrays contain the following fields: "id", "strength", "seconds" remaining, whether the effect is "ambient", whether "particles" are enabled, and whether the "icon" is shown to the player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4298</id>
	<key><![CDATA[Gets a player's fly speed. The speed will be between -1.0 and 1.0.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4299</id>
	<key><![CDATA[Simple example]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4300</id>
	<key><![CDATA[Example with procedures within procedures]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4301</id>
	<key><![CDATA[Returns the shooter of the given projectile, can be %s. If the shooter is an entity, that entity's ID will be return, but if it is a block, that block's location will be returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4302</id>
	<key><![CDATA[Returns the player's score for the given objective. A LengthException is thrown if the name is longer than 40 characters.Scoreboard defaults to 'main' if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4303</id>
	<key><![CDATA[Returns the id of the scoreboard a player is assigned to. If it is not already cached, it will be added using the player's name. Using this method, it should be possible to import scoreboards created by other plugins.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4304</id>
	<key><![CDATA[Returns a team array for this player, or %s if not in a team. Contains the keys name, displayname, color, prefix, suffix, size, options, and players.Scoreboard defaults to 'main' if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4305</id>
	<key><![CDATA[Gets a player's walk speed. The speed will be between -1.0 and 1.0.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4306</id>
	<key><![CDATA[Returns an array of the registered scoreboard ID's. The special scoreboard 'main' represents the server's main scoreboard which can be managed by the vanilla /scoreboard command.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4307</id>
	<key><![CDATA[Returns a copy of the underlying engine's environment object. This is only useful to embedded scripting engines that are attempting to call back into MethodScript. The object returned is a CResource.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4308</id>
	<key><![CDATA[Otherwise if value is not specified (or is -1), it returns an array of information with the following pieces of information in the specified index: %s0 - Server name; the name of the server in server.properties.%s1 - API version; The version of the plugin API this server is implementing.%s2 - Server version; The bare version string of the server implementation.%s3 - Allow flight; If true, Minecraft's inbuilt anti fly check is disabled.%s4 - Allow nether; is true, the Nether dimension is enabled%s5 - Allow end; if true, the End is enabled%s6 - World container; The path to the world container.%s7 - Max player limit; returns the player limit.%s8 - Operators; An array of operators on the server.%s9 - Plugins; An array of plugins loaded by the server.%s10 - Online Mode; If true, users are authenticated with Mojang before login%s11 - Server port; Get the game port that the server runs on%s12 - Server IP; Get the IP that the server runs on%s13 - Uptime; The number of milliseconds the server has been running%s14 - gcmax; The maximum amount of memory that the Java virtual machine will attempt to use, in bytes%s15 - gctotal; The total amount of memory in the Java virtual machine, in bytes%s16 - gcfree; The amount of free memory in the Java Virtual Machine, in bytes%s17 - MOTD; The message displayed on the server list.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4309</id>
	<key><![CDATA[Returns various information about server.If value is set, it should be an integer of one of the following indexes, and only that information for that index will be returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4310</id>
	<key><![CDATA[Given a location array, returns an array of 4 strings of the text in the sign at that location. If the location given isn't a sign, then a RangeException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4311</id>
	<key><![CDATA[Returns a location array for the specified world, or the current player's world if one is not specified.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4312</id>
	<key><![CDATA[[[%s|Learning Trail: Exceptions]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4313</id>
	<key><![CDATA[Returns an array of arrays about the teams on the given scoreboard, which defaults to 'main' if not given. The array keys are the team names, and each value is a team array containing the keys: name, displayname, prefix, suffix, size, color, options, and players.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4314</id>
	<key><![CDATA[Returns a stored value stored with store_value. If the key doesn't exist in storage, %s is returned. On a more detailed note: If the value stored in the persistence database is not actually a construct, then %s is also returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4315</id>
	<key><![CDATA[Returns all the values in a particular namespace as an associative array(key: value, key: value). Only full namespace matches are considered, so if the key 'users.data.username.hi' existed in the database, and you tried get_values('users.data.user'), nothing would be returned. The last segment in a key is also considered a namespace, so 'users.data.username.hi' would return a single value (in this case).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4316</id>
	<key><![CDATA[Getting values]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4317</id>
	<key><![CDATA[Returns an associative array of all information about the world's border. The keys are width, center, damagebuffer, damageamount, warningtime, warningdistance.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4318</id>
	<key><![CDATA[Returns the result of a greater than operation. Operator syntax is also supported: @a &gt; @b]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4319</id>
	<key><![CDATA[Returns the result of a greater than or equal to operation. Operator sytnax is also supported: @a &gt;= @b]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4320</id>
	<key><![CDATA[Using the built in permissions system, checks to see if the player has a particular permission. This is simply passed through to the permissions system. This function is only restricted if the player attempts to check another player's permissions. If run from the console or a CommandBlock, will always return true unless a value has been explicitly set for them.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4321</id>
	<key><![CDATA[Returns whether the world (defaults to player's world) has a storm.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4322</id>
	<key><![CDATA[Returns whether the world (defaults to player's world) has thunder.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4323</id>
	<key><![CDATA[Creates a heap dump file, and places it in the working directory, as "dump.hprof". This might throw a PluginInternalException if the heap dump tools aren't available in your JVM. Once dumped, the heap dump can be analyzed using tools such as jhat. More information about jhat can be found [%s here].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4324</id>
	<key><![CDATA[Clears out "session" cookies, that is cookies that weren't set with an expiration (which translates to 0 in an individual cookie).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4325</id>
	<key><![CDATA[If this is not %s, the file will be downloaded instead of returned, and saved to the specified location on disk. The contents are saved to disk as is, so the value of binary is not relevant, and is ignored. Note that this is currently only enabled from cmdline mode, but will be added in general at a later date. If this setting is set from non-cdmline mode, it is silently ignored.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4326</id>
	<key><![CDATA[{{Warning|text=There are a limited number of outgoing "slots" that can be used  at any given time. This method is meant for quick completing requests, not lengthy requests.}}]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4327</id>
	<key><![CDATA[boolean error - This bit is set to true if a 4xx or 5xx response code was received.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4328</id>
	<key><![CDATA[1%s&nbsp;&nbsp;&nbsp;%s&lpar;%s&apos;%s;%s, %s&lpar;%s@response%s&rpar;&lcub;%s2%s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;%s&lpar;%s@response%s&lsqb;%s&apos;body&apos;%s&rsqb;&rpar;;%s3%s&nbsp;&nbsp;&nbsp;&rcub;&rpar;;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4329</id>
	<key><![CDATA[downloadStrategy]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4330</id>
	<key><![CDATA[array headers - An associative array of arrays of the returned headers. Often times headers are not repeated, so @response['headers']['Server'][0] for instance will be acceptable. Headers are not usually needed for non-referencial purposes anyways.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4331</id>
	<key><![CDATA[download]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4332</id>
	<key><![CDATA[boolean httpOnly - If true, this cookie shouldn't be provided to clients. In practice, this isn't very useful however.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4333</id>
	<key><![CDATA[followRedirects]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4334</id>
	<key><![CDATA[If true, the system will automatically follow 3xx series redirect codes, and will then access the resulting page, instead of simply returning at that point. The default is true, because more often than not, you shouldn't care if a page redirects a few times first, and only want the resulting page.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4335</id>
	<key><![CDATA[If binary is false, then this is the character encoding to assume.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4336</id>
	<key><![CDATA[The settings can adjust the more complicated options needed to do more complex tasks, but for most basic needs, the usage is very straightforward. One thing you may more commonly find yourself needing is cookie support. Cookies are managed by default by the framework, though you must provide a "cookie jar" for it to use. The cookie is just an array which you give it, it can be empty at first, or you can add cookies manually, if you know exactly what you're doing. After a "session" you can either throw out all the cookies, or use http_clear_session_cookies on the cookie jar object, which will clear the appropriate cookies for you. You may keep as many separate cookie jars as you like, and each is considered a separate "session".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4337</id>
	<key><![CDATA[Getting headers from a website]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4338</id>
	<key><![CDATA[int responseText - The response text of the request, for instance "Not Found" for a 404]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4339</id>
	<key><![CDATA[string value - The value of this cookie]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4340</id>
	<key><![CDATA[string body - The string body content of the response. This is usually the only thing of interest in the response. This will not be present if binary was true.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4341</id>
	<key><![CDATA[Sending some json to the server]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4342</id>
	<key><![CDATA[textEncoding]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4343</id>
	<key><![CDATA[Using a cookie jar]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4344</id>
	<key><![CDATA[method]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4345</id>
	<key><![CDATA[If value is %s, then the default JVM behavior is used. If trustStore is false, then no trust store will be used, and all certificates will be trusted when making https connections (NOTE: this is generally dangerous. Instead, you should use specific overrides, by providing an array). If the value is an array, it is assumed to be an array of fingerprints: hash mechanism, for instance: array('02 79 AB D6 97 19 A2 CB E8 79 11 B2 7F AF 8D': 'SHA-256'). The spaces in the fingerprint are optional. The JVM's trust store is used in addition to the provided fingerprints, so already valid certificates do not need to be listed here. If you wish to disable the JVM's store, and only use the provided certificates, then you can send exactly the key/value pair ('no default': 'no default') as a value inside of the array, and the default JVM certificates will be ignored. When providing fingerprints, only the highest security scheme should be provided (don't provide a SHA-1 fingerprint if a SHA-256 one is available). If multiple fingerprints for the same certificate are provided, then they will be resolved top to bottom. When using the default trust store, the certificate is first checked with the built in trust store, and then only if it fails is custom store checked. This prevents you from having to update your custom trust store if the certificate is later changed to a valid certificate. It is not required that you provide the leaf certificate. If a parent certificate is provided, then the whole certificate chain is considered trusted.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4346</id>
	<key><![CDATA[UTF-8]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4347</id>
	<key><![CDATA[FileWriteMode]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4348</id>
	<key><![CDATA[One of the following methods: POST, GET, HEAD, OPTIONS, PUT, DELETE, TRACE. If %s, it will use GET if there are no params, or POST if there are.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4349</id>
	<key><![CDATA[Automatically adds the default headers to this request, unless specifically overridden. Note that some headers simply cannot be overridden, for instance Host and User-Agent will ALWAYS be set. The default headers are:  {Accept=text/*, application/xhtml+xml, application/xml;q=0.9, */*;q=0.8, User-Agent=Java/1.8.0_222/MethodScript, Connection=close, Accept-Encoding=br, deflate, identity, gzip, DNT=1}]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4350</id>
	<key><![CDATA[params]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4351</id>
	<key><![CDATA[If true, a byte_array of the content is returned, instead of a string. If false, then the textEncoding parameter decides on the encoding format to use.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4352</id>
	<key><![CDATA[useDefaultHeaders]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4353</id>
	<key><![CDATA[string name - The name of this cookie]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4354</id>
	<key><![CDATA[Sets the username to use in response to basic HTTP authentication challenges.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4355</id>
	<key><![CDATA[success]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4356</id>
	<key><![CDATA[binary]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4357</id>
	<key><![CDATA[true]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4358</id>
	<key><![CDATA[trustStore]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4359</id>
	<key><![CDATA[A FormatException will be thrown by the function itself if the URL is malformed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4360</id>
	<key><![CDATA[int responseCode - The response code of the request, for instance 404 for pages that aren't found.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4361</id>
	<key><![CDATA[boolean or array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4362</id>
	<key><![CDATA[log]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4363</id>
	<key><![CDATA[Sets the timeout that the background thread will wait for before giving up. 0 means no timeout, though this isn't recommended, because this could cause future calls to http_request to fail, because there is a limited number of web requests that can be running concurrently.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4364</id>
	<key><![CDATA[Sets the password to use in response to basic HTTP authentication challenges.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4365</id>
	<key><![CDATA[error]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4366</id>
	<key><![CDATA[cookiejar]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4367</id>
	<key><![CDATA[string httpVersion - The HTTP version the server is using, for instance "1.1"]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4368</id>
	<key><![CDATA[string path - The path under which this cookie applies in the domain]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4369</id>
	<key><![CDATA[When initially writing code, it may be useful to get explicit debug information printed out. If this is set to true, then detailed debug information will be printed to console.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4370</id>
	<key><![CDATA[SAFE_WRITE]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4371</id>
	<key><![CDATA[An array of cookies. If the parameter is %s, then cookies will not be managed at all by this function, but if the array is empty (or already contains some cookies) then the cookies will be managed automatically. If you intend on using cookies, it is strongly recommended that you allow this system to automatically parse the cookies from the responses and set the cookies in the cookie jar, as there are many security flaws that can be introduced with a poor cookie manager implementation, and care has been taken to implement this correctly. Regardless, each cookie will be an array with the following fields set:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4372</id>
	<key><![CDATA[blocking]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4373</id>
	<key><![CDATA[byte_array data - The binary content of the response. This will only be present if binary was true.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4374</id>
	<key><![CDATA[An associative array of parameters to send. If the method is GET, they will be encoded into the URL, otherwise they will be part request body. If the URL and the params include the same parameter, the result is undefined. Regardless, the parameters will be encoded properly when passed in as part of the params object, so it is recommended to use this always, especially if dealing with user input or other possibly unescaped content. The subtype of the array may be any primitive or an array of primitives. Sub arrays are encoded properly. If params is a string, it is assumed to be raw body data, and added literally to the request body, as is. If the parameter is a byte_array, that is also encoded exactly as is. The Content-Type header is not set for you if this occurs, and will likely need to be set manually. The HTTP/1.1 specification specifically notes that servers should ignore the request body for certain methods (i.e. GET), but in practice, many servers expect this, and so while it is against the standard, this method still allows it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4375</id>
	<key><![CDATA[headers]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4376</id>
	<key><![CDATA[If download is set, then this is the download strategy that will be used. OVERWRITE, APPEND, or SAFE_WRITE.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4377</id>
	<key><![CDATA[If the second parameter is a closure, it works the same as giving the closure to the success parameter in the settings object. The settings object is an array with the following fields, all of which are optional aside from the complete member.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4378</id>
	<key><![CDATA[Note that it is considered a success even if the request results in a non 200 response, the error handler is only called if the connection fails entirely, and no response could be retrieved from the server.  To check if the HTTP response is a considered an error response, you can check the error bit, or check the responseCode yourself.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4379</id>
	<key><![CDATA[required parameter]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4380</id>
	<key><![CDATA[Makes an HTTP request to the given url.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4381</id>
	<key><![CDATA[Sets the headers for the HTTP request. Depending on if useDefaultHeaders is true or not, certain headers may be set for you already. The array should be an associative array. The keys of course will be strings, but the value may either be a string or an array of strings. If the value is an array of strings, it will be parsed appropriately. If a cookiejar is supplied, then the cookies will be automatically set in the headers, regardless of the value of the useDefaultHeaders setting.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4382</id>
	<key><![CDATA[This is the only required parameter. When the request finishes on the background thread, it the resulting HTTP response is returned to this closure. The closure should accept 1 parameter, which will be the HTTP response object, which contains the following fields:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4383</id>
	<key><![CDATA[If the request fails for whatever reason, this receives the exception generated. By default, the exception is logged using the default uncaught exception handler.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4384</id>
	<key><![CDATA[The most basic usage is to get the html of the google homepage, not worrying about cookies or anything complicated. That code is very straightforward:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4385</id>
	<key><![CDATA[string domain - The domain under which this cookie applies]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4386</id>
	<key><![CDATA[int expiration - When the cookie expires. 0 means it never expires, because it is a session cookie. The function will not send expired cookies, and will remove them from the cookie jar automatically. Session cookies cannot technically expire, and must be removed manually by you, if you are storing cookies for a long period of time.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4387</id>
	<key><![CDATA[If this is true, the method will block until it is complete, and it also won't use the internal thread pool.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4388</id>
	<key><![CDATA[boolean secureOnly - If true, this cookie only applies in https, not http.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4389</id>
	<key><![CDATA[Values may not be negative]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4390</id>
	<key><![CDATA[Standard usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4391</id>
	<key><![CDATA[Returns a scope isolated closure on the provided code. An iclosure is a datatype that represents some code as code, not the results of some code after it is run. Code placed in an iclosure can be used as a string, or executed by other functions using the execute() function. If a closure is "to string'd" it will not necessarily look like the original code, but will be functionally equivalent. The current environment is "snapshotted" and stored with the closure, however, this information is only stored in memory, it isn't retained during a serialization operation. However, the variable table of the parent scope is not retained, thus making this closure "isolated" from the parent code. The special variable @arguments is automatically created for you, and contains an array of all the arguments passed to the closure, much like procedures. See the wiki article on [[%s|closures]] for more details and examples.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4392</id>
	<key><![CDATA[Shows scoping]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4393</id>
	<key><![CDATA[Creates an iclosure]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4394</id>
	<key><![CDATA[Executes an iclosure]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4395</id>
	<key><![CDATA[With braces, false condition]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4396</id>
	<key><![CDATA[With braces, true condition]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4397</id>
	<key><![CDATA[Provides a more convenient method for running if/else chains. If none of the conditions are true, and there is no 'else' condition, %s is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4398</id>
	<key><![CDATA[With braces, with else if]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4399</id>
	<key><![CDATA[This function imports a value from the global value register. It looks for a value stored with the specified key (using the export function), and returns that value. If specified key doesn't exist, it will return either %s or the default value if specified. An array may be used as a key. It is converted into a string with the array values separated by dots. import() is threadsafe.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4400</id>
	<key><![CDATA[Returns an array, given an INI format input. INI files are loosely defined as a set of key->value pairs, which lends itself to an associative array format. Key value pairs are denoted usually by a %skey=value%s format. The specific rules for decoding an INI file can be found [%s here]. An associative array is returned. All values are stored as strings, so if 1 was stored, it will be returned as a string '1'. This is a limitation of the ini format, as it is expected that the code that reads the ini knows what the type of the data is anticipated, not the data itself. You can easily cast data that is expected to be numeric via the %s and %s functions when reading in the data if exact types are truly needed. INI doesn't easily support non-string values, if that is needed, consider using %s/%s instead.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4401</id>
	<key><![CDATA[Encodes an array into an INI format output. An associative array is expected, and a format exception is thrown if it is a normal array. The comment is optional, but if provided will be added to the header of the returned string. Inner arrays cannot be stored, and will throw a CastException if attempted. Nulls are encoded as an empty string, so when reading the value back in, the difference between '' and %s is lost. All values are stored as strings, so if 1 is stored, it will be returned as a string '1'. This is a limitation of the ini format, as it is expected that the code that reads the ini knows what the type of the data is anticipated, not the data itself.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4402</id>
	<key><![CDATA[Checks to see if the value is, extends, or implements the given type. Keyword usage is preferred: %s@value instanceof int%s. The opposite operation is %s@value notinstanceof int%s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4403</id>
	<key><![CDATA[Inverted usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4404</id>
	<key><![CDATA[Inverted functional usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4405</id>
	<key><![CDATA[Null is a special value, while any type may be assigned %s, it does not extend any type, and therefore "%s instanceof AnyType" will always return false. Likewise, other than %s, all values extend "mixed", and therefore "anyNonNullValue instanceof mixed" will always return true. There is no (single) functional equivalent to the notinstanceof keyword. %s@value notinstanceof int%s simply compiles to not(instanceof(@value, int)).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4406</id>
	<key><![CDATA[True condition]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4407</id>
	<key><![CDATA[False condition]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4408</id>
	<key><![CDATA[Returns whether or not a block is being supplied with power.checkMode can be: "BOTH" (Check both direct and indirect power), "DIRECT_ONLY" (Check direct power only) or "INDIRECT_ONLY" (Check indirect power only). CheckMode defaults to "BOTH".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4409</id>
	<key><![CDATA[Returns true if the numeric value represented by  a given double or numeric string could be cast to an integer without losing data (or if it's an integer). For instance, is_numeric(4.5) would return true, and integer(4.5) would work, however, equals(4.5, integer(4.5)) returns false, because the value was narrowed to 4.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4410</id>
	<key><![CDATA[True condition, because %s is coerced to 0, which is integral]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4411</id>
	<key><![CDATA[Returns whether or not a call to modify_event() would fail, based on the parameter being locked by a higher priority handler. If this returns false, it is still not a guarantee that the event would be successfully modified, just that it isn't locked.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4412</id>
	<key><![CDATA[is_]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4413</id>
	<key><![CDATA[True condition, because %s is coerced to 0.0, which is numeric.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4414</id>
	<key><![CDATA[Returns whether or not the given procName is currently defined, i.e. if calling this proc wouldn't throw an exception.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4415</id>
	<key><![CDATA[Returns if the chunk is a slime spawning chunk. The current player's world is used if one is not provided.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4416</id>
	<key><![CDATA[The "named colors" can be one of: WHITE, SILVER, GRAY, BLACK, RED, MAROON, YELLOW, OLIVE, LIME, GREEN, AQUA, TEAL, BLUE, NAVY, FUCHSIA, PURPLE or ORANGE]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4417</id>
	<key><![CDATA[flicker   A boolean, determining if the firework will flicker   false]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4418</id>
	<key><![CDATA[type   An enum value of one of the firework types, one of: BALL, BALL_LARGE, STAR, BURST or CREEPER   BALL]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4419</id>
	<key><![CDATA[colors   An array of colors, or a pipe separated string of color names for instance: array('WHITE') or 'WHITE%s|%sBLUE'. If you want custom colors, you must use an array, though you can still use color names as an item in the array, for instance: array('ORANGE', array(30, 45, 150)). These colors are used as the primary colors.   'WHITE']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4420</id>
	<key><![CDATA[Launches a firework rocket. The location array specifies where it is launched from, and the options array is an associative array described below. All parameters in the array are optional, and default to the specified values if not set. The default options being set will make it look like a normal firework, with a white explosion. Returns the firework rocket entity's UUID.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4421</id>
	<key><![CDATA[trail   A boolean, determining if the firework will leave a trail   true]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4422</id>
	<key><![CDATA[strength   A number specifying how far up the firework should go   2]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4423</id>
	<key><![CDATA[The options array may have the following keys:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4424</id>
	<key><![CDATA[fade   An array of colors to be used as the fade colors. This parameter should be formatted the same as the colors parameter   array()]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4425</id>
	<key><![CDATA[Strings]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4426</id>
	<key><![CDATA[Arrays]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4427</id>
	<key><![CDATA[Returns the levenshtein distance of two character sequences. For instance, "123" and "133" would have a string distance of 1, while "123" and "123" would be 0, since they are the same string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4428</id>
	<key><![CDATA[Loads a chunk for a world using the x and z coordinates. The current player's world is used if one isn't provided.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4429</id>
	<key><![CDATA[Using a direction to get the block 2 meters above the player&apos;s targeted block.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4430</id>
	<key><![CDATA[If a target location is specified, the vector is gotten from that. (the target's world is ignored) If a direction is specified, that vector is use instead. Distance defaults to 1.0. Direction can be one of NORTH, EAST, SOUTH, WEST, UP, DOWN, NORTH_EAST, NORTH_WEST, SOUTH_EAST, SOUTH_WEST, WEST_NORTH_WEST, NORTH_NORTH_WEST, NORTH_NORTH_EAST, EAST_NORTH_EAST, EAST_SOUTH_EAST, SOUTH_SOUTH_EAST, SOUTH_SOUTH_WEST, WEST_SOUTH_WEST, or SELF.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4431</id>
	<key><![CDATA[Using a target location to teleport the player towards it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4432</id>
	<key><![CDATA[Returns a location array that is the specified distance from the origin location along a vector.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4433</id>
	<key><![CDATA[log base n]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4434</id>
	<key><![CDATA[Error condition]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4435</id>
	<key><![CDATA[log base e (mathematical equivalent of ln)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4436</id>
	<key><![CDATA[log base 10]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4437</id>
	<key><![CDATA[Returns an array of files in the current working directory, including "hidden" files, orif directory is specified, the files in that directory. This is only available in cmdline mode.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4438</id>
	<key><![CDATA[Example 12]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4439</id>
	<key><![CDATA[Other formatting: float with precision (with rounding)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4440</id>
	<key><![CDATA[Example 17]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4441</id>
	<key><![CDATA[Example 16]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4442</id>
	<key><![CDATA[Example 15]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4443</id>
	<key><![CDATA[Literal percent sign]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4444</id>
	<key><![CDATA[Example 14]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4445</id>
	<key><![CDATA[Example 13]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4446</id>
	<key><![CDATA[Other formatting: boolean (with capitalization)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4447</id>
	<key><![CDATA[Other formatting: hash code]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4448</id>
	<key><![CDATA[Other formatting: float with precision (using integer)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4449</id>
	<key><![CDATA[Multiple arguments in an array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4450</id>
	<key><![CDATA[Other formatting: time]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4451</id>
	<key><![CDATA[Other formatting: scientific notation]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4452</id>
	<key><![CDATA[Multiple arguments]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4453</id>
	<key><![CDATA[Compile error, missing parameters]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4454</id>
	<key><![CDATA[Other formatting: float with precision in a different locale (with rounding)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4455</id>
	<key><![CDATA[Other formatting: character]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4456</id>
	<key><![CDATA[Returns a string formatted to the given formatString specification, using the parameters passed in. Locale should be a string in format, for instance, en_US, nl_NL, no_NO... Which locales are available depends on your system. Use %s to use the system's locale. The formatString should be formatted according to [%s this standard], with the caveat that the parameter types are automatically cast to the appropriate type, if possible. Calendar/time specifiers, (t and T) expect an integer which represents unix time, but are otherwise valid. All format specifiers in the documentation are valid.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4457</id>
	<key><![CDATA[Other formatting: character (with capitalization)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4458</id>
	<key><![CDATA[Hexidecimal formatting]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4459</id>
	<key><![CDATA[Other formatting: plain string]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4460</id>
	<key><![CDATA[Other formatting: boolean]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4461</id>
	<key><![CDATA[Returns the results of a less than operation. Operator syntax is also supported: @a &lt; @b]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4462</id>
	<key><![CDATA[Returns the result of a less than or equal to operation. Operator syntax is also supported: @a &lt;= @b]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4463</id>
	<key><![CDATA[Single element]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4464</id>
	<key><![CDATA[Multiple elements]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4465</id>
	<key><![CDATA[Sets up a marquee, which will automatically split up a given string for you, and call the callback. The split string will automatically wrap, handle buffering spaces, and scroll through the text.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4466</id>
	<key><![CDATA[marqueeName is optional, but required if you wish to stop the marquee at any point. text is the text that the marquee should scroll, stringWidth is the width of the string you wish to recieve, delayTime is the time between character scrolls, and callback is a closure that should recieve a string which will be exactly stringWidth long. (The string will have been wrapped as needed if it is less than that size.) This is usually used in combination with signs, but in theory could be used with anything that uses text.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4467</id>
	<key><![CDATA[A representation of negative infinity, per the IEEE 754 standard]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4468</id>
	<key><![CDATA[SHORT_MIN]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4469</id>
	<key><![CDATA[Returns the value of various math constants. The constant argument must be one of the following: NaN, NEGATIVE_INFINITY, INFINITY, DOUBLE_MAX, DOUBLE_MIN, LONG_MAX, LONG_MIN, SHORT_MAX, SHORT_MIN, INTEGER_MAX, INTEGER_MIN, FLOAT_MAX, FLOAT_MIN, BYTE_MAX, BYTE_MIN, E, PI, PHI, C, or EULER]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4470</id>
	<key><![CDATA[The higest number that can be represented as a byte]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4471</id>
	<key><![CDATA[The higest number that can be represented as a double]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4472</id>
	<key><![CDATA[FLOAT_MAX]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4473</id>
	<key><![CDATA[NEGATIVE_INFINITY]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4474</id>
	<key><![CDATA[INTEGER_MIN]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4475</id>
	<key><![CDATA[The value of π (pi)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4476</id>
	<key><![CDATA[LONG_MAX]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4477</id>
	<key><![CDATA[The lowest number that can be represented as a long]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4478</id>
	<key><![CDATA[BYTE_MIN]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4479</id>
	<key><![CDATA[The lowest number that can be represented as an integer]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4480</id>
	<key><![CDATA[The lowest number that can be represented as a byte]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4481</id>
	<key><![CDATA[The mathematical constant e, also known as Euler's number (not to be confused with the Euler-Mascheroni constant)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4482</id>
	<key><![CDATA[INTEGER_MAX]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4483</id>
	<key><![CDATA[SHORT_MAX]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4484</id>
	<key><![CDATA[The golden ratio]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4485</id>
	<key><![CDATA[DOUBLE_MIN]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4486</id>
	<key><![CDATA[Note that this function is optimized, and when given a constant value for the parameter, is resolved at compile time.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4487</id>
	<key><![CDATA[The higest number that can be represented as a short]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4488</id>
	<key><![CDATA[2.99792458E8]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4489</id>
	<key><![CDATA[EULER]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4490</id>
	<key><![CDATA[DOUBLE_MAX]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4491</id>
	<key><![CDATA[-Infinity]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4492</id>
	<key><![CDATA[1.7976931348623157E308]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4493</id>
	<key><![CDATA[C]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4494</id>
	<key><![CDATA[E]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4495</id>
	<key><![CDATA[The higest number that can be represented as a integer]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4496</id>
	<key><![CDATA[The lowest number that can be represented as a short]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4497</id>
	<key><![CDATA[1.4E-45]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4498</id>
	<key><![CDATA[4.9E-324]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4499</id>
	<key><![CDATA[PHI]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4500</id>
	<key><![CDATA[INFINITY]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4501</id>
	<key><![CDATA[The lowest number that can be represented as a float]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4502</id>
	<key><![CDATA[NaN]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4503</id>
	<key><![CDATA[The higest number that can be represented as a float]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4504</id>
	<key><![CDATA[A representation of positive infinity, per the IEEE 754 standard]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4505</id>
	<key><![CDATA[A representation of an undefinied number (Not a Number), per the IEEE 754 standard]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4506</id>
	<key><![CDATA[Infinity]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4507</id>
	<key><![CDATA[The speed of light in a vacuum, in meters per second]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4508</id>
	<key><![CDATA[The higest number that can be represented as a long]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4509</id>
	<key><![CDATA[BYTE_MAX]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4510</id>
	<key><![CDATA[The following table lists the values, and a brief description of each:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4511</id>
	<key><![CDATA[PI]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4512</id>
	<key><![CDATA[The Euler-Mascheroni constant γ (not to be confused with e)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4513</id>
	<key><![CDATA[LONG_MIN]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4514</id>
	<key><![CDATA[FLOAT_MIN]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4515</id>
	<key><![CDATA[The lowest number that can be represented as a double]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4516</id>
	<key><![CDATA[3.4028235E38]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4517</id>
	<key><![CDATA[Three arguments]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4518</id>
	<key><![CDATA[With an even number of values]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4519</id>
	<key><![CDATA[unsorted n-modal set (n=3)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4520</id>
	<key><![CDATA[unique set]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4521</id>
	<key><![CDATA[n-modal set (n=3)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4522</id>
	<key><![CDATA[Bimodal set]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4523</id>
	<key><![CDATA[If an invalid parameter name is passed in, nothing will happen. If this function is called from outside an event handler, a BindException is thrown. Note that modifying the underlying event will NOT update the event object passed in to the event handler. The function returns whether or not the parameter was updated successfully. It could fail to modify the event if a higher priority handler has locked this parameter, or if updating the underlying event failed. If throwOnFailure is true, instead of returning false, it will throw a BindException. The default for throwOnFailure is false. If a monitor level handler even attempts to modify an event, an exception will be thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4524</id>
	<key><![CDATA[Modifies the underlying event object, if applicable. The documentation for each event will explain what parameters can be modified, and what their expected values are.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4525</id>
	<key><![CDATA[Basic usage with procs]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4526</id>
	<key><![CDATA[Cloning the value]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4527</id>
	<key><![CDATA[The underlying primitive value is used in all cases where a value can be inferred. In all other cases, you must convert the primitive to the desired type, e.g. double(@mutable_primitive). Mutable primitives work like an array as well, in some cases, but not others. In general, setting of the underlying values may be done with array_push(). Assigning a new value to the variable works the same as assigning a new value to any other value, it overwrites the value with the new type. Most array functions will work with the mutable primitive, however, they will return useless data, for instance, array_resize() will simply set the value to the default value shown. array_size() is an exception to this rule, it will not work, and will throw an exception. See the examples for more use cases. In general, this is meant as a convenience feature for values that are passed to closures or procs, but should be passed by reference. Cloning the mutable primitive with the array clone operation creates a distinct copy.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4528</id>
	<key><![CDATA[Creates a mutable primitive object, initially setting the value of the object to %s, or the specified value. The value must be a primitive value, and cannot be an array or object.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4529</id>
	<key><![CDATA[Basic usage with closure]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4530</id>
	<key><![CDATA[Returns the name of the item. For now, only works with variables. For instance, nameof(@var) returns the string "@var". This is useful for a%sing hardcoding of strings of items that are refactorable. This allows tools to properly refactor, without needing to manually update strings that contain the names of variables or other refactorable items. This is a meta function, and is fully resolved at compile time.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4531</id>
	<key><![CDATA[Returns true if the two values are NOT equal, or false otherwise. Equivalent to not(equals(val1, val2)). Operator syntax is also supported: @a != @b]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4532</id>
	<key><![CDATA[Returns the boolean value of a logical NOT for this argument. Operator syntax is also supported: !@var]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4533</id>
	<key><![CDATA[Operator syntax, using variable]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4534</id>
	<key><![CDATA[Returns the boolean value of a logical OR across all arguments. Uses lazy determination, so once an argument resolves to true, the function returns. Operator syntax is also supported: @a || @b]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4535</id>
	<key><![CDATA[c...]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4536</id>
	<key><![CDATA[Used internally by the compiler. You shouldn't use it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4537</id>
	<key><![CDATA[Demonstrates usage with extra spaces]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4538</id>
	<key><![CDATA[With the advanced mode (escapes are also supported with \, for instance \&apos;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4539</id>
	<key><![CDATA[Parses a date string, and returns an integer timestamp representing that time. This essentially works in reverse of %s. The dateFormat string is the same as simple_date, see the documentation for that function to see full details on that. The dateString is the actual date to be parsed. The dateFormat should be the equivalent format that was used to generate the dateString. In general, this function is fairly lenient, and will still try to parse a dateString that doesn't necessarily conform to the given format, but it shouldn't be relied on to work with malformed data. Various portions of the date may be left off, in which case the missing portions will be assumed, for instance, if the time is left off completely, it is assumed to be midnight, and if the minutes are left off,  it is assumed to be on the hour, if the date is left off, it is assumed to be today, etc.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4540</id>
	<key><![CDATA[Using the results of simple_date]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4541</id>
	<key><![CDATA[From hex string]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4542</id>
	<key><![CDATA[Converts a string representation of an integer to a real integer, given the value's radix (base). See %s for a more detailed explanation of number theory. Radix must be between 2 and 36, inclusive.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4543</id>
	<key><![CDATA[From binary string]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4544</id>
	<key><![CDATA[Returns whether or not this player is banned. This will work with offline players, but the name must be exact. At this time, this function only works with the vanilla ban system. If you use a third party ban system, you should instead run the command for that plugin instead.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4545</id>
	<key><![CDATA[NOTICE: This function accepts UUIDs in place of player names, however due to lack of API from Mojang, some server software is not able to correctly associate a UUID with a player if the player has not recently been online. As such, it may not always be possible to ban or whitelist a player by UUID. Servers known to have this problem are Bukkit and Spigot. Furthermore, although this API functions, due to the limitations of the vanilla ban/whitelist system, it is recommended to use a 3rd party system or write your own.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4546</id>
	<key><![CDATA[Gets the time left on the player's cooldown for the specified item type. This returns an integer representing the time in server ticks until any items of this material can be used again by this player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4547</id>
	<key><![CDATA[Demonstrates getting Notch&apos;s target while ignoring air, water, and lava]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4548</id>
	<key><![CDATA[Demonstrates looking above the skyline]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4549</id>
	<key><![CDATA[Demonstrates finding a non-air block]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4550</id>
	<key><![CDATA[Demonstrates getting your target while ignoring torches and bedrock]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4551</id>
	<key><![CDATA[Returns a location array with the coordinates of the block the player has highlighted in their crosshairs. If player is omitted, the current player is used. If the block is too far, a RangeException is thrown. An array of block types to be considered transparent can be supplied, otherwise only air will be considered transparent. Providing an empty array will cause air to be considered a potential target, allowing a way to get the block containing the player's head.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4552</id>
	<key><![CDATA[Gets the inventory for the specified player's enderchest, or the current player if none specified. If the index is specified, only the slot given will be returned. The index of the array in the array is 0 - 26, which corresponds to the slot in the enderchest inventory. If there is no item at the slot specified, %s is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4553</id>
	<key><![CDATA[With single number (50th percentile)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4554</id>
	<key><![CDATA[40th percentile of 1-10]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4555</id>
	<key><![CDATA[Gets or sets the direction the player is facing.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4556</id>
	<key><![CDATA[When using the first variation, expects an integer 0-3, which will set the direction the player faces using their existing pitch (up and down) but sets their yaw (left and right) to one of the cardinal directions, as follows: 0 - West, 1 - South, 2 - East, 3 - North, which corresponds to the directions given by F when viewed with F3. In the second variation, specific yaw and pitches can be provided. If the player is not specified, the current player is used. If just the player is specified, that player's yaw and pitch are returned as an array, or if no arguments are given, the current player's yaw and pitch are returned as an array. The function returns %s when setting the values. (Note that while this function looks like it has ambiguous arguments, players cannot be named numbers.) A note on numbers: The values returned by the getter will always be as such: pitch will always be a number between 90 and -90, with -90 being the player looking up, and 90 being the player looking down. Yaw will always be a number between 0 and 359.9~. When setting the facing, pitch must be a number between -90 and 90, and yaw may be any number. If the number given is not between 0 and 359.9~, it will be normalized first. 0 is dead west, 90 is north, etc.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4557</id>
	<key><![CDATA[Demonstrates a player that has played]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4558</id>
	<key><![CDATA[Demonstrates a player that has not played]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4559</id>
	<key><![CDATA[Returns the player's current food level.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4560</id>
	<key><![CDATA[Adds the specified item to a player's enderchest. Unlike set_penderchest(), this does not specify a slot. The items are distributed in the player's inventory, first filling up slots that have the same item type, up to the max stack size, then fills up empty slots, until either the entire inventory is filled or the entire amount has been given. If the player's enderchest is full, the number of items that were not added is returned, which will be less than or equal to the quantity provided. Otherwise, returns 0.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4561</id>
	<key><![CDATA[Gives a player the specified item. Unlike set_pinv(), this does not specify a slot. The qty is distributed in the player's inventory, first filling up slots that have the same item type, up to the max stack size, then fills up empty slots, until either the entire inventory is filled, or the entire amount has been given. If the player's inv is full, the number of items that were not added is returned, which will be less than or equal to the quantity provided. Otherwise, returns 0. This function will not touch the player's armor slots however.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4562</id>
	<key><![CDATA[Returns an array of the groups a player is in. If playerName is omitted, the current player is used. This relies on "group.groupname" permission nodes in your permissions plugin. Otherwise an extension is required to get the groups from the plugin.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4563</id>
	<key><![CDATA[Returns the quantity of the specified item that the player is carrying (including armor slots). This counts across all slots in inventory. Recall that 0 is false, and anything else is true, so this can be used to get the total, or just see if they have the item.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4564</id>
	<key><![CDATA[The item array also serves as a map for what to compare. If included in the array, the values for the keys "display", "lore" and  "enchants" from the meta array, will be compared to the items in the inventory. More keys may be added in the future.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4565</id>
	<key><![CDATA[Demonstrates item name and meta matching.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4566</id>
	<key><![CDATA[Demonstrates plain item matching.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4567</id>
	<key><![CDATA[Gets the player's health.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4568</id>
	<key><![CDATA[Returns the player's hunger level.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4569</id>
	<key><![CDATA[Returns various information about the player specified, or the current player if no argument was given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4570</id>
	<key><![CDATA[If value is set, it should be an integer of one of the following indexes, and only that information for that index will be returned. Otherwise if value is not specified (or is -1), it returns an array of values with the following pieces of information in the specified index:%s0 - Player's name; This will return the player's exact name, even if called with a partial match.%s1 - Player's location; a location array of the player's coordinates%s2 - Player's cursor; a location array of the block the player is looking at, or %s if no block is in sight.%s3 - Player's IP; Returns the IP address of this player.%s4 - Display name; The name that is typically used when displayed on screen.%s5 - Player's health; The current health of the player, which will be an int from 0-20.%s6 - Item in hand; The type of item in their main hand.%s7 - World name; Gets the name of the world this player is in.%s8 - Is Op; true or false if this player is an op.%s9 - Player groups; An array of the groups the player is in, by permission nodes.%s10 - The player's hostname (or IP if a hostname can't be found)%s11 - Is sneaking?%s12 - Host; The host the player connected to.%s13 - Player UUID; (deprecated for index 20, but exists for backwards compatibility.)%s14 - Is player in a vehicle? Returns true or false.%s15 - Held Slot; The slot number of the player's current hand.%s16 - Is sleeping?%s17 - Is blocking?%s18 - Is flying?%s19 - Is sprinting?%s20 - Player UUID; The unique identifier for this player's account as returned by puuid().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4571</id>
	<key><![CDATA[Gets the inventory information for the specified player, or the current  player if none specified. If the index is specified, only the slot given will be returned. The index of the array in the array is 0 - 35, 100 - 103, -106, which corresponds to the slot in the player's inventory. To access armor slots, you may also specify the index. (100 - 103). The quick bar is 0 - 8. If index is %s, the item in the player's hand is returned, regardless of what slot is selected. If index is -106, the player's off-hand item is returned. If there is no item at the slot specified, %s is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4572</id>
	<key><![CDATA[Opens a player's inventory, shown to the player specified's screen.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4573</id>
	<key><![CDATA[Returns the block location, entity UUID, or virtual id of the inventory the player is currently viewing. If the player is viewing their own inventory or no inventory, the player's UUID is returned. When the inventory is virtual but has no id, it will return %s. The returned value can be used in other inventory functions unless it is %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4574</id>
	<key><![CDATA[Given an item array, returns the slot numbers that the matching item has at least one item in.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4575</id>
	<key><![CDATA[Demonstrates item quantity matching.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4576</id>
	<key><![CDATA[Kicks the specified player with an optional message. If no message is specified, "You have been kicked" is used. If no player is specified, the current player is used with the default message.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4577</id>
	<key><![CDATA[Plays the given visual effect on the entity. Non-applicable effects simply won't happen. Note: the death effect makes the mob invisible to players and immune to melee attacks. When used on players, they are shown the respawn menu, but because they are not actually dead, they can only log out. Possible effects are: ARROW_PARTICLES, RABBIT_JUMP, DEATH, HURT, SHEEP_EAT, WOLF_HEARTS, WOLF_SHAKE, WOLF_SMOKE, IRON_GOLEM_ROSE, VILLAGER_HEART, VILLAGER_ANGRY, VILLAGER_HAPPY, WITCH_MAGIC, ZOMBIE_TRANSFORM, FIREWORK_EXPLODE, LOVE_HEARTS, SQUID_ROTATE, ENTITY_POOF, GUARDIAN_TARGET, SHIELD_BLOCK, SHIELD_BREAK, ARMOR_STAND_HIT, THORNS_HURT, IRON_GOLEM_SHEATH, TOTEM_RESURRECT, HURT_DROWN, or HURT_EXPLOSION]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4578</id>
	<key><![CDATA[Possible categories: MASTER, MUSIC, RECORDS, WEATHER, BLOCKS, HOSTILE, NEUTRAL, PLAYERS, AMBIENT, or VOICE.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4579</id>
	<key><![CDATA[Plays a sound at the given location. SoundArray is in an associative array with keys 'sound', 'category', 'volume', 'pitch', where all are optional except sound. Volume, if greater than 1.0 (default), is the distance in chunks players can hear the sound. Pitch has a range of 0.5 - 2.0, where where 1.0 is the middle pitch and default. Players can be a single player or an array of players to play the sound to, if not given, all players can potentially hear it. Sound is a sound path, separated by periods.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4580</id>
	<key><![CDATA[Plays a note for the given player, at the given note block location. Player defaults to the current player, and location defaults to the player's location. Instrument may be one of: PIANO, BASS_DRUM, SNARE_DRUM, STICKS, BASS_GUITAR, FLUTE, BELL, GUITAR, CHIME, XYLOPHONE, IRON_XYLOPHONE, COW_BELL, DIDGERIDOO, BIT, BANJO, or PLING, and note is an associative array with 2 values, array(octave: 0, tone: 'F#') where octave is either 0, 1, or 2, and tone is one of the notes G, A, B, C, D, E, or F, optionally suffixed with a pound symbol, which denotes a sharp. (Not all notes can be sharped.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4581</id>
	<key><![CDATA[Plays a sound at the given location. SoundArray is in an associative array with keys 'sound', 'category', 'volume', 'pitch', where all are optional except sound. Volume, if greater than 1.0 (default), is the distance in chunks players can hear the sound. Pitch has a range of 0.5 - 2.0, where where 1.0 is the middle pitch and default. Players can be a single player or an array of players to play the sound to, if not given, all players can potentially hear it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4582</id>
	<key><![CDATA[Possible sounds: ENTITY_FOX_HURT%sENTITY_SPIDER_STEP%sENTITY_IRON_GOLEM_STEP%sBLOCK_WOODEN_TRAPDOOR_CLOSE%sBLOCK_DISPENSER_LAUNCH%sENTITY_SALMON_DEATH%sBLOCK_GLASS_STEP%sENTITY_ZOMBIE_VILLAGER_STEP%sAMBIENT_UNDERWATER_ENTER%sENTITY_PANDA_EAT%sENTITY_RAVAGER_HURT%sENTITY_VILLAGER_WORK_BUTCHER%sBLOCK_LADDER_HIT%sENCHANT_THORNS_HIT%sENTITY_DROWNED_SHOOT%sENTITY_ITEM_FRAME_ADD_ITEM%sENTITY_PARROT_IMITATE_MAGMA_CUBE%sITEM_TRIDENT_THUNDER%sENTITY_SILVERFISH_DEATH%sENTITY_FOX_AMBIENT%sENTITY_SPLASH_POTION_THROW%sENTITY_PANDA_HURT%sENTITY_FOX_SNIFF%sENTITY_TURTLE_DEATH_BABY%sENTITY_BLAZE_SHOOT%sITEM_BOTTLE_FILL%sENTITY_PARROT_DEATH%sBLOCK_BAMBOO_SAPLING_BREAK%sBLOCK_PUMPKIN_CARVE%sENTITY_VILLAGER_CELEBRATE%sMUSIC_DISC_STRAD%sBLOCK_METAL_PRESSURE_PLATE_CLICK_ON%sENTITY_GHAST_WARN%sITEM_ELYTRA_FLYING%sITEM_BUCKET_FILL_LAVA%sENTITY_GHAST_SCREAM%sENTITY_ILLUSIONER_CAST_SPELL%sENTITY_FOX_SLEEP%sENTITY_ENDER_PEARL_THROW%sENTITY_PUFFER_FISH_HURT%sENTITY_FIREWORK_ROCKET_LAUNCH%sBLOCK_SWEET_BERRY_BUSH_BREAK%sENTITY_PLAYER_SMALL_FALL%sENTITY_ILLUSIONER_MIRROR_MOVE%sENTITY_SLIME_DEATH%sENTITY_SPIDER_DEATH%sENTITY_SHULKER_BULLET_HURT%sENTITY_ENDER_DRAGON_SHOOT%sENTITY_PARROT_IMITATE_BLAZE%sBLOCK_GRASS_STEP%sENTITY_PARROT_IMITATE_SPIDER%sENTITY_ELDER_GUARDIAN_CURSE%sITEM_ARMOR_EQUIP_ELYTRA%sBLOCK_WET_GRASS_STEP%sENTITY_VEX_HURT%sENTITY_WITCH_HURT%sENTITY_WITHER_SKELETON_AMBIENT%sUI_BUTTON_CLICK%sENTITY_ZOMBIE_AMBIENT%sBLOCK_NOTE_BLOCK_BASS%sENTITY_CAT_AMBIENT%sBLOCK_NOTE_BLOCK_IRON_XYLOPHONE%sENTITY_CHICKEN_EGG%sENTITY_ZOMBIE_HORSE_HURT%sITEM_SWEET_BERRIES_PICK_FROM_BUSH%sBLOCK_CORAL_BLOCK_STEP%sENTITY_SKELETON_HORSE_GALLOP_WATER%sENTITY_PUFFER_FISH_AMBIENT%sENTITY_COD_AMBIENT%sITEM_TRIDENT_RIPTIDE_2%sENTITY_ITEM_PICKUP%sENTITY_LIGHTNING_BOLT_IMPACT%sITEM_TRIDENT_RIPTIDE_1%sBLOCK_SWEET_BERRY_BUSH_PLACE%sENTITY_ZOMBIE_VILLAGER_CURE%sITEM_TRIDENT_RIPTIDE_3%sBLOCK_CHORUS_FLOWER_DEATH%sENTITY_MULE_CHEST%sENTITY_TURTLE_EGG_HATCH%sENTITY_LLAMA_DEATH%sENTITY_PARROT_IMITATE_RAVAGER%sENTITY_ENDERMITE_AMBIENT%sBLOCK_LAVA_AMBIENT%sITEM_BOOK_PUT%sENTITY_PLAYER_ATTACK_NODAMAGE%sENTITY_VILLAGER_TRADE%sBLOCK_NOTE_BLOCK_FLUTE%sENTITY_DROWNED_AMBIENT%sBLOCK_BAMBOO_SAPLING_PLACE%sENTITY_SQUID_AMBIENT%sBLOCK_ANVIL_USE%sENTITY_HUSK_CONVERTED_TO_ZOMBIE%sENTITY_ENDER_DRAGON_DEATH%sENTITY_LLAMA_SPIT%sENTITY_SILVERFISH_AMBIENT%sENTITY_PARROT_FLY%sITEM_ARMOR_EQUIP_GENERIC%sENTITY_ENDER_DRAGON_FLAP%sENTITY_PUFFER_FISH_BLOW_UP%sENTITY_POLAR_BEAR_WARNING%sENTITY_MAGMA_CUBE_DEATH_SMALL%sENTITY_PARROT_IMITATE_ENDER_DRAGON%sENTITY_WITCH_DEATH%sBLOCK_WOODEN_DOOR_CLOSE%sENTITY_SKELETON_HORSE_AMBIENT%sBLOCK_SNOW_STEP%sENTITY_PHANTOM_AMBIENT%sENTITY_EXPERIENCE_ORB_PICKUP%sENTITY_WOLF_WHINE%sENTITY_ARROW_SHOOT%sBLOCK_SLIME_BLOCK_HIT%sENTITY_BLAZE_DEATH%sBLOCK_ANVIL_PLACE%sENTITY_MULE_AMBIENT%sENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER%sENTITY_PARROT_HURT%sENTITY_PIG_AMBIENT%sENTITY_FOX_BITE%sENTITY_GUARDIAN_HURT%sENTITY_WITHER_SKELETON_DEATH%sBLOCK_WOOD_PLACE%sBLOCK_SNOW_FALL%sENTITY_HORSE_STEP%sBLOCK_CORAL_BLOCK_BREAK%sAMBIENT_CAVE%sENTITY_HORSE_EAT%sENTITY_PARROT_IMITATE_SHULKER%sENTITY_ARMOR_STAND_FALL%sENTITY_ZOMBIE_VILLAGER_DEATH%sBLOCK_CONDUIT_AMBIENT_SHORT%sENTITY_SKELETON_HORSE_HURT%sENTITY_HORSE_AMBIENT%sENTITY_PIG_STEP%sUI_TOAST_OUT%sBLOCK_CORAL_BLOCK_HIT%sENTITY_SNOW_GOLEM_AMBIENT%sENTITY_MINECART_INSIDE%sENTITY_EVOKER_FANGS_ATTACK%sBLOCK_ENCHANTMENT_TABLE_USE%sENTITY_OCELOT_HURT%sITEM_CROSSBOW_HIT%sENTITY_SHULKER_CLOSE%sENTITY_PARROT_IMITATE_ENDERMITE%sITEM_CROSSBOW_LOADING_END%sUI_TOAST_IN%sBLOCK_GLASS_FALL%sENTITY_WOLF_AMBIENT%sENTITY_BAT_HURT%sENTITY_ARMOR_STAND_HIT%sITEM_BUCKET_EMPTY_FISH%sENTITY_WANDERING_TRADER_AMBIENT%sENTITY_SLIME_JUMP%sENTITY_CAT_HISS%sENTITY_LINGERING_POTION_THROW%sENTITY_ELDER_GUARDIAN_DEATH%sENTITY_DONKEY_HURT%sENTITY_LLAMA_EAT%sENTITY_FISH_SWIM%sENTITY_ILLUSIONER_HURT%sENTITY_WANDERING_TRADER_DRINK_MILK%sENTITY_EVOKER_PREPARE_WOLOLO%sENTITY_LLAMA_ANGRY%sENTITY_HOSTILE_SPLASH%sENTITY_DROWNED_HURT%sITEM_HOE_TILL%sENTITY_ELDER_GUARDIAN_FLOP%sBLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF%sENTITY_GHAST_HURT%sBLOCK_WET_GRASS_PLACE%sBLOCK_ANVIL_BREAK%sENTITY_ZOMBIE_DEATH%sENTITY_CAT_PURR%sENTITY_DONKEY_CHEST%sBLOCK_SCAFFOLDING_HIT%sENTITY_LLAMA_SWAG%sENTITY_PARROT_IMITATE_EVOKER%sENTITY_HORSE_SADDLE%sMUSIC_GAME%sENTITY_ITEM_FRAME_ROTATE_ITEM%sENTITY_GENERIC_DRINK%sENTITY_PANDA_DEATH%sBLOCK_WET_GRASS_FALL%sENTITY_PARROT_IMITATE_ILLUSIONER%sBLOCK_ANVIL_STEP%sENTITY_HUSK_HURT%sBLOCK_COMPOSTER_READY%sENTITY_WITHER_SKELETON_STEP%sBLOCK_CONDUIT_AMBIENT%sENTITY_MOOSHROOM_SHEAR%sBLOCK_WOOD_BREAK%sBLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE%sENTITY_VILLAGER_WORK_TOOLSMITH%sENTITY_GENERIC_EAT%sENTITY_BLAZE_HURT%sENTITY_SLIME_HURT%sBLOCK_GRASS_FALL%sBLOCK_NOTE_BLOCK_COW_BELL%sBLOCK_CORAL_BLOCK_PLACE%sENTITY_PHANTOM_SWOOP%sENTITY_WANDERING_TRADER_DRINK_POTION%sBLOCK_GLASS_HIT%sBLOCK_NOTE_BLOCK_CHIME%sENTITY_PARROT_IMITATE_PANDA%sENTITY_OCELOT_AMBIENT%sENTITY_WITCH_CELEBRATE%sENTITY_PARROT_EAT%sENTITY_CHICKEN_DEATH%sENTITY_MINECART_RIDING%sENTITY_COW_HURT%sBLOCK_NOTE_BLOCK_SNARE%sENTITY_DOLPHIN_HURT%sBLOCK_TRIPWIRE_CLICK_OFF%sENTITY_WITHER_DEATH%sENTITY_PLAYER_BIG_FALL%sENTITY_FISHING_BOBBER_THROW%sENTITY_POLAR_BEAR_AMBIENT_BABY%sBLOCK_WOODEN_TRAPDOOR_OPEN%sENTITY_DOLPHIN_SPLASH%sBLOCK_GLASS_BREAK%sENTITY_SKELETON_STEP%sENTITY_LIGHTNING_BOLT_THUNDER%sUI_LOOM_TAKE_RESULT%sENTITY_DOLPHIN_JUMP%sENTITY_GUARDIAN_DEATH_LAND%sENTITY_ENDERMAN_AMBIENT%sENTITY_ILLUSIONER_AMBIENT%sBLOCK_END_PORTAL_FRAME_FILL%sENTITY_FIREWORK_ROCKET_TWINKLE%sENTITY_GHAST_SHOOT%sENTITY_PUFFER_FISH_BLOW_OUT%sENTITY_SLIME_HURT_SMALL%sENTITY_STRAY_DEATH%sENTITY_ZOMBIE_VILLAGER_CONVERTED%sENTITY_PLAYER_HURT_SWEET_BERRY_BUSH%sENTITY_VINDICATOR_AMBIENT%sBLOCK_CROP_BREAK%sENTITY_DOLPHIN_DEATH%sBLOCK_METAL_STEP%sBLOCK_WOODEN_DOOR_OPEN%sENTITY_FISHING_BOBBER_SPLASH%sENTITY_COW_MILK%sENTITY_PLAYER_ATTACK_STRONG%sENTITY_CAT_EAT%sENTITY_SHULKER_SHOOT%sBLOCK_WOODEN_BUTTON_CLICK_ON%sENTITY_ZOMBIE_INFECT%sENTITY_HORSE_GALLOP%sBLOCK_ANVIL_FALL%sBLOCK_BAMBOO_BREAK%sUI_LOOM_SELECT_PATTERN%sENTITY_VILLAGER_AMBIENT%sENTITY_WITHER_SKELETON_HURT%sMUSIC_DISC_WAIT%sENTITY_ZOMBIE_PIGMAN_AMBIENT%sBLOCK_BAMBOO_FALL%sBLOCK_COMPOSTER_EMPTY%sENTITY_SNOWBALL_THROW%sENTITY_ENDERMAN_DEATH%sENTITY_VILLAGER_WORK_SHEPHERD%sENTITY_GUARDIAN_DEATH%sENTITY_SHEEP_AMBIENT%sENTITY_ILLUSIONER_PREPARE_BLINDNESS%sBLOCK_IRON_TRAPDOOR_OPEN%sENTITY_GHAST_DEATH%sENTITY_PLAYER_SPLASH_HIGH_SPEED%sENTITY_VILLAGER_WORK_LIBRARIAN%sENTITY_WANDERING_TRADER_DISAPPEARED%sBLOCK_LADDER_FALL%sENTITY_WOLF_PANT%sENTITY_SNOW_GOLEM_HURT%sENTITY_RAVAGER_STEP%sBLOCK_NOTE_BLOCK_BELL%sBLOCK_BAMBOO_PLACE%sBLOCK_CHEST_CLOSE%sENTITY_PANDA_PRE_SNEEZE%sBLOCK_METAL_FALL%sBLOCK_LADDER_PLACE%sENTITY_BOAT_PADDLE_WATER%sENTITY_ZOMBIE_ATTACK_WOODEN_DOOR%sENTITY_SKELETON_HORSE_JUMP_WATER%sBLOCK_WOOD_FALL%sAMBIENT_UNDERWATER_LOOP_ADDITIONS%sENTITY_FOX_SCREECH%sENTITY_VILLAGER_NO%sENTITY_PARROT_IMITATE_SKELETON%sENTITY_WANDERING_TRADER_REAPPEARED%sENTITY_VILLAGER_YES%sBLOCK_SAND_STEP%sENTITY_GENERIC_HURT%sENTITY_PIG_SADDLE%sBLOCK_ANVIL_HIT%sBLOCK_PORTAL_TRAVEL%sENTITY_RAVAGER_AMBIENT%sMUSIC_DISC_FAR%sBLOCK_CONDUIT_ACTIVATE%sENTITY_SHEEP_STEP%sENTITY_SHULKER_DEATH%sENTITY_VEX_DEATH%sENTITY_OCELOT_DEATH%sMUSIC_END%sENTITY_CAT_STRAY_AMBIENT%sENTITY_PARROT_IMITATE_STRAY%sBLOCK_SAND_HIT%sBLOCK_BEACON_POWER_SELECT%sENTITY_VILLAGER_WORK_MASON%sITEM_CHORUS_FRUIT_TELEPORT%sBLOCK_CONDUIT_ATTACK_TARGET%sENTITY_ELDER_GUARDIAN_AMBIENT_LAND%sENTITY_PARROT_IMITATE_PILLAGER%sBLOCK_FIRE_AMBIENT%sMUSIC_DISC_MELLOHI%sBLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE%sENTITY_RABBIT_HURT%sENTITY_RAVAGER_ROAR%sBLOCK_COMPARATOR_CLICK%sENTITY_PHANTOM_FLAP%sENTITY_SHEEP_SHEAR%sENTITY_SPLASH_POTION_BREAK%sENTITY_PLAYER_BURP%sITEM_TRIDENT_RETURN%sENTITY_GENERIC_DEATH%sENTITY_TROPICAL_FISH_FLOP%sBLOCK_METAL_BREAK%sENTITY_RAVAGER_STUNNED%sENTITY_DROWNED_SWIM%sITEM_SHIELD_BLOCK%sENTITY_MOOSHROOM_CONVERT%sENTITY_LLAMA_HURT%sENTITY_DOLPHIN_AMBIENT%sENTITY_PANDA_BITE%sENTITY_WANDERING_TRADER_TRADE%sENTITY_PLAYER_ATTACK_SWEEP%sENTITY_STRAY_HURT%sENTITY_HORSE_ARMOR%sENTITY_PUFFER_FISH_FLOP%sENTITY_WOLF_SHAKE%sITEM_ARMOR_EQUIP_CHAIN%sENTITY_MULE_DEATH%sBLOCK_BREWING_STAND_BREW%sENTITY_ENDERMITE_HURT%sBLOCK_TRIPWIRE_ATTACH%sENTITY_RABBIT_JUMP%sENTITY_SKELETON_DEATH%sENTITY_WOLF_GROWL%sBLOCK_BELL_USE%sBLOCK_NOTE_BLOCK_BIT%sENTITY_PARROT_IMITATE_VINDICATOR%sMUSIC_MENU%sENTITY_DONKEY_AMBIENT%sENTITY_DOLPHIN_EAT%sBLOCK_METAL_HIT%sBLOCK_SAND_FALL%sENTITY_ENDERMITE_DEATH%sENTITY_PILLAGER_CELEBRATE%sITEM_CROSSBOW_LOADING_START%sBLOCK_COMPOSTER_FILL_SUCCESS%sMUSIC_DISC_13%sMUSIC_DISC_WARD%sMUSIC_DISC_11%sENTITY_HORSE_HURT%sENTITY_SKELETON_HORSE_STEP_WATER%sENTITY_DROWNED_DEATH_WATER%sENTITY_EXPERIENCE_BOTTLE_THROW%sENTITY_ENDER_DRAGON_GROWL%sBLOCK_LAVA_POP%sENTITY_VILLAGER_WORK_WEAPONSMITH%sBLOCK_NOTE_BLOCK_GUITAR%sENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR%sBLOCK_PISTON_CONTRACT%sENTITY_SKELETON_HORSE_DEATH%sENTITY_ILLUSIONER_PREPARE_MIRROR%sITEM_TRIDENT_HIT_GROUND%sBLOCK_IRON_TRAPDOOR_CLOSE%sBLOCK_LEVER_CLICK%sENTITY_CHICKEN_HURT%sBLOCK_BAMBOO_STEP%sENTITY_PIG_HURT%sENTITY_WANDERING_TRADER_DEATH%sENTITY_BOAT_PADDLE_LAND%sENTITY_PLAYER_SWIM%sAMBIENT_UNDERWATER_EXIT%sENTITY_HOSTILE_DEATH%sWEATHER_RAIN%sBLOCK_CORAL_BLOCK_FALL%sENTITY_COW_DEATH%sENTITY_ZOMBIE_PIGMAN_DEATH%sBLOCK_ANVIL_DESTROY%sENTITY_PARROT_IMITATE_VEX%sBLOCK_FURNACE_FIRE_CRACKLE%sENTITY_ENDERMAN_SCREAM%sENTITY_HORSE_STEP_WOOD%sITEM_ARMOR_EQUIP_IRON%sBLOCK_LAVA_EXTINGUISH%sUI_CARTOGRAPHY_TABLE_TAKE_RESULT%sBLOCK_LADDER_BREAK%sENTITY_HORSE_JUMP%sITEM_ARMOR_EQUIP_DIAMOND%sENTITY_PANDA_AGGRESSIVE_AMBIENT%sENTITY_LEASH_KNOT_BREAK%sENTITY_SALMON_HURT%sBLOCK_REDSTONE_TORCH_BURNOUT%sENTITY_GENERIC_EXTINGUISH_FIRE%sENTITY_SHULKER_BULLET_HIT%sENTITY_WANDERING_TRADER_NO%sENTITY_SHULKER_TELEPORT%sENTITY_FIREWORK_ROCKET_BLAST_FAR%sENTITY_TROPICAL_FISH_HURT%sBLOCK_PORTAL_TRIGGER%sENTITY_ELDER_GUARDIAN_HURT_LAND%sBLOCK_CHEST_OPEN%sEVENT_RAID_HORN%sENTITY_FIREWORK_ROCKET_LARGE_BLAST%sBLOCK_WOOL_PLACE%sENTITY_CREEPER_HURT%sENTITY_ENDER_EYE_LAUNCH%sENTITY_TURTLE_SHAMBLE%sENTITY_WITHER_AMBIENT%sBLOCK_COMPOSTER_FILL%sENTITY_FOX_EAT%sITEM_FLINTANDSTEEL_USE%sBLOCK_ENDER_CHEST_CLOSE%sENTITY_LLAMA_CHEST%sENTITY_BLAZE_AMBIENT%sBLOCK_STONE_PRESSURE_PLATE_CLICK_OFF%sENTITY_STRAY_STEP%sENTITY_EVOKER_DEATH%sENTITY_MOOSHROOM_SUSPICIOUS_MILK%sENTITY_FOX_SPIT%sENTITY_VILLAGER_WORK_LEATHERWORKER%sMUSIC_DRAGON%sENTITY_ZOMBIE_DESTROY_EGG%sENTITY_GUARDIAN_FLOP%sENTITY_POLAR_BEAR_STEP%sITEM_CROSSBOW_QUICK_CHARGE_2%sITEM_CROSSBOW_QUICK_CHARGE_3%sENTITY_COD_FLOP%sITEM_CROSSBOW_QUICK_CHARGE_1%sENTITY_MAGMA_CUBE_DEATH%sBLOCK_DISPENSER_DISPENSE%sENTITY_HORSE_DEATH%sENTITY_GENERIC_SWIM%sBLOCK_SNOW_PLACE%sUI_STONECUTTER_TAKE_RESULT%sENTITY_PILLAGER_AMBIENT%sENTITY_ILLUSIONER_DEATH%sENTITY_EVOKER_CAST_SPELL%sENTITY_MAGMA_CUBE_SQUISH%sBLOCK_BAMBOO_SAPLING_HIT%sENTITY_FISHING_BOBBER_RETRIEVE%sENTITY_SHULKER_HURT%sMUSIC_CREATIVE%sMUSIC_DISC_BLOCKS%sBLOCK_PISTON_EXTEND%sENTITY_ARMOR_STAND_BREAK%sBLOCK_SCAFFOLDING_FALL%sENTITY_HUSK_DEATH%sENTITY_PILLAGER_DEATH%sITEM_ARMOR_EQUIP_GOLD%sENTITY_RABBIT_DEATH%sENTITY_CREEPER_DEATH%sENTITY_ZOMBIE_CONVERTED_TO_DROWNED%sENTITY_PANDA_AMBIENT%sENTITY_SILVERFISH_HURT%sENTITY_ELDER_GUARDIAN_HURT%sENTITY_MAGMA_CUBE_JUMP%sBLOCK_ANVIL_LAND%sENTITY_PARROT_IMITATE_HUSK%sBLOCK_FENCE_GATE_CLOSE%sENTITY_FIREWORK_ROCKET_BLAST%sENTITY_EVOKER_HURT%sENTITY_SKELETON_AMBIENT%sENTITY_PLAYER_HURT_ON_FIRE%sENTITY_GHAST_AMBIENT%sBLOCK_LANTERN_BREAK%sENTITY_DOLPHIN_ATTACK%sENTITY_ENDER_DRAGON_AMBIENT%sENTITY_MAGMA_CUBE_HURT%sENTITY_GENERIC_BURN%sENTITY_HORSE_ANGRY%sWEATHER_RAIN_ABOVE%sBLOCK_WOOL_STEP%sENTITY_LEASH_KNOT_PLACE%sENTITY_DONKEY_ANGRY%sENTITY_CAT_HURT%sENTITY_PARROT_IMITATE_ENDERMAN%sENTITY_PARROT_IMITATE_WITCH%sENTITY_ZOMBIE_HORSE_DEATH%sENTITY_SLIME_SQUISH_SMALL%sENTITY_PARROT_IMITATE_CREEPER%sENTITY_TURTLE_SHAMBLE_BABY%sENTITY_SKELETON_SHOOT%sITEM_SHIELD_BREAK%sENTITY_ZOMBIE_PIGMAN_ANGRY%sBLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT%sBLOCK_WOOL_BREAK%sENTITY_ZOMBIE_STEP%sENTITY_HOSTILE_HURT%sBLOCK_END_GATEWAY_SPAWN%sITEM_BUCKET_FILL_FISH%sENTITY_COW_STEP%sBLOCK_METAL_PLACE%sBLOCK_CHORUS_FLOWER_GROW%sBLOCK_DISPENSER_FAIL%sENTITY_TNT_PRIMED%sENTITY_ZOMBIE_PIGMAN_HURT%sBLOCK_SMOKER_SMOKE%sENTITY_DROWNED_STEP%sITEM_ARMOR_EQUIP_TURTLE%sBLOCK_NOTE_BLOCK_PLING%sENTITY_MOOSHROOM_EAT%sBLOCK_IRON_DOOR_CLOSE%sBLOCK_NOTE_BLOCK_XYLOPHONE%sENTITY_TROPICAL_FISH_AMBIENT%sENTITY_COW_AMBIENT%sBLOCK_GRAVEL_HIT%sBLOCK_WOOD_STEP%sENTITY_TURTLE_AMBIENT_LAND%sENTITY_PAINTING_PLACE%sENTITY_STRAY_AMBIENT%sENTITY_RAVAGER_CELEBRATE%sITEM_SHOVEL_FLATTEN%sENTITY_CAT_PURREOW%sITEM_BUCKET_EMPTY_LAVA%sENTITY_SLIME_DEATH_SMALL%sENTITY_IRON_GOLEM_ATTACK%sENTITY_SHULKER_HURT_CLOSED%sENTITY_SQUID_SQUIRT%sENTITY_ZOMBIE_HORSE_AMBIENT%sITEM_TRIDENT_HIT%sENTITY_MAGMA_CUBE_HURT_SMALL%sENTITY_ARMOR_STAND_PLACE%sBLOCK_STONE_PRESSURE_PLATE_CLICK_ON%sBLOCK_WOOL_FALL%sENTITY_PANDA_CANT_BREED%sENTITY_PARROT_IMITATE_GUARDIAN%sITEM_BUCKET_FILL%sENTITY_DOLPHIN_PLAY%sENTITY_VINDICATOR_DEATH%sBLOCK_GRASS_BREAK%sITEM_CROSSBOW_SHOOT%sENTITY_EVOKER_PREPARE_ATTACK%sENTITY_POLAR_BEAR_DEATH%sENTITY_ELDER_GUARDIAN_AMBIENT%sENTITY_DONKEY_DEATH%sENTITY_TURTLE_SWIM%sENTITY_HORSE_BREATHE%sENTITY_POLAR_BEAR_AMBIENT%sBLOCK_METAL_PRESSURE_PLATE_CLICK_OFF%sUI_STONECUTTER_SELECT_RECIPE%sBLOCK_SAND_BREAK%sENTITY_PARROT_IMITATE_ELDER_GUARDIAN%sUI_TOAST_CHALLENGE_COMPLETE%sENTITY_IRON_GOLEM_HURT%sITEM_TOTEM_USE%sMUSIC_CREDITS%sENTITY_GENERIC_BIG_FALL%sENTITY_PLAYER_HURT%sENTITY_PARROT_AMBIENT%sENTITY_PARROT_IMITATE_DROWNED%sBLOCK_GLASS_PLACE%sBLOCK_WOODEN_BUTTON_CLICK_OFF%sENTITY_HUSK_AMBIENT%sENTITY_ARROW_HIT_PLAYER%sENTITY_GUARDIAN_AMBIENT%sENTITY_RAVAGER_DEATH%sBLOCK_GRASS_HIT%sBLOCK_GRAVEL_STEP%sENTITY_VEX_AMBIENT%sENTITY_PARROT_IMITATE_SLIME%sENTITY_ZOMBIE_VILLAGER_HURT%sENTITY_FOX_AGGRO%sENTITY_PANDA_STEP%sENTITY_SNOW_GOLEM_SHOOT%sBLOCK_SAND_PLACE%sMUSIC_DISC_CHIRP%sBLOCK_WOOD_HIT%sBLOCK_TRIPWIRE_CLICK_ON%sITEM_BOTTLE_EMPTY%sENTITY_PLAYER_ATTACK_WEAK%sENTITY_PARROT_IMITATE_ZOMBIE_PIGMAN%sENTITY_ENDERMAN_HURT%sENTITY_WANDERING_TRADER_YES%sENTITY_ENDERMITE_STEP%sENTITY_BAT_DEATH%sENTITY_DOLPHIN_SWIM%sENTITY_PANDA_SNEEZE%sENTITY_GENERIC_EXPLODE%sBLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON%sBLOCK_SCAFFOLDING_STEP%sENTITY_SHEEP_HURT%sBLOCK_LANTERN_HIT%sENTITY_WITCH_AMBIENT%sENTITY_HORSE_LAND%sITEM_CROP_PLANT%sENTITY_TURTLE_EGG_BREAK%sENTITY_RABBIT_AMBIENT%sENTITY_VILLAGER_WORK_CLERIC%sITEM_BOOK_PAGE_TURN%sENTITY_WOLF_HURT%sENTITY_FOX_DEATH%sENTITY_TROPICAL_FISH_DEATH%sENTITY_TURTLE_LAY_EGG%sMUSIC_NETHER%sENTITY_FIREWORK_ROCKET_TWINKLE_FAR%sENTITY_GENERIC_SPLASH%sENTITY_WITHER_BREAK_BLOCK%sBLOCK_GRAVEL_FALL%sENTITY_ITEM_BREAK%sENTITY_SLIME_ATTACK%sITEM_BOTTLE_FILL_DRAGONBREATH%sENTITY_PLAYER_DEATH%sENTITY_VILLAGER_WORK_FLETCHER%sBLOCK_GRASS_PLACE%sITEM_AXE_STRIP%sENTITY_TURTLE_DEATH%sENTITY_EVOKER_CELEBRATE%sBLOCK_LANTERN_PLACE%sBLOCK_STONE_STEP%sBLOCK_CONDUIT_DEACTIVATE%sENTITY_PHANTOM_DEATH%sBLOCK_LADDER_STEP%sBLOCK_LILY_PAD_PLACE%sENTITY_BAT_LOOP%sENTITY_PARROT_IMITATE_SILVERFISH%sBLOCK_END_PORTAL_SPAWN%sENTITY_GENERIC_SMALL_FALL%sENTITY_WITCH_DRINK%sBLOCK_GRAVEL_BREAK%sENTITY_PLAYER_ATTACK_CRIT%sENTITY_HOSTILE_SMALL_FALL%sENTITY_ZOMBIE_HURT%sAMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE%sBLOCK_WOOL_HIT%sITEM_ARMOR_EQUIP_LEATHER%sENTITY_CREEPER_PRIMED%sBLOCK_STONE_FALL%sBLOCK_WATER_AMBIENT%sENTITY_RAVAGER_ATTACK%sITEM_FIRECHARGE_USE%sITEM_TRIDENT_THROW%sENTITY_SHULKER_OPEN%sENTITY_HUSK_STEP%sENTITY_BAT_AMBIENT%sENTITY_PIG_DEATH%sBLOCK_WET_GRASS_HIT%sBLOCK_BEACON_ACTIVATE%sBLOCK_LANTERN_STEP%sBLOCK_STONE_BUTTON_CLICK_ON%sBLOCK_SHULKER_BOX_OPEN%sENTITY_HOSTILE_SWIM%sENTITY_ENDERMAN_TELEPORT%sENTITY_SLIME_SQUISH%sAMBIENT_UNDERWATER_LOOP%sENTITY_PAINTING_BREAK%sENTITY_LLAMA_AMBIENT%sMUSIC_DISC_MALL%sMUSIC_DISC_STAL%sENTITY_ENDER_EYE_DEATH%sMUSIC_UNDER_WATER%sBLOCK_BELL_RESONATE%sENTITY_TURTLE_EGG_CRACK%sENTITY_EGG_THROW%sENTITY_WITHER_SPAWN%sENTITY_WOLF_STEP%sENTITY_PANDA_WORRIED_AMBIENT%sBLOCK_IRON_DOOR_OPEN%sENTITY_LLAMA_STEP%sENTITY_DROWNED_HURT_WATER%sENTITY_ZOMBIE_VILLAGER_AMBIENT%sENTITY_VILLAGER_DEATH%sENTITY_PARROT_IMITATE_PHANTOM%sENTITY_POLAR_BEAR_HURT%sBLOCK_SLIME_BLOCK_STEP%sENTITY_GUARDIAN_ATTACK%sENTITY_CHICKEN_STEP%sENTITY_ITEM_FRAME_PLACE%sBLOCK_ENDER_CHEST_OPEN%sENTITY_PHANTOM_BITE%sBLOCK_NOTE_BLOCK_BANJO%sENTITY_VILLAGER_WORK_CARTOGRAPHER%sBLOCK_BARREL_OPEN%sBLOCK_NOTE_BLOCK_HARP%sENTITY_TURTLE_HURT%sBLOCK_BAMBOO_HIT%sENTITY_PUFFER_FISH_DEATH%sENTITY_DOLPHIN_AMBIENT_WATER%sBLOCK_GRAVEL_PLACE%sENTITY_COD_DEATH%sBLOCK_TRIPWIRE_DETACH%sBLOCK_BEACON_DEACTIVATE%sBLOCK_STONE_BUTTON_CLICK_OFF%sENTITY_PARROT_IMITATE_WOLF%sENTITY_SQUID_DEATH%sBLOCK_BLASTFURNACE_FIRE_CRACKLE%sBLOCK_SCAFFOLDING_PLACE%sENTITY_PUFFER_FISH_STING%sENTITY_PILLAGER_HURT%sENTITY_PARROT_STEP%sENTITY_ZOMBIE_BREAK_WOODEN_DOOR%sENTITY_MAGMA_CUBE_SQUISH_SMALL%sBLOCK_BARREL_CLOSE%sENTITY_SALMON_AMBIENT%sENTITY_CAT_DEATH%sENTITY_VILLAGER_HURT%sBLOCK_SNOW_HIT%sBLOCK_NOTE_BLOCK_HAT%sBLOCK_CHEST_LOCKED%sENTITY_SHULKER_AMBIENT%sENTITY_SALMON_FLOP%sENTITY_PLAYER_SPLASH%sENTITY_SPIDER_AMBIENT%sBLOCK_CAMPFIRE_CRACKLE%sBLOCK_WET_GRASS_BREAK%sENTITY_WOLF_DEATH%sENTITY_VILLAGER_WORK_ARMORER%sENTITY_ELDER_GUARDIAN_DEATH_LAND%sENTITY_SNOW_GOLEM_DEATH%sBLOCK_SLIME_BLOCK_BREAK%sENTITY_ENDER_DRAGON_HURT%sBLOCK_SCAFFOLDING_BREAK%sENTITY_SLIME_JUMP_SMALL%sENTITY_WITHER_SHOOT%sENTITY_EVOKER_PREPARE_SUMMON%sENTITY_DRAGON_FIREBALL_EXPLODE%sENTITY_MULE_HURT%sENTITY_WANDERING_TRADER_HURT%sENTITY_GUARDIAN_HURT_LAND%sBLOCK_STONE_PLACE%sENTITY_DROWNED_DEATH%sENTITY_SKELETON_HORSE_AMBIENT_WATER%sENTITY_SPIDER_HURT%sITEM_BUCKET_EMPTY%sENTITY_SHEEP_DEATH%sENTITY_TURTLE_HURT_BABY%sENTITY_VEX_CHARGE%sBLOCK_PORTAL_AMBIENT%sENTITY_PLAYER_HURT_DROWN%sITEM_NETHER_WART_PLANT%sAMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE%sENTITY_RABBIT_ATTACK%sBLOCK_FIRE_EXTINGUISH%sENTITY_SKELETON_HURT%sBLOCK_GRINDSTONE_USE%sENTITY_PARROT_IMITATE_ZOMBIE%sENTITY_SKELETON_HORSE_SWIM%sBLOCK_STONE_BREAK%sENTITY_PHANTOM_HURT%sENTITY_PLAYER_LEVELUP%sENTITY_DROWNED_AMBIENT_WATER%sENTITY_CHICKEN_AMBIENT%sENTITY_VINDICATOR_CELEBRATE%sENTITY_ENDERMAN_STARE%sBLOCK_SNOW_BREAK%sENTITY_PARROT_IMITATE_POLAR_BEAR%sBLOCK_BEACON_AMBIENT%sBLOCK_SHULKER_BOX_CLOSE%sBLOCK_NOTE_BLOCK_BASEDRUM%sMUSIC_DISC_CAT%sENTITY_ARROW_HIT%sENTITY_EVOKER_AMBIENT%sENTITY_BLAZE_BURN%sENTITY_VINDICATOR_HURT%sENTITY_SQUID_HURT%sENTITY_VILLAGER_WORK_FISHERMAN%sENTITY_HOSTILE_BIG_FALL%sENTITY_VILLAGER_WORK_FARMER%sBLOCK_NOTE_BLOCK_DIDGERIDOO%sBLOCK_FENCE_GATE_OPEN%sENTITY_ZOMBIE_ATTACK_IRON_DOOR%sENTITY_FIREWORK_ROCKET_SHOOT%sENTITY_WITCH_THROW%sITEM_CROSSBOW_LOADING_MIDDLE%sENTITY_PARROT_IMITATE_WITHER%sENTITY_COD_HURT%sBLOCK_SLIME_BLOCK_PLACE%sBLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT%sBLOCK_SLIME_BLOCK_FALL%sENTITY_GUARDIAN_AMBIENT_LAND%sENTITY_WOLF_HOWL%sENTITY_SILVERFISH_STEP%sBLOCK_LANTERN_FALL%sENTITY_BAT_TAKEOFF%sENTITY_IRON_GOLEM_DEATH%sBLOCK_NETHER_WART_BREAK%sENTITY_PARROT_IMITATE_GHAST%sBLOCK_STONE_HIT%sENTITY_PARROT_IMITATE_WITHER_SKELETON%sENTITY_ITEM_FRAME_BREAK%sENTITY_WITHER_HURT%sENTITY_CAT_BEG_FOR_FOOD%sBLOCK_BUBBLE_COLUMN_BUBBLE_POP%sENTITY_PLAYER_BREATH%sENTITY_PLAYER_ATTACK_KNOCKBACK%sENTITY_ITEM_FRAME_REMOVE_ITEM%sENTITY_MOOSHROOM_MILK]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4583</id>
	<key><![CDATA[Returns a player's name. If a string is specified, it will attempt to find a complete match for a partial name. If no string is specified, the current player is returned. UUIDs are also accepted for this and other functions that apply to online players. If the command is being run from the console, then the string '~console' is returned. If the command came from a CommandBlock, the block's name prefixed with # is returned. If the command is coming from elsewhere, returns a string chosen by the sender of this command (or %s). Note that most functions won't support console or block names (they'll throw a PlayerOfflineException), but you can use this to determine where a command is being run from.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4584</id>
	<key><![CDATA[Gets the player's level.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4585</id>
	<key><![CDATA[Returns a location array of the coordinates of the player specified, or the player running the command if no player is specified. Note that unlike entity_loc() the y coordinate will be for the block the player is standing on, which is one meter lower. The array returned also includes the player's world, yaw and pitch.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4586</id>
	<key><![CDATA[Returns the player's game mode. It will be one of SURVIVAL, CREATIVE, ADVENTURE, or SPECTATOR.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4587</id>
	<key><![CDATA[Returns whether or not the specified player is online. Note that the name must match exactly, but it will not throw a PlayerOfflineException if the player is not online, or if the player doesn't even exist.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4588</id>
	<key><![CDATA[Basic functional usage, with optional value set]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4589</id>
	<key><![CDATA[Writes the text to the system's std err, but does not automatically add a newline at the end. Unlike console(), this does not use anything else to format the output, though in many cases they will behave the same. Unlike other print methdods, colors and other formatting characters WILL "bleed" through, so print_err(color(RED) . 'This is red') will also cause the next line to also be red, so if you need to print multiple lines out, you should manually reset the color with print_out(color(RESET)), or use sys_err.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4590</id>
	<key><![CDATA[Writes the text to the system's std out, but does not automatically add a newline at the end. Unlike console(), this does not use anything else to format the output, though in many cases they will behave the same. Unlike other print methdods, colors and other formatting characters WILL "bleed" through, so print_out(color(RED) . 'This is red') will also cause the next line to also be red, so if you need to print multiple lines out, you should manually reset the color with print_out(color(RESET)), or use sys_out..]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4591</id>
	<key><![CDATA[Creates a new user defined procedure (also known as "function"), with the given name and parameters, that can be called later in code. The name of the procedure must be a constant and its parameters must be variables. Please see the more detailed documentation on procedures for more information. In general, brace syntax and keyword usage is preferred: proc _myProc(@a, @b){ procCode(@a, @b); }]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4592</id>
	<key><![CDATA[Decrypting the password]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4593</id>
	<key><![CDATA[Returns the player's food saturation level.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4594</id>
	<key><![CDATA[Changes a block temporarily for the specified player. This can be used to "fake" blocks for a player. These illusory blocks will disappear when the client updates them, most often by clicking on them or reloading the chunks. A block type or blockdata format is supported. (see set_blockdata_string())]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4595</id>
	<key><![CDATA[Changes a sign's text only for the specified player. This change does not persist. This can be used to "fake" sign text for a player. LineArray, if used, must have 4 elements.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4596</id>
	<key><![CDATA[Gets the entity UUID that a spectator is viewing. If the player isn't spectating from an entity, %s is returned. If the player isn't in spectator mode, an IllegalArgumentException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4597</id>
	<key><![CDATA[Works in reverse of pgive_enderchest_item(), but returns the number of items actually taken, which will be from 0 to qty.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4598</id>
	<key><![CDATA[Works in reverse of pgive_item(), but returns the number of items actually taken, which will be from 0 to qty.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4599</id>
	<key><![CDATA[This function is simply written in terms of json_encode and run, and is otherwise equivalent to run('/tellraw ' . @selector . ' ' . json_encode(@raw))]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4600</id>
	<key><![CDATA[A thin wrapper around the /tellraw command, this simply passesthe input ot the Minecraft tellraw command. The raw is passed in as a normal (possibly associative) array, and json encoded. No validation is done on the input, so the command may fail. The specification of the array may change from version to version of Minecraft, but is documented here %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4601</id>
	<key><![CDATA[Complex object]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4602</id>
	<key><![CDATA[Simple usage with a plain message]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4603</id>
	<key><![CDATA[Returns an associative array that represents the player's velocity. The array contains the following items: magnitude, x, y, z. These represent a 3 dimensional Vector. The important part is x, y, z, however, the magnitude is provided for you as a convenience. (It should equal sqrt(x ** 2 + y ** 2 + z ** 2))]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4604</id>
	<key><![CDATA[Returns whether or not this player is whitelisted. This will work with offline players, but the name must be exact.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4605</id>
	<key><![CDATA[Gets the world of the player specified, or the current player if playerName isn't specified.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4606</id>
	<key><![CDATA[[[%s|Learning Trail: SQL]], [[%s|Learning Trail: Profiles]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4607</id>
	<key><![CDATA[For SELECT queries, an array of associative arrays is returned. It is not guaranteed that the arrays themselves are  editable, so this returned array should be considered \"read-only\". Optimizations will be added later to make this  more efficient. For INSERT queries, either %s or an integer is returned. If the insert caused an auto-increment to  occur, that auto-increment ID is returned. Otherwise, %s is returned. For UPDATE, DELETE, or schema changing  queries, %s is always returned. In the event that an SQL query is incorrect or otherwise causes an error, an  SQLException is thrown. Only primitive data types are supported for the parameters, arrays are not.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4608</id>
	<key><![CDATA[Booleans]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4609</id>
	<key><![CDATA[Dates]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4610</id>
	<key><![CDATA[When inserting dates you should insert them as strings. The following are examples of correctly converted dates:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4611</id>
	<key><![CDATA[The profile is either a string, which represents a pre-configured database connection, or an array, which can include dynamic connection information.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4612</id>
	<key><![CDATA[simple_date('yyyy', time())]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4613</id>
	<key><![CDATA[MySQL's BIT type with only one bit will be retrieved as a boolean. When setting the BIT type you can use a  integer (0 or 1), string ("true", "false", "0", "1") and a boolean.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4614</id>
	<key><![CDATA[MySQL Data Conversion]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4615</id>
	<key><![CDATA[YEAR]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4616</id>
	<key><![CDATA[simple_date('yyyy-MM-dd', time())]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4617</id>
	<key><![CDATA[TIMESTAMP]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4618</id>
	<key><![CDATA[Executes an SQL query, and returns various data depending on the query type.  See the extended information for more details.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4619</id>
	<key><![CDATA[simple_date('yyyy-MM-dd HH:mm:ss', time())]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4620</id>
	<key><![CDATA[MySQL data types: BINARY, VARBINARY, TINYBLOB, BLOB, MEDIUMBLOB, LONGBLOB and BIT with more then one bit will return  as a ByteArray. It is however not required that you insert these types as a ByteArray (but it is supported).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4621</id>
	<key><![CDATA[When inserting data into a MySQL database the data types are converted to match whatever the column type is. If the  data you insert is longer or has more precision then the MySQL data type supports it will be truncated and may result  in loss of data.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4622</id>
	<key><![CDATA[TIME]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4623</id>
	<key><![CDATA[Alternately you can use a integer here too.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4624</id>
	<key><![CDATA[DATE]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4625</id>
	<key><![CDATA[Even though a timestamp is numeric MySQL handles it the same as DATETIME.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4626</id>
	<key><![CDATA[DATETIME]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4627</id>
	<key><![CDATA[The query is the SQL query itself, with question marks (?) that represent input parameters, and the parameters are the  input parameters themselves. Compile time checking is done, if possible, to ensure that the correct number of  parameters is passed, based on the number of question marks in the query. It is never a good idea to dynamically  create the query, so a compiler warning is issued if a query is dynamically being built.  See [[%s|this page]] for more details about the SQL module.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4628</id>
	<key><![CDATA[All date and time types will be retrieved as an integer in milliseconds since January 1, 1970, 00:00:00 GMT.  You can then use %s to make it a human readable date string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4629</id>
	<key><![CDATA[simple_date('HH:mm:ss', time())]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4630</id>
	<key><![CDATA[Asynchronously makes a query to an SQL server. The profile, query, and params arguments work the same as %s, so see the documentation of that function for details about those parameters. The callback should have the following signature: closure(@contents, @exception){ &lt;code&gt; }. @contents will contain the return value that query would normally return. If @exception is not %s, then an exception occurred during the query, and that exception will be passed in. If @exception is %s, then no error occured, though @contents may still be %s if query() would otherwise have returned %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4631</id>
	<key><![CDATA[Basic usage, with one paramter]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4632</id>
	<key><![CDATA[Returns a random number from 0 to max, or min to max, depending on usage. Max is exclusive. Min must be less than max, and both numbers must be >= 0. This will return an integer. Alternatively, you can pass no arguments, and a random double, from 0 to 1 will be returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4633</id>
	<key><![CDATA[Usage with no parameters]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4634</id>
	<key><![CDATA[Basic usage, with a range]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4635</id>
	<key><![CDATA[With skips]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4636</id>
	<key><![CDATA[Complex usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4637</id>
	<key><![CDATA[In reverse]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4638</id>
	<key><![CDATA[Invalid input]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4639</id>
	<key><![CDATA[Returns an array of numbers from start to (finish - 1) skipping increment integers per count. start defaults to 0, and increment defaults to 1. All inputs must be integers. If the input doesn't make sense, it will reasonably degrade, and return an empty array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4640</id>
	<key><![CDATA[Returns a boolean stating if the other player can see this player or not. This is the raw access function, you probably shouldn't use this, as the CommandHelper vanish api functions will probably be easier to use.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4641</id>
	<key><![CDATA[Sets the visibility of the current player (or the one specified) to visible or invisible (based on the value of isVanished) from the view of the otherPlayer. This is the raw access function, you probably shouldn't use this, as the CommandHelper vanish api functions will probably be easier to use.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4642</id>
	<key><![CDATA[Reads in a file from the file system at location var1 and returns it as a string. The path is relative to the file that is being run, not CommandHelper. If the file is not found, or otherwise can't be read in, an IOException is thrown. If the file specified is not within base-dir (as specified in the preferences file), a SecurityException is thrown. The line endings for the string returned will always be \n, even if they originally were \r\n.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4643</id>
	<key><![CDATA[Reads the input from a process that is piped to this script. It is assumed that the data piped to the script will come all at once, and it will be returned as a string (or byte_array if binary is true). This can only be used in cmdline mode, and binary defaults to false. If the script isn't started in TTY mode, an IOException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4644</id>
	<key><![CDATA[Usage with a duplicated array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4645</id>
	<key><![CDATA[Usage with arrays that are the same reference]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4646</id>
	<key><![CDATA[Usage with primitives]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4647</id>
	<key><![CDATA[Usage with a cloned array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4648</id>
	<key><![CDATA[Returns the documentation for an element. There are 4 things that an element might have, and one of these should be passed as the docField argument: type, return, args, description. A valid element is either the name of an ivariable, or a function/proc. For instance, reflect_docs('reflect_docs', 'description') would return what you are reading right now. User defined variables and procs may not have any documentation, in which case %s is returned. If the specified argument cannot be found, a FormatException is thrown. If no arguments are passed in, it returns the documentation for reflect_docs, that is, what you're reading right now.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4649</id>
	<key><![CDATA[Args]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4650</id>
	<key><![CDATA[Description]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4651</id>
	<key><![CDATA[Lists the keywords, if no parameter is provided, otherwise provides the documentation for the specified keyword]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4652</id>
	<key><![CDATA[col]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4653</id>
	<key><![CDATA[keywords]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4654</id>
	<key><![CDATA[Returns a list of currently in scope variables. If name is provided, the currently set value is instead returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4655</id>
	<key><![CDATA[The current column number]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4656</id>
	<key><![CDATA[An array of enum names, or if one is provided, a list of all the values in that enum]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4657</id>
	<key><![CDATA[[enum name]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4658</id>
	<key><![CDATA[varlist]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4659</id>
	<key><![CDATA[Returns the command that was used to fire off this script (if applicable)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4660</id>
	<key><![CDATA[An array of data source protocols available]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4661</id>
	<key><![CDATA[[keyword name]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4662</id>
	<key><![CDATA[line_num]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4663</id>
	<key><![CDATA[The absolute path to the current file]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4664</id>
	<key><![CDATA[Return the label that the script is currently running under]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4665</id>
	<key><![CDATA[enum]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4666</id>
	<key><![CDATA[[name]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4667</id>
	<key><![CDATA[datasources]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4668</id>
	<key><![CDATA[The following items can be retrieved:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4669</id>
	<key><![CDATA[Returns information about the runtime in a usable format. Depending on the information returned, it may be useable directly, or it may be more of a referential format.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4670</id>
	<key><![CDATA[The current line number]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4671</id>
	<key><![CDATA[Returns the source file that this key will store a value to in the Persistence Network. For instance, in your persistence.ini file, if you have the entry "storage.test.**=json:///path/to/file.json", then reflect_value_source('storage.test.testing') would return 'json:///path/to/file.json'. This is useful for debugging, as it will definitively trace back the source/destination of a value.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4672</id>
	<key><![CDATA[This is not guaranteed to work reliably! Resends the chunk data to all clients, using the specified world or current player's world.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4673</id>
	<key><![CDATA[[[%s|CONSTANT_OFFLINE]] %s [[%s|OPTIMIZE_DYNAMIC]] %s [[%s|CACHE_RETURN]] %s [[%s|NO_SIDE_EFFECTS]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4674</id>
	<key><![CDATA[Named captures with backreferences (Only works if your system is running Java 7)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4675</id>
	<key><![CDATA[Named captures (Only works if your system is running Java 7)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4676</id>
	<key><![CDATA[Using backreferences with named captures (Only works if your system is running Java 7)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4677</id>
	<key><![CDATA[Using backreferences]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4678</id>
	<key><![CDATA[[[%s|OPTIMIZE_DYNAMIC]] %s [[%s|CACHE_RETURN]] %s [[%s|NO_SIDE_EFFECTS]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4679</id>
	<key><![CDATA[Regenerate the chunk for a world. The current player's world is used if one is not provided. Beware that this is destructive! Any data in this chunk will be lost! Returns true if the operation was successful. This function is deprecated. Results will vary per platform and may not work at all.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4680</id>
	<key><![CDATA[Registers a plugin channel for CommandHelper to listen on. Channel name should be a string that is all lower-case, no longer than 32 characters, and contain a colon, or it will throw an IllegalArgumentException. Incoming messages can be inspected by binding to 'plugin_message_received'.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4681</id>
	<key><![CDATA[Register the /hug &lt;player&gt; command.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4682</id>
	<key><![CDATA[Registers a command to the server's command list, or updates an existing one. Options is an associative array that can have the following keys: description, usage, permission, noPermMsg, aliases, tabcompleter, and/or executor. Everything is optional and can be modified later, except for 'aliases' which can only be changed by first unregistering the command. 'noPermMsg' is the message displayed when the user doesn't have the permission specified in 'permission'. 'Usage' is the message shown when the 'executor' returns false. 'Executor' is the closure run when the command is executed, and can return true or false (by default is treated as true). 'tabcompleter' is the closure run when a user hits tab while the command is entered and ready for args. It is meant to return an array of completions, but if not the tab_complete_command event will be fired, and the completions of that event will be sent to the user. Both executor and tabcompleter closures are passed the following information in this order: alias used, name of the sender, array of arguments used, array of command info.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4683</id>
	<key><![CDATA[Unregisters an objective from the scoreboard. Scoreboard defaults to 'main' if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4684</id>
	<key><![CDATA[Removes the previously set runtime setting. If the setting wasn't already set, then a warning is issued, unless 'function.remove_runtime_setting.no_warn_on_removing_blank' is set to true.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4685</id>
	<key><![CDATA[Stops tracking the given scoreboard, unless it is 'main', because that never goes away. If %sify is true (defaults to true), all scores, teams, and objectives will be cleared, and all tracked players currently online will be switched to the main scoreboard, essentially removing all references to the board so it can be garbage-collected.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4686</id>
	<key><![CDATA[Unregisters a team from the scoreboard. Scoreboard defaults to 'main' if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4687</id>
	<key><![CDATA[Replaces all instances of 'search' with 'replacement' in 'subject']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4688</id>
	<key><![CDATA[No match found]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4689</id>
	<key><![CDATA[Resets all scores for a player tracked by the given scoreboard. This means they will not be show up on any displays. Scoreboard defaults to 'main' if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4690</id>
	<key><![CDATA[Resets a player's display name to their real name. If playerName isn't specified, defaults to the player running the command.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4691</id>
	<key><![CDATA[Rounding down]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4692</id>
	<key><![CDATA[Unlike floor and ceil, rounds the number to the nearest double that is equal to an integer. Precision defaults to 0, but if set to 1 or more, rounds decimal places. For instance, round(2.29, 1) would return 2.3. If precision is &lt; 0, a RangeException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4693</id>
	<key><![CDATA[Higher precision round]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4694</id>
	<key><![CDATA[Rounding up]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4695</id>
	<key><![CDATA[With round15]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4696</id>
	<key><![CDATA[Rounds value to the 15th place. This is useful when doing math using approximations. For instance, sin(math_const('PI')) returns 1.2246467991473532E-16, but sin of pi is actually 0. This happens because pi cannot be accurately represented on a computer, it is an approximation. Using round15, you can round to the next nearest value, which often time should give a more useful answer to display. For instance, round15(sin(math_const('PI'))) is 0. This functionality is not provided by default in methods like sin(), because it technically makes the result less accurate, given the inputs. In general, you should only use this function just before displaying the value to the user. Internally, you should keep the value returned by the input functions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4697</id>
	<key><![CDATA[Without round15]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4698</id>
	<key><![CDATA[Runs a command as a particular user. The special user '~console' can be used to run it as a console user. Using '~op' is deprecated, and will be removed after the next release, use sudo() instead. Commands cannot be run as an offline player. If the first argument is an array of usernames, the command will be run in the context of each user in the array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4699</id>
	<key><![CDATA[[[%s|OPTIMIZE_DYNAMIC]] %s [[%s|CACHE_RETURN]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4700</id>
	<key><![CDATA[Implied usage, due to no operators]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4701</id>
	<key><![CDATA[Runs the specified script in the context of a given player or ~console. A script that runs player(), for instance, would return the specified player's name, not the player running the command. Setting the label allows you to dynamically set the label this script is run under as well (in regards to permission checking)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4702</id>
	<key><![CDATA[Demonstrates secure value]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4703</id>
	<key><![CDATA[Demonstrates compability with string class]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4704</id>
	<key><![CDATA[A secure_string is a string which cannot normally be toString'd, and whose underlying representation is encrypted in memory. This should be used for storing passwords or other sensitive data which should in no cases be stored in plain text. Since this extends string, it can generally be used in place of a string, and when done so, cannot accidentally be exposed (via logs or exception messages, or other accidental exposure) unless it is specifically instructed to decrypt and switch to a char array. While this cannot by itself ensure security of the value, it can help prevent most accidental exposures of data by intermediate code. When exported as a string (or imported as a string) other code must be written to ensure safety of those systems. It is recommended that a secure value never be stored as a string, however, this method accepts a string for compatibility reasons.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4705</id>
	<key><![CDATA[Demonstrates common useage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4706</id>
	<key><![CDATA[Demonstrates compatibility with other functions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4707</id>
	<key><![CDATA[Constructs a secure_string from a given char array or string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4708</id>
	<key><![CDATA[Sends a resourcepack URL to the player's client. If the client has not been requested to change resources in the past, they will receive a confirmation dialog before downloading and switching to the new pack. Clients that ignore server resources will not receive the request, so this function will not affect them.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4709</id>
	<key><![CDATA[. Operator syntax is also supported: @a]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4710</id>
	<key><![CDATA['2.0', despite those being]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4711</id>
	<key><![CDATA[Uses a strict equals check, which determines if two values are not only equal, but also the same type. So, while equals('1', 1) returns true, sequals('1', 1) returns false, because the first one is a string, and the second one is an int. More often than not, you want to use plain equals(). In addition, type juggling is explicitely not performed on strings. Thus '2' !]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4712</id>
	<key><![CDATA[False result]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4713</id>
	<key><![CDATA[Sets the art at the specified location. If the art doesn't fit, nothing happens, and false is returned. Otherwise, true is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4714</id>
	<key><![CDATA[Art may be one of the following: KEBAB, AZTEC, ALBAN, AZTEC2, BOMB, PLANT, WASTELAND, POOL, COURBET, SEA, SUNSET, CREEBET, WANDERER, GRAHAM, MATCH, BUST, STAGE, VOID, SKULL_AND_ROSES, WITHER, FIGHTERS, POINTER, PIGSCENE, BURNING_SKULL, SKELETON, DONKEY_KONG]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4715</id>
	<key><![CDATA[Biome may be one of the following: BEACH, SAVANNA, MUSHROOM_FIELD_SHORE, SUNFLOWER_PLAINS, STONE_SHORE, FROZEN_OCEAN, BIRCH_FOREST, THE_VOID, DEEP_LUKEWARM_OCEAN, END_HIGHLANDS, DEEP_FROZEN_OCEAN, END_MIDLANDS, FLOWER_FOREST, ERODED_BADLANDS, END_BARRENS, SNOWY_TUNDRA, MODIFIED_WOODED_BADLANDS_PLATEAU, GRAVELLY_MOUNTAINS, SNOWY_TAIGA, TAIGA_MOUNTAINS, JUNGLE, GIANT_SPRUCE_TAIGA, OCEAN, ICE_SPIKES, SMALL_END_ISLANDS, BAMBOO_JUNGLE_HILLS, FROZEN_RIVER, THE_END, DARK_FOREST, MODIFIED_BADLANDS_PLATEAU, SWAMP_HILLS, COLD_OCEAN, MODIFIED_JUNGLE_EDGE, WOODED_MOUNTAINS, PLAINS, SNOWY_MOUNTAINS, MOUNTAINS, SAVANNA_PLATEAU, JUNGLE_EDGE, TALL_BIRCH_HILLS, GIANT_TREE_TAIGA, RIVER, BIRCH_FOREST_HILLS, WOODED_BADLANDS_PLATEAU, DESERT_LAKES, DARK_FOREST_HILLS, LUKEWARM_OCEAN, NETHER, BAMBOO_JUNGLE, TAIGA_HILLS, MODIFIED_JUNGLE, DEEP_COLD_OCEAN, GIANT_TREE_TAIGA_HILLS, BADLANDS, SHATTERED_SAVANNA_PLATEAU, DEEP_WARM_OCEAN, MUSHROOM_FIELDS, GIANT_SPRUCE_TAIGA_HILLS, SNOWY_TAIGA_HILLS, DEEP_OCEAN, BADLANDS_PLATEAU, TAIGA, WOODED_HILLS, MOUNTAIN_EDGE, SHATTERED_SAVANNA, DESERT, SNOWY_TAIGA_MOUNTAINS, SNOWY_BEACH, WARM_OCEAN, FOREST, JUNGLE_HILLS, TALL_BIRCH_FOREST, MODIFIED_GRAVELLY_MOUNTAINS, SWAMP, UNKNOWN, or DESERT_HILLS]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4716</id>
	<key><![CDATA[Sets the biome of the specified block column. The location array's y value is ignored.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4717</id>
	<key><![CDATA[Sets the id of the block at the x y z coordinates specified. The id must be an integer or a blocktype identifier similar to the type returned from get_block_at (eg. "0:0"). If the meta value is not specified, 0 is used. If world isn't specified, the current player's world is used. Physics (which defaults to true) specifies whether or not to update the surrounding blocks when this block is set. (deprecated for set_block())]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4718</id>
	<key><![CDATA[Sets a living entity's ability to pick up items.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4719</id>
	<key><![CDATA[Sets the contents of the system clipboard, to the given value. Can only be used in cmdline mode. Flavor defaults to %s, and is currently unused. Only strings are currently supported. If the platform doesn't support clipboard operations, an UnsupportedOperationException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4720</id>
	<key><![CDATA[Sets the name of the Command Block at the given location.If no name is given or name is %s, the Command Block's name is reset to @.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4721</id>
	<key><![CDATA[Sets the player's compass target, and returns the old location.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4722</id>
	<key><![CDATA[There are a few special predefined schedules, for very common cases:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4723</id>
	<key><![CDATA[Caveats:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4724</id>
	<key><![CDATA[Additionally, when using the asterisk, you may use the format "*/X" character to mean "every X &lt;time unit&gt;" where X is some integer. For instance:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4725</id>
	<key><![CDATA[@monthly]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4726</id>
	<key><![CDATA[Run once a month at midnight in the morning of the first of the month]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4727</id>
	<key><![CDATA[Barring predefined special schedule definitions, a cronFormat is specified with 5 "sections", each separated by one or more space (or tabs).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4728</id>
	<key><![CDATA[Upon restart of the server (or reload) all cron jobs will be cleared out, so all tasks should be declared in a main file at startup, and probably not declared dynamically (though that is allowed). The closure will then be run at the specified interval. Just like with the actual unix program, if the server isn't running when a task "activates", it will not be activated when the next startup occurs. The process that calls set_cron must continually be running for it to activate properly.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4729</id>
	<key><![CDATA[@weekly]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4730</id>
	<key><![CDATA[(The values are inclusive.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4731</id>
	<key><![CDATA[Sets a task to occur at a regular interval, given a cron style interval. This allows for an easier way to specify that a task should happen, for instance, every hour on the hour. Unlike set_interval, this uses absolute wall clock time, not relative times. The task id is returned, so it can be cleared later with clear_cron if needed. If clear_cron is run from within the task itself, the id is optional. See more information for a detailed description of cron format.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4732</id>
	<key><![CDATA[Unlike the actual cron task, @reboot is not available. Simply run the code in a main file for similar behavior. Additionally, the slash "/" is only available for use with the asterisk (*/X). The L, W, ? and # characters in day of week are not supported.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4733</id>
	<key><![CDATA[@hourly]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4734</id>
	<key><![CDATA[Run once a day at midnight]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4735</id>
	<key><![CDATA[Means run at one minute past midnight, every day of the month, every month of the year, and every day of the week. In addition to single numbers, comma separated numbers may be used, as well as ranges.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4736</id>
	<key><![CDATA[Run once a week at midnight in the morning of Sunday]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4737</id>
	<key><![CDATA[Run once an hour at the beginning of the hour]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4738</id>
	<key><![CDATA[Run once a year at midnight in the morning of January 1]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4739</id>
	<key><![CDATA[means to run the task every 30 minutes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4740</id>
	<key><![CDATA[means the same as]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4741</id>
	<key><![CDATA[means to run on the hour, and on the half hour.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4742</id>
	<key><![CDATA[If a star is present in each position, it means that it will trigger regardless of what the current date/time for that segment is. For instance:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4743</id>
	<key><![CDATA[The format used here is very similar to the Unix program cron, however, a few features are missing, as they aren't useful in the context of this function. For a brief overview of the Unix tool cron, see here: %s However, information for this function specifically is below.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4744</id>
	<key><![CDATA[@daily]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4745</id>
	<key><![CDATA[@yearly (or @annually)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4746</id>
	<key><![CDATA[Sets a player's display name. If the first name isn't provided, it sets the display name of the player running the command. See reset_display_name() also. All player functions expect the player's real name, not their display name.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4747</id>
	<key><![CDATA[Sets the specified entity's health as a percentage, where 0 kills it and 100 gives it full health. An exception is thrown if the entity by that UUID doesn't exist or isn't a LivingEntity.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4748</id>
	<key><![CDATA[Teleporting an entity to another]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4749</id>
	<key><![CDATA[Setting location with an associative array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4750</id>
	<key><![CDATA[Teleporting an entity to you]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4751</id>
	<key><![CDATA[Setting location with a normal array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4752</id>
	<key><![CDATA[Sets the velocity of this entity according to the supplied xyz array. All 3 values default to 0, so an empty array will simply stop the entity's motion. Both normal and associative arrays are accepted.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4753</id>
	<key><![CDATA[Setting a bounce with an associative array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4754</id>
	<key><![CDATA[Setting a bounce with a normal array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4755</id>
	<key><![CDATA[Sets the value of an environment variable. This only changes the environment value in this process, not system-wide. This uses some hackery to work, and may not be 100% reliable in all cases, and shouldn't be relied on heavily. It will always work with get_env, however, so you can rely on that mechanism. The value will always be interpreted as a string, so if you are expecting a particular data type on a call to get_env, you will need to manually cast the variable. Arrays will be toString'd as well, but will be accepted.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4756</id>
	<key><![CDATA[Usage with initial delay]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4757</id>
	<key><![CDATA[Sets a block or entity inventory to the specified inventory object. The specifier can be an entity UUID, location array, or virtual inventory ID. If the block or entity can't have an inventory, a FormatException is thrown. An inventory object invArray is one that matches what is returned by get_inventory(), so set_inventory(123, get_inventory(123)) while pointless, would be a correct call.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4758</id>
	<key><![CDATA[The array must be associative, however, it may skip items, in which case, only the specified values will be changed. If a key is out of range, or otherwise improper, a warning is emitted, and it is skipped, but the function will not fail as a whole. A simple way to set one item would be: set_inventory(123, array(2: array(type: 1, qty: 64))) This sets the inventory second slot to be a stack of stone for entity with ID = 123. Note that this uses the unsafe enchantment mechanism to add enchantments, so any enchantment value will work.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4759</id>
	<key><![CDATA[An item is an associative array with the following keys, name: the string id of the item, qty: The number of items in their inventory, meta: An array of item meta or %s if none exists (see %s for details).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4760</id>
	<key><![CDATA[Sets the specified item in the specified inventory slot. The specifier can be an entity UUID, block location array or virtual inventory id.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4761</id>
	<key><![CDATA[Demonstrates making a custom firework]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4762</id>
	<key><![CDATA[Demonstrates removing all meta]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4763</id>
	<key><![CDATA[Demonstrates making a custom banner]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4764</id>
	<key><![CDATA[Demonstrates hiding a potion effect]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4765</id>
	<key><![CDATA[Applies the data from the given array to the item at the specified slot. Unused fields will be ignored. If %s or an empty array is supplied, or if none of the given fields are applicable, the item will become default, as this function overwrites any existing data.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4766</id>
	<key><![CDATA[Demonstrates making a custom potion]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4767</id>
	<key><![CDATA[Demonstrates coloring leather armor]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4768</id>
	<key><![CDATA[Available fields: %sAll items - "display" (string), "lore" (array of strings), "enchants" (An associative array of enchantments with the vanilla name of enchantment as the key, and value being an enchantment array with the key "elevel" for the level of the enchantment), "model" (an int representing vanilla's CustomModelData for use with resource packs), "flags" (array). Possible flags: HIDE_ENCHANTS, HIDE_ATTRIBUTES, HIDE_UNBREAKABLE, HIDE_DESTROYS, HIDE_PLACED_ON or HIDE_POTION_EFFECTS%sDamageable: "damage" on the item (0 is undamaged; each item type has its own max durability), "unbreakable" (boolean) and "repair" (int, repair cost)%sBooks - "title" (string), author (string), "pages" (array of strings)%sEnchantedBooks - "stored" (associative array of enchantments (see Example))%sLeather Armor - "color" (color array (see Example))%sPlayer Skulls - "owner" (string)%sPotions - "potions" (array of custom potion effects (see get_peffect()), "base" (an array with the keys "type", "extended", and "upgraded")%sBanners - "patterns" (an array of pattern arrays, each with the keys "shape" and "color")%sShields - "basecolor" (string), and "patterns" like in Banners.%sFireworks - "firework" (array with strength (int), "effects" (array of effect arrays (see Example)))%sFirework Charges - "effect" (single Firework effect array)%sStorage Blocks - "inventory" (an array of item arrays)%sMob Spawners - "spawntype" (an entity type)%sFurnace - "burntime" (int), "cooktime" (int), and in "inventory" these keys can exist if an item exists in that slot: "result", "fuel", and "smelting".%sBrewing Stand - "brewtime" (int), "fuel" (int), and in "inventory" these keys can exist if an item exists in that slot: "fuel", "ingredient", "leftbottle", "middlebottle", and "rightbottle".%sTropical Fish Bucket - "fishcolor" (the base dye color of the fish), "fishpatterncolor" (the color of the pattern on the fish), and "fishpattern" (the pattern type on the fish).%sCrossbow - "projectiles" (an array of item arrays, only accepts arrows and fireworks).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4769</id>
	<key><![CDATA[Sets the player's list name. Colors are supported and setting the name to %s resets it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4770</id>
	<key><![CDATA[Sets the list of trades the specified merchant can use to the provided array of TradeArrays. The specifier can be the UUID of a physical entity or the ID of a user-created virtual merchant.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4771</id>
	<key><![CDATA[TradeArrays are similar to RecipeArray format and contain the following keys:  Example 1: Turns 9 stone into obsidian.  Example 2: Combines a diamond and dirt to make grass, but only once.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4772</id>
	<key><![CDATA[Registers a metadata value in the given object with the given key. object can be a location array (it will designate a block), an entityID (it will designate an entity) or a string (it will designate a world). If only the key and the value are given, the object is the current player. You can specify the plugin that will own the metadata, 'MethodScript' by default. See get_metadata() for more informations about Bukkit metadata.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4773</id>
	<key><![CDATA[Adds one, or modifies an existing, potion effect on a mob. The potionEffect can be SLOWNESS, INVISIBILITY, SLOW_FALLING, BAD_OMEN, WEAKNESS, DOLPHINS_GRACE, INSTANT_DAMAGE, MINING_FATIGUE, SPEED, WITHER, LUCK, FIRE_RESISTANCE, WATER_BREATHING, GLOWING, ABSORPTION, HUNGER, BAD_LUCK, HERO_OF_THE_VILLAGE, REGENERATION, STRENGTH, BLINDNESS, LEVITATION, CONDUIT_POWER, JUMP_BOOST, POISON, NAUSEA, RESISTANCE, HEALTH_BOOST, NIGHT_VISION, INSTANT_HEALTH, HASTE, or SATURATION. It also accepts an integer corresponding to the effect id listed on the Minecraft wiki. Strength is an integer representing the power level of the effect, starting at 0. Seconds defaults to 30.0. To remove an effect, set the seconds to 0. If seconds is less than 0 or greater than 107374182 a RangeException is thrown. Ambient takes a boolean of whether the particles should be more transparent. Particles takes a boolean of whether the particles should be visible at all. Icon takes a boolean for whether or not to show the icon to the entity if it's a player. The function returns whether or not the effect was modified.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4774</id>
	<key><![CDATA[Takes an associative array with keys representing equipment slots and values of itemArrays, the same used by set_pinv. This does not work on most "dumb" entities, only mobs (entities with AI). Unless a mod, plugin, or future update changes vanilla functionality, only humanoid mobs will render their equipment slots. The equipment slots are: WEAPON, OFF_HAND, BOOTS, LEGGINGS, CHESTPLATE, or HELMET]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4775</id>
	<key><![CDATA[Sets the tameable mob to the specified player. Offline players are supported, but this means that partial matches are NOT supported. You must type the player's name exactly. Setting the player to %s will untame the mob.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4776</id>
	<key><![CDATA[Sets the visibility of a mob's custom name. True means it will be visible from a distance, like a playername. False means it will only be visible when near the mob.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4777</id>
	<key><![CDATA[Sets the display name and/or slot of the given objective. If arg 2 is not an array, it is assumed to be the displayname, otherwise arg 2 should be an array with keys 'displayname' and/or 'slot', affecting their respective properties. A %s name resets it to the actual name, and %s slot removes it from all displays. Slot can be one of: BELOW_NAME, PLAYER_LIST, or SIDEBAR If the displayname is too long, a LengthException will be thrown. The max length may differ based on server implementation, but will probably be 128.. Scoreboard defaults to 'main' if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4778</id>
	<key><![CDATA[Sets the ban flag for the specified player. This will work with offline players, but the name must be exact. When banning, a reason message may be provided that the player will see when attempting to login. An optional source may also be provided that indicates who or what banned the player. At this time, this function only works with the vanilla ban system. If you use a third party ban system, you should instead run the command for that plugin instead.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4779</id>
	<key><![CDATA[Sets the player's cooldown time for the specified item type. The cooldown must be a positive integer representing server ticks.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4780</id>
	<key><![CDATA[Remove poison from yourself]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4781</id>
	<key><![CDATA[Make player ArenaPlayer unable to jump for 10 minutes]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4782</id>
	<key><![CDATA[Give player Notch nausea for 30 seconds]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4783</id>
	<key><![CDATA[Sets a player's enderchest's inventory to the specified inventory object. An inventory object is one that matches what is returned by penderchest(), so set_penderchest(penderchest()), while pointless, would be a correct call.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4784</id>
	<key><![CDATA[The array must be associative,  however, it may skip items, in which case, only the specified values will be changed. If a key is out of range, or otherwise improper, a warning is emitted, and it is skipped, but the function will not fail as a whole. A simple way to set one item in a player's enderchest would be: set_penderchest(array(2: array(type: 1, qty: 64))) This sets the chest's second slot to be a stack of stone. set_penderchest(array(103: array(type: 298))) gives them a hat. Note that this uses the unsafe enchantment mechanism to add enchantments, so any enchantment value will work.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4785</id>
	<key><![CDATA[Sets a player's fly speed. The speed must be between -1.0 and 1.0. The default player fly speed is 0.1.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4786</id>
	<key><![CDATA[Sets the player's food level. This is an integer from 0-?]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4787</id>
	<key><![CDATA[Sets the player's health. Health should be a double between 0 and their max health, which is 20.0 by default.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4788</id>
	<key><![CDATA[Sets a player's hunger level, where 0 is empty and 20 is full.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4789</id>
	<key><![CDATA[An inventory array must be associative, however, it may skip items, in which case, only the specified values will be changed. If a key is out of range, or otherwise improper, a warning is emitted, and it is skipped, but the function will not fail as a whole. A simple way to set one item in a player's inventory would be: set_pinv(player(), 2, array(name: STONE, qty: 64)). This sets the player's second slot to be a stack of stone. set_pinv(array(103: array(type: 298))) gives them a hat. To set the item in hand, use something like set_pinv(player(), %s, array(type: 298)). If you set a %s key in an inventory array, only one of the items will be used (which one is undefined). Use an index of -106 to set the item in the player's off-hand.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4790</id>
	<key><![CDATA[Sets a player's inventory to the specified inventory array. An inventory array is one that matches what is returned by pinv(), so set_pinv(pinv()), while pointless, would be a correct call. If a slot is specified as the second argument, only that slot is set with the given item array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4791</id>
	<key><![CDATA[Sets the player's game mode. Mode must be one of: SURVIVAL, CREATIVE, ADVENTURE, or SPECTATOR]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4792</id>
	<key><![CDATA[Set's the player's food saturation level. If this is above 0.0 and the player's health is below max, the player will experience fast health regeneration.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4793</id>
	<key><![CDATA[Sets the player's score for the given objective. The name can be anything, not just player names. A LengthException is thrown if it's too long. The max length may differ based on server implementation, but will probably be 128.Scoreboard defaults to 'main' if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4794</id>
	<key><![CDATA[Sets the scoreboard to be used by a player. The scoreboard argument is the id of a registered scoreboard. Scoreboard defaults to 'main' if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4795</id>
	<key><![CDATA[Sets the weather for the given player only. If downFall is true, the player will experience a storm. If downFall is %s, it will reset the player's visible weather to that which the player's world is experiencing.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4796</id>
	<key><![CDATA[Sets the time of a given player. Relative defaults to false, but if true, the time will be an offset and the player's time will still progress. Otherwise it will be locked and should be a number from 0 to 24000, else it is modulo scaled. Alternatively, common time notation (9:30pm, 4:00 am) is acceptable, and convenient english mappings also exist:%safternoon = 8000%sdawn = 22500%sday = 2000%sdusk = 13500%searlymorning = 20000%sevening = 12000%smidday = 6000%smidnight = 18000%smorning = 0%snight = 14000%snoon = 6000%ssunrise = 23000%ssunset = 13000]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4797</id>
	<key><![CDATA[Sets a player's velocity. vector must be an associative array with x, y, and z keys defined (if magnitude is set, it is ignored). If the vector's magnitude is greater than 10, the command is cancelled, because the server won't allow the player to move faster than that. A warning is issued, and false is returned if this happens, otherwise, true is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4798</id>
	<key><![CDATA[Sets a player's walk speed. The speed must be between -1.0 and 1.0. The default player walk speed is 0.2.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4799</id>
	<key><![CDATA[Sets the whitelist flag of the specified player. This will work with offline players, but the name must be exact.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4800</id>
	<key><![CDATA[Sets the text of the sign at the given location. If the block at x,y,z isn't a sign, a RangeException is thrown. If a text line cannot fit on the sign, it'll be cut off.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4801</id>
	<key><![CDATA[Sets the spawn of the world. Note that in some cases a plugin may override the spawn, and this method will do nothing. In that case, you should use the plugin's commands to set the spawn.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4802</id>
	<key><![CDATA[The type may be one of either AREA_EFFECT_CLOUD, ARMOR_STAND, ARROW, BAT, BLAZE, BOAT, CAT, CAVE_SPIDER, CHICKEN, COD, COW, CREEPER, DOLPHIN, DRAGON_FIREBALL, DROPPED_ITEM, DROWNED, DONKEY, EGG, ELDER_GUARDIAN, ENDERMAN, ENDERMITE, ENDER_CRYSTAL, ENDER_DRAGON, ENDER_EYE, ENDER_PEARL, EVOKER, EVOKER_FANGS, EXPERIENCE_ORB, FALLING_BLOCK, FIREBALL, FIREWORK, FISHING_HOOK, FOX, GHAST, GIANT, GUARDIAN, HORSE, HUSK, ILLUSIONER, IRON_GOLEM, ITEM_FRAME, LLAMA, LLAMA_SPIT, LEASH_HITCH, LIGHTNING, LINGERING_POTION, MAGMA_CUBE, MINECART, MINECART_CHEST, MINECART_COMMAND, MINECART_FURNACE, MINECART_HOPPER, MINECART_MOB_SPAWNER, MINECART_TNT, MULE, MUSHROOM_COW, OCELOT, PAINTING, PANDA, PARROT, PHANTOM, PIG, PIG_ZOMBIE, PILLAGER, PLAYER, POLAR_BEAR, PRIMED_TNT, PUFFERFISH, RABBIT, RAVAGER, SALMON, SHEEP, SILVERFISH, SKELETON, SHULKER, SHULKER_BULLET, SKELETON_HORSE, SLIME, SMALL_FIREBALL, SNOWBALL, SNOWMAN, SQUID, SPECTRAL_ARROW, SPIDER, SPLASH_POTION, STRAY, THROWN_EXP_BOTTLE, TIPPED_ARROW, TRADER_LLAMA, TRIDENT, TROPICAL_FISH, TURTLE, VEX, VILLAGER, VINDICATOR, WANDERING_TRADER, WITCH, WITHER, WITHER_SKELETON, WITHER_SKULL, WOLF, ZOMBIE, ZOMBIE_HORSE, ZOMBIE_VILLAGER, or UNKNOWN]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4803</id>
	<key><![CDATA[Sets the mob spawner's entity type at the location specified. If the location is not a mob spawner, or if the type is invalid, a FormatException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4804</id>
	<key><![CDATA[Demonstrates completion suggestions for multiple arguments.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4805</id>
	<key><![CDATA[If the prefix, suffix, or displayname is too long, a LengthException will be thrown. The max length may differ based on server implementation, but will probably be 64, 64, 128 respectively. Null name resets it to the actual name, and %s prefix or suffix removes it from all displays. Color can be one of §0, §1, §2, §3, §4, §5, §6, §7, §8, §9, §a, §b, §c, §d, §e, §f, §k, §l, §m, §n, §o or §r. Scoreboard defaults to 'main' if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4806</id>
	<key><![CDATA[Sets the display name, color, prefix, and/or suffix of the given team. If arg 2 is not an array, it is assumed to be the displayname, otherwise arg 2 should be an array with keys 'displayname', 'color', 'prefix', and/or 'suffix', affecting their respective properties.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4807</id>
	<key><![CDATA[Sets various options about the team from an array. The keys 'friendlyfire' and 'friendlyinvisibles' must be booleans. The keys 'collisionrule',  'nametagvisibility', and 'deathmessagevisibility' must be one of ALWAYS, FOR_OTHER_TEAMS, FOR_OWN_TEAM, or NEVER.Scoreboard defaults to 'main' if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4808</id>
	<key><![CDATA[If %s is returned, the default handling will occur. If false is returned, it will be "escalated" which in the current implementation is the same as returning %s (this will be used in the future). If true is returned, then default action will not occur, as it is assumed you have handled it. Only one exception handler can be registered at this time. If code inside the closure generates it's own exception, this will be handled by displaying both exceptions. To prevent this, you could put a try() block around the whole code block, but it is highly recommended you do not supress this. It is possible to completely supress all runtime exceptions using this method, but it is highly recommended that you still have a generic logging mechanism, perhaps to console, so you don't "lose" your exceptions, and fail to realize anything is wrong.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4809</id>
	<key><![CDATA[Sets the uncaught exception handler, returning the currently set one, or %s if none has been set yet. If code throws an exception, instead of doing the default (displaying the error to the user/console) it will run your code instead. The exception that was thrown will be passed to the closure, and it is expected that the closure returns either %s, true, or false.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4810</id>
	<key><![CDATA[Updates the world's border with the given values. In addition to the keys returned by get_world_border(), you can also specify the "seconds". This is time in which the border will move from the previous width to the new "width".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4811</id>
	<key><![CDATA[Alternatively, common time notation (9:30pm, 4:00 am) is acceptable, and convenient english mappings also exist:%safternoon = 8000%sdawn = 22500%sday = 2000%sdusk = 13500%searlymorning = 20000%sevening = 12000%smidday = 6000%smidnight = 18000%smorning = 0%snight = 14000%snoon = 6000%ssunrise = 23000%ssunset = 13000]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4812</id>
	<key><![CDATA[Sets the time of a given world. Should be a number from 0 to 24000, if not, it is modulo scaled.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4813</id>
	<key><![CDATA[Basic usage with array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4814</id>
	<key><![CDATA[Changing the working directory]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4815</id>
	<key><![CDATA[Basic usage with string]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4816</id>
	<key><![CDATA[Runs a shell command. %scommand%s can be either a string, or array of string arguments. This works mostly like %s however, it buffers then returns the output for sysout once the process is completed, and throws a ShellException with the exception message set to the syserr output if the process exits with an exit code that isn't the expectedExitCode, which defaults to 0. This is useful for simple commands that return output and don't need very complicated usage, and failures don't need to check the exact error code. If the underlying command throws an IOException, it is passed through. Requires the allow-shell-commands option to be enabled in preferences, or run from command line, otherwise an InsufficientPermissionException is thrown. Options is an associative array which expects zero or more of the following options: expectedErrorCode - The expected error code indicating successful command completion. Defaults to 0. workingDir - Sets the working directory for the sub process. By default %s, which represents the directory of this script. If the path is relative, it is relative to the directory of this script.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4817</id>
	<key><![CDATA[stdout]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4818</id>
	<key><![CDATA[workingDir]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4819</id>
	<key><![CDATA[Sets the working directory for the sub process. By default %s, which represents the directory of this script. If the path is relative, it is relative to the directory of this script.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4820</id>
	<key><![CDATA[stderr]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4821</id>
	<key><![CDATA[subshell]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4822</id>
	<key><![CDATA[Runs a shell command. %scommand%s can either be a string or an array of string arguments, which are run as an external process. Requires the allow-shell-commands option to be enabled in preferences, or run from command line, otherwise an InsufficientPermissionException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4823</id>
	<key><![CDATA[A boolean. If true, the process will not block, and script execution will continue. If false (default) script execution will halt until the process exits.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4824</id>
	<key><![CDATA[options%s is an associative array with zero or more of the following options:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4825</id>
	<key><![CDATA[A closure which receives the program output to stdout line by line. The closure should accept a single string, which will be a line.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4826</id>
	<key><![CDATA[A closure which is triggered one time, and contains the process's exit code, once it terminates.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4827</id>
	<key><![CDATA[A closure which receives the program output to stderr line by line. The closure should accept a single string, which should be a line.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4828</id>
	<key><![CDATA[Executes the command if and only if on the given operating system (one of WINDOWS, MAC, LINUX, SOLARIS, or UNKNOWN). If not on the specified OS, this command returns %s. The os argument may be a pipe seperated list of OSes, for instance 'MAC|LINUX', which is useful given that both are unix based, and often times the same command will work for both. Otherwise completely equivalent to %s. This is useful, because usually a command is tailored to a specific OS, and simply won't run on other OSes. This allows you to create similar commands across various OSes, and ensure that they only run for the correct OS.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4829</id>
	<key><![CDATA[Mac OS usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4830</id>
	<key><![CDATA[Unix usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4831</id>
	<key><![CDATA[Delete a file on all OSes]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4832</id>
	<key><![CDATA[Windows batch file]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4833</id>
	<key><![CDATA[Executes the command if and only if on the given operating system (one of WINDOWS, MAC, LINUX, SOLARIS, or UNKNOWN). If not on the specified OS, this command does nothing. The os argument may be a pipe seperated list of OSes, for instance 'MAC|LINUX', which is useful given that both are unix based, and often times the same command will work for both. Otherwise completely equivalent to %s. This is useful, because usually a command is tailored to a specific OS, and simply won't run on other OSes. This allows you to create similar commands across various OSes, and ensure that they only run for the correct OS.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4834</id>
	<key><![CDATA[Shows the enderchest of either the current player  or the specified player if given. If a second player is specified, shows the second player the contents of the first player's enderchest.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4835</id>
	<key><![CDATA[Text: For formatting, if the number of pattern letters is 4 or more, the full form is used; otherwise a short or abbreviated form is used if available. For parsing, both forms are accepted, independent of the number of pattern letters.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4836</id>
	<key><![CDATA[Computer readable format]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4837</id>
	<key><![CDATA[Month]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4838</id>
	<key><![CDATA[Hours:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4839</id>
	<key><![CDATA[Long format]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4840</id>
	<key><![CDATA[AD]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4841</id>
	<key><![CDATA[Returns a date of the current time (or the time specified) in the format you give.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4842</id>
	<key><![CDATA[RFC 822 time zone: For formatting, the RFC 822 4-digit time zone format is used:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4843</id>
	<key><![CDATA[Usage with quoted letters]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4844</id>
	<key><![CDATA[With alternate timezone]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4845</id>
	<key><![CDATA[Year: If the formatter's Calendar is the Gregorian calendar, the following rules are applied.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4846</id>
	<key><![CDATA[Date and time formats are specified by date and time pattern strings. Within date and time pattern strings, unquoted letters from 'A' to 'Z' and from 'a' to 'z' are interpreted as pattern letters representing the components of a date or time string. Text can be quoted using single quotes (') to a%s interpretation. \''\ represents a single quote. All other characters are not interpreted; they're simply copied into the output string during formatting or matched against the input string during parsing. The following pattern letters are defined (all other characters from 'A' to 'Z' and from 'a' to 'z' are reserved, and a FormatException will be thrown if they are used improperly):]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4847</id>
	<key><![CDATA[For formatting, if the number of pattern letters is 2, the year is truncated to 2 digits; otherwise it is interpreted as a number.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4848</id>
	<key><![CDATA[TwoDigitHours:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4849</id>
	<key><![CDATA[For parsing, if the number of pattern letters is more than 2, the year is interpreted literally, regardless of the number of digits. So using the pattern "MM/dd/yyyy", "01/11/12" parses to Jan 11, 12 A.D.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4850</id>
	<key><![CDATA[Second in minute]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4851</id>
	<key><![CDATA[Number: For formatting, the number of pattern letters is the minimum number of digits, and shorter numbers are zero-padded to this amount. For parsing, the number of pattern letters is ignored unless it's needed to separate two adjacent fields.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4852</id>
	<key><![CDATA[Week in year]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4853</id>
	<key><![CDATA[Month: If the number of pattern letters is 3 or more, the month is interpreted as text; otherwise, it is interpreted as a number.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4854</id>
	<key><![CDATA[Day in week]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4855</id>
	<key><![CDATA[D]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4856</id>
	<key><![CDATA[F]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4857</id>
	<key><![CDATA[Pattern letters are usually repeated, as their number determines the exact presentation:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4858</id>
	<key><![CDATA[G]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4859</id>
	<key><![CDATA[Sign TwoDigitHours Minutes]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4860</id>
	<key><![CDATA[H]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4861</id>
	<key><![CDATA[K]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4862</id>
	<key><![CDATA[M]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4863</id>
	<key><![CDATA[Millisecond]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4864</id>
	<key><![CDATA[S]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4865</id>
	<key><![CDATA[W]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4866</id>
	<key><![CDATA[Z]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4867</id>
	<key><![CDATA[With timezone]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4868</id>
	<key><![CDATA[Week in month]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4869</id>
	<key><![CDATA[a]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4870</id>
	<key><![CDATA[d]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4871</id>
	<key><![CDATA[Hour in day (1-24)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4872</id>
	<key><![CDATA[h]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4873</id>
	<key><![CDATA[Text]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4874</id>
	<key><![CDATA[k]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4875</id>
	<key><![CDATA[m]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4876</id>
	<key><![CDATA[For parsing with the abbreviated year pattern ("y" or "yy"), SimpleDateFormat must interpret the abbreviated year relative to some century. It does this by adjusting dates to be within 80 years before and 20 years after the time the SimpleDateFormat instance is created. For example, using a pattern of "MM/dd/yy" and a SimpleDateFormat instance created on Jan 1, 1997, the string "01/11/12" would be interpreted as Jan 11, 2012 while the string "05/04/64" would be interpreted as May 4, 1964. During parsing, only strings consisting of exactly two digits, as defined by Character.isDigit(char), will be parsed into the default century. Any other numeric string, such as a one digit string, a three or more digit string, or a two digit string that isn't all digits (for example, "-1"), is interpreted literally. So "01/02/3" or "01/02/003" are parsed, using the same pattern, as Jan 2, 3 AD. Likewise, "01/02/-3" is parsed as Jan 2, 4 BC. Otherwise, calendar system specific forms are applied. For both formatting and parsing, if the number of pattern letters is 4 or more, a calendar specific long form is used. Otherwise, a calendar specific short or abbreviated form is used.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4877</id>
	<key><![CDATA[ACT, AET, AGT, ART, AST, Africa/Abidjan, Africa/Accra, Africa/Addis_Ababa, Africa/Algiers, Africa/Asmara, Africa/Asmera, Africa/Bamako, Africa/Bangui, Africa/Banjul, Africa/Bissau, Africa/Blantyre, Africa/Brazzaville, Africa/Bujumbura, Africa/Cairo, Africa/Casablanca, Africa/Ceuta, Africa/Conakry, Africa/Dakar, Africa/Dar_es_Salaam, Africa/Djibouti, Africa/Douala, Africa/El_Aaiun, Africa/Freetown, Africa/Gaborone, Africa/Harare, Africa/Johannesburg, Africa/Juba, Africa/Kampala, Africa/Khartoum, Africa/Kigali, Africa/Kinshasa, Africa/Lagos, Africa/Libreville, Africa/Lome, Africa/Luanda, Africa/Lubumbashi, Africa/Lusaka, Africa/Malabo, Africa/Maputo, Africa/Maseru, Africa/Mbabane, Africa/Mogadishu, Africa/Monrovia, Africa/Nairobi, Africa/Ndjamena, Africa/Niamey, Africa/Nouakchott, Africa/Ouagadougou, Africa/Porto-Novo, Africa/Sao_Tome, Africa/Timbuktu, Africa/Tripoli, Africa/Tunis, Africa/Windhoek, America/Adak, America/Anchorage, America/Anguilla, America/Antigua, America/Araguaina, America/Argentina/Buenos_Aires, America/Argentina/Catamarca, America/Argentina/ComodRivadavia, America/Argentina/Cordoba, America/Argentina/Jujuy, America/Argentina/La_Rioja, America/Argentina/Mendoza, America/Argentina/Rio_Gallegos, America/Argentina/Salta, America/Argentina/San_Juan, America/Argentina/San_Luis, America/Argentina/Tucuman, America/Argentina/Ushuaia, America/Aruba, America/Asuncion, America/Atikokan, America/Atka, America/Bahia, America/Bahia_Banderas, America/Barbados, America/Belem, America/Belize, America/Blanc-Sablon, America/Boa_Vista, America/Bogota, America/Boise, America/Buenos_Aires, America/Cambridge_Bay, America/Campo_Grande, America/Cancun, America/Caracas, America/Catamarca, America/Cayenne, America/Cayman, America/Chicago, America/Chihuahua, America/Coral_Harbour, America/Cordoba, America/Costa_Rica, America/Creston, America/Cuiaba, America/Curacao, America/Danmarkshavn, America/Dawson, America/Dawson_Creek, America/Denver, America/Detroit, America/Dominica, America/Edmonton, America/Eirunepe, America/El_Salvador, America/Ensenada, America/Fort_Nelson, America/Fort_Wayne, America/Fortaleza, America/Glace_Bay, America/Godthab, America/Goose_Bay, America/Grand_Turk, America/Grenada, America/Guadeloupe, America/Guatemala, America/Guayaquil, America/Guyana, America/Halifax, America/Havana, America/Hermosillo, America/Indiana/Indianapolis, America/Indiana/Knox, America/Indiana/Marengo, America/Indiana/Petersburg, America/Indiana/Tell_City, America/Indiana/Vevay, America/Indiana/Vincennes, America/Indiana/Winamac, America/Indianapolis, America/Inuvik, America/Iqaluit, America/Jamaica, America/Jujuy, America/Juneau, America/Kentucky/Louisville, America/Kentucky/Monticello, America/Knox_IN, America/Kralendijk, America/La_Paz, America/Lima, America/Los_Angeles, America/Louisville, America/Lower_Princes, America/Maceio, America/Managua, America/Manaus, America/Marigot, America/Martinique, America/Matamoros, America/Mazatlan, America/Mendoza, America/Menominee, America/Merida, America/Metlakatla, America/Mexico_City, America/Miquelon, America/Moncton, America/Monterrey, America/Montevideo, America/Montreal, America/Montserrat, America/Nassau, America/New_York, America/Nipigon, America/Nome, America/Noronha, America/North_Dakota/Beulah, America/North_Dakota/Center, America/North_Dakota/New_Salem, America/Ojinaga, America/Panama, America/Pangnirtung, America/Paramaribo, America/Phoenix, America/Port-au-Prince, America/Port_of_Spain, America/Porto_Acre, America/Porto_Velho, America/Puerto_Rico, America/Punta_Arenas, America/Rainy_River, America/Rankin_Inlet, America/Recife, America/Regina, America/Resolute, America/Rio_Branco, America/Rosario, America/Santa_Isabel, America/Santarem, America/Santiago, America/Santo_Domingo, America/Sao_Paulo, America/Scoresbysund, America/Shiprock, America/Sitka, America/St_Barthelemy, America/St_Johns, America/St_Kitts, America/St_Lucia, America/St_Thomas, America/St_Vincent, America/Swift_Current, America/Tegucigalpa, America/Thule, America/Thunder_Bay, America/Tijuana, America/Toronto, America/Tortola, America/Vancouver, America/Virgin, America/Whitehorse, America/Winnipeg, America/Yakutat, America/Yellowknife, Antarctica/Casey, Antarctica/Davis, Antarctica/DumontDUrville, Antarctica/Macquarie, Antarctica/Mawson, Antarctica/McMurdo, Antarctica/Palmer, Antarctica/Rothera, Antarctica/South_Pole, Antarctica/Syowa, Antarctica/Troll, Antarctica/Vostok, Arctic/Longyearbyen, Asia/Aden, Asia/Almaty, Asia/Amman, Asia/Anadyr, Asia/Aqtau, Asia/Aqtobe, Asia/Ashgabat, Asia/Ashkhabad, Asia/Atyrau, Asia/Baghdad, Asia/Bahrain, Asia/Baku, Asia/Bangkok, Asia/Barnaul, Asia/Beirut, Asia/Bishkek, Asia/Brunei, Asia/Calcutta, Asia/Chita, Asia/Choibalsan, Asia/Chongqing, Asia/Chungking, Asia/Colombo, Asia/Dacca, Asia/Damascus, Asia/Dhaka, Asia/Dili, Asia/Dubai, Asia/Dushanbe, Asia/Famagusta, Asia/Gaza, Asia/Harbin, Asia/Hebron, Asia/Ho_Chi_Minh, Asia/Hong_Kong, Asia/Hovd, Asia/Irkutsk, Asia/Istanbul, Asia/Jakarta, Asia/Jayapura, Asia/Jerusalem, Asia/Kabul, Asia/Kamchatka, Asia/Karachi, Asia/Kashgar, Asia/Kathmandu, Asia/Katmandu, Asia/Khandyga, Asia/Kolkata, Asia/Krasnoyarsk, Asia/Kuala_Lumpur, Asia/Kuching, Asia/Kuwait, Asia/Macao, Asia/Macau, Asia/Magadan, Asia/Makassar, Asia/Manila, Asia/Muscat, Asia/Nicosia, Asia/Novokuznetsk, Asia/Novosibirsk, Asia/Omsk, Asia/Oral, Asia/Phnom_Penh, Asia/Pontianak, Asia/Pyongyang, Asia/Qatar, Asia/Qostanay, Asia/Qyzylorda, Asia/Rangoon, Asia/Riyadh, Asia/Saigon, Asia/Sakhalin, Asia/Samarkand, Asia/Seoul, Asia/Shanghai, Asia/Singapore, Asia/Srednekolymsk, Asia/Taipei, Asia/Tashkent, Asia/Tbilisi, Asia/Tehran, Asia/Tel_Aviv, Asia/Thimbu, Asia/Thimphu, Asia/Tokyo, Asia/Tomsk, Asia/Ujung_Pandang, Asia/Ulaanbaatar, Asia/Ulan_Bator, Asia/Urumqi, Asia/Ust-Nera, Asia/Vientiane, Asia/Vladivostok, Asia/Yakutsk, Asia/Yangon, Asia/Yekaterinburg, Asia/Yerevan, Atlantic/Azores, Atlantic/Bermuda, Atlantic/Canary, Atlantic/Cape_Verde, Atlantic/Faeroe, Atlantic/Faroe, Atlantic/Jan_Mayen, Atlantic/Madeira, Atlantic/Reykjavik, Atlantic/South_Georgia, Atlantic/St_Helena, Atlantic/Stanley, Australia/ACT, Australia/Adelaide, Australia/Brisbane, Australia/Broken_Hill, Australia/Canberra, Australia/Currie, Australia/Darwin, Australia/Eucla, Australia/Hobart, Australia/LHI, Australia/Lindeman, Australia/Lord_Howe, Australia/Melbourne, Australia/NSW, Australia/North, Australia/Perth, Australia/Queensland, Australia/South, Australia/Sydney, Australia/Tasmania, Australia/Victoria, Australia/West, Australia/Yancowinna, BET, BST, Brazil/Acre, Brazil/DeNoronha, Brazil/East, Brazil/West, CAT, CET, CNT, CST, CST6CDT, CTT, Canada/Atlantic, Canada/Central, Canada/Eastern, Canada/Mountain, Canada/Newfoundland, Canada/Pacific, Canada/Saskatchewan, Canada/Yukon, Chile/Continental, Chile/EasterIsland, Cuba, EAT, ECT, EET, EST, EST5EDT, Egypt, Eire, Etc/GMT, Etc/GMT+0, Etc/GMT+1, Etc/GMT+10, Etc/GMT+11, Etc/GMT+12, Etc/GMT+2, Etc/GMT+3, Etc/GMT+4, Etc/GMT+5, Etc/GMT+6, Etc/GMT+7, Etc/GMT+8, Etc/GMT+9, Etc/GMT-0, Etc/GMT-1, Etc/GMT-10, Etc/GMT-11, Etc/GMT-12, Etc/GMT-13, Etc/GMT-14, Etc/GMT-2, Etc/GMT-3, Etc/GMT-4, Etc/GMT-5, Etc/GMT-6, Etc/GMT-7, Etc/GMT-8, Etc/GMT-9, Etc/GMT0, Etc/Greenwich, Etc/UCT, Etc/UTC, Etc/Universal, Etc/Zulu, Europe/Amsterdam, Europe/Andorra, Europe/Astrakhan, Europe/Athens, Europe/Belfast, Europe/Belgrade, Europe/Berlin, Europe/Bratislava, Europe/Brussels, Europe/Bucharest, Europe/Budapest, Europe/Busingen, Europe/Chisinau, Europe/Copenhagen, Europe/Dublin, Europe/Gibraltar, Europe/Guernsey, Europe/Helsinki, Europe/Isle_of_Man, Europe/Istanbul, Europe/Jersey, Europe/Kaliningrad, Europe/Kiev, Europe/Kirov, Europe/Lisbon, Europe/Ljubljana, Europe/London, Europe/Luxembourg, Europe/Madrid, Europe/Malta, Europe/Mariehamn, Europe/Minsk, Europe/Monaco, Europe/Moscow, Europe/Nicosia, Europe/Oslo, Europe/Paris, Europe/Podgorica, Europe/Prague, Europe/Riga, Europe/Rome, Europe/Samara, Europe/San_Marino, Europe/Sarajevo, Europe/Saratov, Europe/Simferopol, Europe/Skopje, Europe/Sofia, Europe/Stockholm, Europe/Tallinn, Europe/Tirane, Europe/Tiraspol, Europe/Ulyanovsk, Europe/Uzhgorod, Europe/Vaduz, Europe/Vatican, Europe/Vienna, Europe/Vilnius, Europe/Volgograd, Europe/Warsaw, Europe/Zagreb, Europe/Zaporozhye, Europe/Zurich, GB, GB-Eire, GMT, GMT0, Greenwich, HST, Hongkong, IET, IST, Iceland, Indian/Antananarivo, Indian/Chagos, Indian/Christmas, Indian/Cocos, Indian/Comoro, Indian/Kerguelen, Indian/Mahe, Indian/Maldives, Indian/Mauritius, Indian/Mayotte, Indian/Reunion, Iran, Israel, JST, Jamaica, Japan, Kwajalein, Libya, MET, MIT, MST, MST7MDT, Mexico/BajaNorte, Mexico/BajaSur, Mexico/General, NET, NST, NZ, NZ-CHAT, Navajo, PLT, PNT, PRC, PRT, PST, PST8PDT, Pacific/Apia, Pacific/Auckland, Pacific/Bougainville, Pacific/Chatham, Pacific/Chuuk, Pacific/Easter, Pacific/Efate, Pacific/Enderbury, Pacific/Fakaofo, Pacific/Fiji, Pacific/Funafuti, Pacific/Galapagos, Pacific/Gambier, Pacific/Guadalcanal, Pacific/Guam, Pacific/Honolulu, Pacific/Johnston, Pacific/Kiritimati, Pacific/Kosrae, Pacific/Kwajalein, Pacific/Majuro, Pacific/Marquesas, Pacific/Midway, Pacific/Nauru, Pacific/Niue, Pacific/Norfolk, Pacific/Noumea, Pacific/Pago_Pago, Pacific/Palau, Pacific/Pitcairn, Pacific/Pohnpei, Pacific/Ponape, Pacific/Port_Moresby, Pacific/Rarotonga, Pacific/Saipan, Pacific/Samoa, Pacific/Tahiti, Pacific/Tarawa, Pacific/Tongatapu, Pacific/Truk, Pacific/Wake, Pacific/Wallis, Pacific/Yap, Poland, Portugal, ROK, SST, Singapore, SystemV/AST4, SystemV/AST4ADT, SystemV/CST6, SystemV/CST6CDT, SystemV/EST5, SystemV/EST5EDT, SystemV/HST10, SystemV/MST7, SystemV/MST7MDT, SystemV/PST8, SystemV/PST8PDT, SystemV/YST9, SystemV/YST9YDT, Turkey, UCT, US/Alaska, US/Aleutian, US/Arizona, US/Central, US/East-Indiana, US/Eastern, US/Hawaii, US/Indiana-Starke, US/Michigan, US/Mountain, US/Pacific, US/Pacific-New, US/Samoa, UTC, Universal, VST, W-SU, WET or Zulu]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4878</id>
	<key><![CDATA[Year]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4879</id>
	<key><![CDATA[w]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4880</id>
	<key><![CDATA[y]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4881</id>
	<key><![CDATA[z]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4882</id>
	<key><![CDATA[Hour in am/pm (0-11)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4883</id>
	<key><![CDATA[Day in year]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4884</id>
	<key><![CDATA[With milliseconds]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4885</id>
	<key><![CDATA[General time zone: Time zones are interpreted as text if they have names. For time zones representing a GMT offset value, the following syntax is used:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4886</id>
	<key><![CDATA[Month in year]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4887</id>
	<key><![CDATA[Digit Digit TwoDigitHours must be between 00 and 23. Other definitions are as for general time zones. For parsing, general time zones are also accepted.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4888</id>
	<key><![CDATA[GMT Sign Hours : Minutes]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4889</id>
	<key><![CDATA[Sign: one of]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4890</id>
	<key><![CDATA[Pacific Standard Time; PST; GMT-08:00]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4891</id>
	<key><![CDATA[Digit Digit]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4892</id>
	<key><![CDATA[With 5 digit year]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4893</id>
	<key><![CDATA[Am/pm marker]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4894</id>
	<key><![CDATA[Hour in am/pm (1-12)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4895</id>
	<key><![CDATA[0 1 2 3 4 5 6 7 8 9 Hours must be between 0 and 23, and Minutes must be between 00 and 59. The format is locale independent and digits must be taken from the Basic Latin block of the Unicode standard. For parsing, RFC 822 time zones are also accepted.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4896</id>
	<key><![CDATA[GMTOffsetTimeZone:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4897</id>
	<key><![CDATA[General time zone]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4898</id>
	<key><![CDATA[Day of week in month]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4899</id>
	<key><![CDATA[July; Jul; 07]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4900</id>
	<key><![CDATA[Minute in hour]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4901</id>
	<key><![CDATA[Adding a single quote]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4902</id>
	<key><![CDATA[Hour in day (0-23)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4903</id>
	<key><![CDATA[Digit: one of]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4904</id>
	<key><![CDATA[RFC 822 time zone]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4905</id>
	<key><![CDATA[Era designator]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4906</id>
	<key><![CDATA[Time zone]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4907</id>
	<key><![CDATA[Number]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4908</id>
	<key><![CDATA[RFC822TimeZone:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4909</id>
	<key><![CDATA[Long format with alternate locale]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4910</id>
	<key><![CDATA[Specifying alternate time]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4911</id>
	<key><![CDATA[Day in month]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4912</id>
	<key><![CDATA[Minutes:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4913</id>
	<key><![CDATA[The timezone parameter can be specified as well, to change the timezone of the generated date. The default is to use the system's time. To bypass the time parameter, you can either send time()  (which is the default) or %s. Valid timezone values are:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4914</id>
	<key><![CDATA[Digit]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4915</id>
	<key><![CDATA[With simple timezone]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4916</id>
	<key><![CDATA[Tuesday; Tue]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4917</id>
	<key><![CDATA[PM]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4918</id>
	<key><![CDATA[Equivalent to not(sequals(val1, val2)). Operator syntax is also supported: @a !]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4919</id>
	<key><![CDATA[Applying entity attributes before adding it to the world.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4920</id>
	<key><![CDATA[Spawns the specified number of entities of the given type at the given location. Returns an array of entity UUIDs of what is spawned.  Qty defaults to 1 and location defaults to the location of the commandsender, if it is a block or player. If the commandsender is console, location must be supplied.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4921</id>
	<key><![CDATA[Entitytype can be one of AREA_EFFECT_CLOUD, ARMOR_STAND, ARROW, BAT, BLAZE, BOAT, CAT, CAVE_SPIDER, CHICKEN, COD, COW, CREEPER, DOLPHIN, DRAGON_FIREBALL, DROPPED_ITEM, DROWNED, DONKEY, EGG, ELDER_GUARDIAN, ENDERMAN, ENDERMITE, ENDER_CRYSTAL, ENDER_DRAGON, ENDER_EYE, ENDER_PEARL, EVOKER, EVOKER_FANGS, EXPERIENCE_ORB, FALLING_BLOCK, FIREBALL, FIREWORK, FOX, GHAST, GIANT, GUARDIAN, HORSE, HUSK, ILLUSIONER, IRON_GOLEM, ITEM_FRAME, LLAMA, LLAMA_SPIT, LEASH_HITCH, LIGHTNING, MAGMA_CUBE, MINECART, MINECART_CHEST, MINECART_COMMAND, MINECART_FURNACE, MINECART_HOPPER, MINECART_MOB_SPAWNER, MINECART_TNT, MULE, MUSHROOM_COW, OCELOT, PAINTING, PANDA, PARROT, PHANTOM, PIG, PIG_ZOMBIE, PILLAGER, POLAR_BEAR, PRIMED_TNT, PUFFERFISH, RABBIT, RAVAGER, SALMON, SHEEP, SILVERFISH, SKELETON, SHULKER, SHULKER_BULLET, SKELETON_HORSE, SLIME, SMALL_FIREBALL, SNOWBALL, SNOWMAN, SQUID, SPECTRAL_ARROW, SPIDER, SPLASH_POTION, STRAY, THROWN_EXP_BOTTLE, TRADER_LLAMA, TRIDENT, TROPICAL_FISH, TURTLE, VEX, VILLAGER, VINDICATOR, WANDERING_TRADER, WITCH, WITHER, WITHER_SKELETON, WITHER_SKULL, WOLF, ZOMBIE, ZOMBIE_HORSE or ZOMBIE_VILLAGER. FALLING_BLOCK will be always be sand with this function (see %s). DROPPED_ITEM will be dirt by default (see %s). A closure can be used as the last argument to modify the entity before adding it to the world. The entity's UUID is passed to the closure. FALLING_BLOCK does not support closures.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4922</id>
	<key><![CDATA[Spawns qty mob of one of the following types at location. qty defaults to 1, and location defaults to the location of the player. An array of the entity UUIDs spawned is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4923</id>
	<key><![CDATA[mobType can be one of: BAT, BLAZE, CAVESPIDER, CHICKEN, COW, CREEPER, DONKEY, ELDERGUARDIAN, ENDERDRAGON, ENDERMAN, ENDERMITE, EVOKER, GHAST, GIANT, GUARDIAN, HORSE, HUSK, ILLUSIONER, IRONGOLEM, LLAMA, MAGMACUBE, MOOSHROOM, MULE, MUSHROOMCOW, OCELOT, PARROT, PIG, PIGZOMBIE, POLARBEAR, RABBIT, SHEEP, SHULKER, SILVERFISH, SKELETON, SKELETONHORSE, SLIME, SNOWGOLEM, SNOWMAN, SPIDER, SPIDERJOCKEY, SQUID, STRAY, WITCH, WITHER, WITHERSKELETON, WOLF, VEX, VILLAGER, VINDICATOR, ZOMBIE, ZOMBIEHORSE, or ZOMBIEVILLAGER. Further, subtypes can be applied by specifying MOBTYPE:SUBTYPE, for example the sheep subtype can be any of the dye colors: WHITE, ORANGE, MAGENTA, LIGHT_BLUE, YELLOW, LIME, PINK, GRAY, LIGHT_GRAY, CYAN, PURPLE, BLUE, BROWN, GREEN, RED, or BLACK. COLOR defaults to white if not specified. For mobs with multiple subtypes, separate each type with a "-". Zombies can be any non-conflicting two of: BABY. Ocelots may be one of: BLACK_CAT, RED_CAT, SIAMESE_CAT, or WILD_OCELOT. Villagers can have a profession as a subtype: BUTCHER, FARMER, LIBRARIAN, NITWIT, ARMORER, CARTOGRAPHER, CLERIC, FISHERMAN, FLETCHER, LEATHERWORKER, MASON, NONE, SHEPHERD, TOOLSMITH, or WEAPONSMITH, defaulting to farmer if not specified. PigZombies' subtype represents their anger, and accepts an integer, where 0 is neutral and 400 is the normal response to being attacked. Defaults to 0. Similarly, Slime and MagmaCube size can be set by integer, otherwise will be a random natural size. If a material is specified as the subtype for Endermen, they will hold that material, otherwise they will hold nothing. Creepers can be set to POWERED. Wolves can be ANGRY or TAMED. Pigs can be SADDLED. Horses can have a color: BLACK, BROWN, CHESTNUT, CREAMY, DARK_BROWN, GRAY, or WHITE, and a pattern: NONE, SOCKS, WHITEFIELD, WHITE_DOTS, or BLACK_DOTS. If qty is larger than 10000, a RangeException will be thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4924</id>
	<key><![CDATA[The ITEM_CRACK particle can take an item array under the key "item".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4925</id>
	<key><![CDATA[Spawns particles at the specified location. The players parameter can be one player or an array of players. If none is given, all players within 32 meters will see the particle. The particle parameter can be a particle name or an associative array defining the characteristics of the particle to be spawned. The array requires the particle name under the key "particle".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4926</id>
	<key><![CDATA[The REDSTONE particle can take a color array (or name) under the key "color". If a block, item or color is provided for a particle type that doesn't support it, an IllegalArgumentException will be thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4927</id>
	<key><![CDATA[Possible particles: SMOKE_NORMAL, ENCHANTMENT_TABLE, REDSTONE, SNOW_SHOVEL, BUBBLE_COLUMN_UP, SPELL_MOB, CAMPFIRE_SIGNAL_SMOKE, BLOCK_DUST, SWEEP_ATTACK, WATER_SPLASH, LANDING_LAVA, SLIME, FALLING_LAVA, DRAGON_BREATH, CURRENT_DOWN, ITEM_CRACK, FALLING_DUST, SNEEZE, WATER_BUBBLE, FLASH, VILLAGER_ANGRY, HEART, END_ROD, CRIT_MAGIC, SUSPENDED, WATER_DROP, SPELL, FALLING_WATER, SPELL_INSTANT, LAVA, VILLAGER_HAPPY, SQUID_INK, CRIT, CLOUD, BUBBLE_POP, COMPOSTER, NAUTILUS, EXPLOSION_LARGE, TOWN_AURA, SUSPENDED_DEPTH, CAMPFIRE_COSY_SMOKE, NOTE, SNOWBALL, SPELL_MOB_AMBIENT, DAMAGE_INDICATOR, SMOKE_LARGE, TOTEM, BARRIER, EXPLOSION_NORMAL, FLAME, SPIT, PORTAL, MOB_APPEARANCE, DOLPHIN, SPELL_WITCH, DRIP_WATER, EXPLOSION_HUGE, WATER_WAKE, UNKNOWN, FIREWORKS_SPARK, DRIP_LAVA, or BLOCK_CRACK]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4928</id>
	<key><![CDATA[Some particles have more specific keys and/or special behavior, but the common keys for the particle array are "count" (usually the number of particles to be spawned), "speed" (usually the velocity of the particle), "xoffset", "yoffset", and "zoffset" (usually the ranges from center within which the particle may be offset on that axis). The BLOCK_DUST, BLOCK_CRACK and FALLING_DUST particles can take a block type name parameter under the key "block".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4929</id>
	<key><![CDATA[[[%s|CACHE_RETURN]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4930</id>
	<key><![CDATA[Split with limit]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4931</id>
	<key><![CDATA[Simple split on one character. Note that unlike reg_split, no escaping is needed on the period.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4932</id>
	<key><![CDATA[Split all characters]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4933</id>
	<key><![CDATA[Split with multiple characters]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4934</id>
	<key><![CDATA[Returns a string formatted to the given formatString specification, using the parameters passed in. The formatString should be formatted according to [%s this standard], with the caveat that the parameter types are automatically cast to the appropriate type, if possible. Calendar/time specifiers, (t and T) expect an integer which represents unix time, but are otherwise valid. All format specifiers in the documentation are valid. This works the same as lsprintf with the locale set to "DEFAULT".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4935</id>
	<key><![CDATA[Creates a new construct that is the "toString" of an item. For arrays, an human readable version is returned; this should not be used directly, as the format is not guaranteed to remain consistent. Booleans return "true" or "false" and %s returns "%s". Strings (and subclasses of strings) are simply returned as is.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4936</id>
	<key><![CDATA[Basic usage, showing performance benefits]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4937</id>
	<key><![CDATA[Returns true if the string needle is found anywhere within the string haystack. This is functionally equivalent to string_postion(@haystack, @needle) != -1, but is generally clearer.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4938</id>
	<key><![CDATA[Returns true if the string needle is found anywhere within the string haystack (while ignoring case). This is functionally equivalent to string_postion(to_lower(@haystack), to_lower(@needle)) != -1, but is generally clearer.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4939</id>
	<key><![CDATA[Determines if the provided teststring ends with the provided keyword. Note that this will cast both arguments to strings. This means that the boolean true will match the string 'true' or the integer 1 will match the string '1'. If an empty string is provided for the keyword, it will always return true.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4940</id>
	<key><![CDATA[Multiplies a string the given number of times. For instance, string_multiply('a', 3) returns 'aaa'. If the string is empty, an empty string is returned. If the string is %s, %s is returned. If times is 0, an empty string is returned. All other string values are multiplied accordingly. Providing a value less than 0 for times results in a RangeException.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4941</id>
	<key><![CDATA[String not found]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4942</id>
	<key><![CDATA[Determines if the provided teststring starts with the provided keyword. This could be used to find the prefix of a line, for instance. Note that this will cast both arguments to strings. This means that the boolean true will match the string 'true' or the integer 1 will match the string '1'. If an empty string is provided for the keyword, it will always return true.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4943</id>
	<key><![CDATA[If the indexes are too large]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4944</id>
	<key><![CDATA[Returns a substring of the given string str, starting from index begin, to index end, or the end of the string, if no index is given. If either begin or end are out of bounds of the string, an exception is thrown. substr('hamburger', 4, 8) returns "urge", substr('smiles', 1, 5) returns "mile", and substr('lightning', 5) returns "ning". See also length().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4945</id>
	<key><![CDATA[Demonstrates operator syntax]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4946</id>
	<key><![CDATA[Runs a single command for this user, as op. Works like runas(~op, '/command') used to work, before it was deprecated.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4947</id>
	<key><![CDATA[This is guaranteed to not allow the player to stay op, even if a fatal error occurs during the command. If this guarantee cannot be met, the function will simply fail. This guarantee only exists in CraftBukkit. Other server types may find that this function does not work at all, if that's the case, and you are ok with losing the deop guarantee, you can set use-sudo-fallback to true in your preferences. If the normal sudo functionality fails on your server then, it will actually fully op the player, run the command, then deop the player, however, this is less reliable than the normal sudo mechanism, and could potentially fail, leaving the player as op, so is not recommended. Enable that setting at your own risk.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4948</id>
	<key><![CDATA["Super Cancels" an event. This only will work if play-dirty is set to true. If an event is super cancelled, not only is the cancelled flag set to true, the event stops propagating down, so no other plugins (as in other server plugins, not just CH scripts) will receive the event at all  (other than monitor level plugins). This is useful for overridding event handlers for plugins that don't respect the cancelled flag. This function hooks into the play-dirty framework that injects custom event handlers into bukkit.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4949</id>
	<key><![CDATA[With multiple matches using an array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4950</id>
	<key><![CDATA[With default condition]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4951</id>
	<key><![CDATA[With braces/case/default]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4952</id>
	<key><![CDATA[With slices]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4953</id>
	<key><![CDATA[With slices in an array]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4954</id>
	<key><![CDATA[[[%s|OPTIMIZE_DYNAMIC]] %s [[%s|PRIORITY_OPTIMIZATION]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4955</id>
	<key><![CDATA[Provides a switch statement. If none of the conditions match, and no default is provided, %s is returned. See the documentation on [[%s|Logic]] for more information.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4956</id>
	<key><![CDATA[In addition, slices may be used to indicate ranges of integers that should trigger the specified case. Slices embedded in an array are fine as well. Switch statements also support brace/case/default syntax, as in most languages, althrough unlike most languages, fallthrough isn't supported. Breaking with break() isn't required, but recommended. A number greater than 1 may be sent to break, and breaking out of the switch will consume a "break counter" and the break will continue up the chain. If you do use break(), the return value of switch is ignored. See the examples for usage of brace/case/default syntax, which is highly recommended.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4957</id>
	<key><![CDATA[With braces/case/default. Note the lack of fallthrough, even without a break(), except where two cases are directly back to back.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4958</id>
	<key><![CDATA[Demonstrates two threads possibly overwriting eachother]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4959</id>
	<key><![CDATA[Demonstrates two threads modifying the same variable without the possibility of overwriting eachother because they are synchronized.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4960</id>
	<key><![CDATA[Synchronizes access to the code block for all calls (from different threads) with the same syncObject argument. This means that if two threads will call synchronized('example', &lt;code&gt;), the second call will hang the thread until the passed code of the first call has finished executing. If you call this function from within this function on the same thread using the same syncObject, the code will simply be executed. For more information about synchronization, see: %s(computer_science)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4961</id>
	<key><![CDATA[Writes the text to the system's std err. Unlike console(), this does not use anything else to format the output, though in many cases they will behave nearly the same. However, colors and other formatting characters will not "bleed" through, so sys_err(color(RED) . 'This is red') will not cause the next line to also be red, so if you need to print multiple lines out, you should manually add \n to create your linebreaks, and only make one call to sys_err.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4962</id>
	<key><![CDATA[Writes the text to the system's std out. Unlike console(), this does not use anything else to format the output, though in many cases they will behave the same. However, colors and other formatting characters will not "bleed" through, so sys_out(color(RED) . 'This is red') will not cause the next line to also be red, so if you need to print multiple lines out, you should manually add \n to create your linebreaks, and only make one call to sys_out.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4963</id>
	<key><![CDATA[Gets a single property]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4964</id>
	<key><![CDATA[If propertyName is set, that single property is returned, or %s if that property doesn't exist. If propertyName is not set, an associative array with all the system properties is returned. This mechanism hooks into Java's system property mechanism, and is just a wrapper for that. System properties are more reliable than environmental variables, and so are preferred in cases where they exist. For more information about system properties, see %s. In addition, known preferences listed in preferences.ini are also included, starting with the prefix "methodscript.preference."]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4965</id>
	<key><![CDATA[Gets all properties]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4966</id>
	<key><![CDATA[Works in reverse of add_to_inventory(), but returns the number of items actually taken, which will be from 0 to qty. Target must be a location array or entity UUID.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4967</id>
	<key><![CDATA[Tames any tameable mob to the specified player. Offline players are supported, but this means that partial matches are NOT supported. You must type the players name exactly. Setting the player to %s will untame the mob. If the entity doesn't exist, nothing happens.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4968</id>
	<key><![CDATA[Adds a player to a team, given the team exists. This allows you to add fake players with up to 40 characters. The player will be removed from any other team on the same scoreboard. Scoreboard defaults to 'main' if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4969</id>
	<key><![CDATA[Attempts to remove a player from a team, and returns true if successful, for false if the player was not part of the team.Scoreboard defaults to 'main' if not given.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4970</id>
	<key><![CDATA[Each task will be an associative array with the following properties:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4971</id>
	<key><![CDATA[Returns an array of currently running tasks.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4972</id>
	<key><![CDATA[Where the task was defined in code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4973</id>
	<key><![CDATA[The task type. This plus the id are the unique identifiers for a task. Extensions may add new task types, but the builtin tasks are: TIMEOUT, INTERVAL, CRON, EXECUTION, THREAD, and ASYNC_TASK]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4974</id>
	<key><![CDATA[The id of the currently running task. This is not a unique id necessarily, across all tasks, but will be unique across all tasks of this task type.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4975</id>
	<key><![CDATA[state]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4976</id>
	<key><![CDATA[The state of the task. Will be either REGISTERED, IDLE, RUNNING, FINISHED, or KILLED]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4977</id>
	<key><![CDATA[-| target]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4978</id>
	<key><![CDATA[An array of additional properties provided by the particular task type. May be empty (but not %s).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4979</id>
	<key><![CDATA[properties]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4980</id>
	<key><![CDATA[Attempts to kill the specified task. The taskType and id will be listed with the task in the task manager. If the task is already finished, doesn't exist, or already in the process of finishing, nothing happens.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4981</id>
	<key><![CDATA[Using binary value in source]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4982</id>
	<key><![CDATA[It is useful to note that all integers are stored internally by the computer as binary, but since we usually represent numbers in text as base 10 numbers, we often times forget that both base 16 'F' and base 10 '15' and base 2 '1111' are actually the same number, just represented differently as strings in different bases. This doesn't change how the program behaves, since the base is just a way to represent the number on paper. The 'radix' is the base. So, given to_radix(10, 10), that would return '10', because in code, we wrote out our value '10' in base 10, and we convert it to base 10, so nothing changes. However, if we write to_radix(15, 16) we are saying "convert the base 10 value 15 to base 16", so it returns 'F'. See %s for the opposite operation. The radix must be between 2 and 36, inclusive, or a range exception is thrown. This is because there are only 36 characters that are normally used to represent different base numbers (that is, 0-9, a-z). The minimum radix is 2, because it is impossible to represent any numbers with out at least a binary base.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4983</id>
	<key><![CDATA[Given an int and a radix, returns a string representation of the integer value in the given base. A common use would be to output a hex or binary representation of a number, for instance.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4984</id>
	<key><![CDATA[To a binary string]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4985</id>
	<key><![CDATA[Using hex value in source]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4986</id>
	<key><![CDATA[To a hex string]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4987</id>
	<key><![CDATA[This function works similar to a try-catch block in most languages. If the code in tryCode throws an exception, instead of killing the whole script, it stops running, and begins running the catchCode. var should be an ivariable, and it is set to an array containing information about the exception. Consider using try/catch blocks instead of the try function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4988</id>
	<key><![CDATA[If exceptionTypes is provided, it should be an array of exception types, or a single string that this try function is interested in. If the exception type matches one of the values listed, the exception will be caught, otherwise, the exception will continue up the stack. If exceptionTypes is missing, it will catch all exceptions. PLEASE NOTE! This function will not catch exceptions thrown by CommandHelper, only built in exceptions.  Please see [[%s|the wiki page on exceptions]] for more information about what possible  exceptions can be thrown and where, and examples.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4989</id>
	<key><![CDATA[Returns a string value of the typeof a value. For instance 'array' is returned for typeof(array()). This is a generic replacement for the is_* series of functions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4990</id>
	<key><![CDATA[Basic usage, typeof closure]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4991</id>
	<key><![CDATA[Basic usage, typeof string]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4992</id>
	<key><![CDATA[Basic usage, typeof double]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4993</id>
	<key><![CDATA[Basic usage, typeof int]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4994</id>
	<key><![CDATA[Unloads a chunk for a world using the x and z coordinates. The current player's world is used if one is not provided.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4995</id>
	<key><![CDATA[unregisters a command from the server's command list]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4996</id>
	<key><![CDATA[Updates the state for the specified boss bar. See create_bar() for available option keys and values for the optionsArray. If the second argument is a string, it'll use it to update the title. If it's a double, it'll use it to update the percentage filled (0.0 - 1.0).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4997</id>
	<key><![CDATA[Explicit RANDOM uuid]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4998</id>
	<key><![CDATA[NIL uuid]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>4999</id>
	<key><![CDATA[Returns a UUID (also known as a GUID). Different types of UUIDs can be generated, by default, if no parameters are provided, a random uuid is returned (version 4). For full details on what exactly a uuid is, and what the different versions are, see %s. The arg varies depending on the type, some types do not require an argument, in which case, this parameter will be ignored. %stype%s may be one of: - RANDOM - Returns a random UUID. This type takes 0 arguments. - NIL - Returns the nil UUID, that is 00000000-0000-0000-0000-000000000000. This type takes 0 arguments.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5000</id>
	<key><![CDATA[Typical usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5001</id>
	<key><![CDATA[While the condition is true, the code is executed. break and continue work inside a dowhile, but continuing more than once is pointless, since the loop isn't inherently keeping track of any counters anyways. Breaking multiple times still works however.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5002</id>
	<key><![CDATA[With a break]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5003</id>
	<key><![CDATA[[%stitle%s]%s, %s[%swidth%s]%s, %s[%sheight%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5004</id>
	<key><![CDATA[Creates a window with the specified title, width and height. All are optional parameters, and they default to reasonable defaults. The id, which represents the window can be used for  manipulating the window in future calls. The contents of the window will be blank. The window will initially not be visible. You'll need to call x_show_window to make it visible.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5005</id>
	<key><![CDATA[Returns a list of absolute paths of files whose name matches the given regex, searching recursively. Only available in cmdline mode.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5006</id>
	<key><![CDATA[HIDDEN]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5007</id>
	<key><![CDATA[Type may be a single value, or an array of values from the following list: %s'''%s''']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5008</id>
	<key><![CDATA[Only processes files, not directories.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5009</id>
	<key><![CDATA[Only processes files/folders that are hidden. Leave this off to ignore hidden files.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5010</id>
	<key><![CDATA[DIRECTORY]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5011</id>
	<key><![CDATA[FILE]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5012</id>
	<key><![CDATA[If the type is not specified, this is the same as specifying all types. If an empty array is used, this causes an error. If you wish to use the current directory as the starting point, use %s as startFrom. Note that if you only send two arguments to this function, the second one must be an array if it is the types (it may contain a single value).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5013</id>
	<key><![CDATA[Only processes directory names, not files.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5014</id>
	<key><![CDATA[Launches the desktop's default browser with the given url. On headless systems, this will throw an exception.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5015</id>
	<key><![CDATA[Reads and compiles specified *.ms files. This can be used for files already compiled with include(). Scripts that then include() these files will use the updated code. The path can be a directory or file. It is executed recursively through all subdirectories. If there's a compile error in any of the files, the function will throw an exception and other scripts will continue to use the previous version of the code when included. Returns number of files recompiled.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5016</id>
	<key><![CDATA[Sets a pixel in the specified window. x and y are relative to the top left of the window.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5017</id>
	<key><![CDATA[windowID, x, y, red, green, blue]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5018</id>
	<key><![CDATA[Shows (or hides, if "show" is false) the specified window.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5019</id>
	<key><![CDATA[windowID, %s[%sshow%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5020</id>
	<key><![CDATA[OVERWRITE]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5021</id>
	<key><![CDATA[Writes a file to the file system. This method only works from the cmdline, if not in cmdline, a SecurityExcpetion is thrown. Because of this, there is no check against the base-dir path.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5022</id>
	<key><![CDATA[Appends the content to the existing file.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5023</id>
	<key><![CDATA[APPEND]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5024</id>
	<key><![CDATA[Writes the content, but only if the file does not currently exist. If the file exists, an IOException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5025</id>
	<key><![CDATA[Overwrites the content in the given file.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5026</id>
	<key><![CDATA[The path, if relative, is relative to this script file. If the path already exists, and is a directory, an IOException is thrown. The content may be a string, in which case it is written out as UTF-8 text. It could also be a byte_array, in which cases it is written as is. Mode can be one of the following, but defaults to SAFE_WRITE: %s'''%s''']]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5027</id>
	<key><![CDATA[Reads a field from some xml using an XPath address. The XPath address is assumed to be absolute, even if it doesn't start with a '/'.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5028</id>
	<key><![CDATA[One of each]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5029</id>
	<key><![CDATA[Two false]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5030</id>
	<key><![CDATA[Two true values]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5031</id>
	<key><![CDATA[Both true]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5032</id>
	<key><![CDATA[Both false]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5033</id>
	<key><![CDATA[[%splayer,%s]%s slot]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5034</id>
	<key><![CDATA[[%splayer,%s]%s slot, ItemMetaArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5035</id>
	<key><![CDATA[Applies the data from the given array to the item at the specified slot. Unused fields will be ignored. If %s or an empty array is supplied, or if none of the given fields are applicable, the item will become default, as this function overwrites any existing data. See %s for available fields.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5036</id>
	<key><![CDATA[Returns an associative array of known item meta for the slot given, or %s if there isn&apos;t any. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5037</id>
	<key><![CDATA['''owner''' : (string) The player name.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5038</id>
	<key><![CDATA['''inventory''' : (array) An associative array with the slots for '''"fuel"''', '''"ingredient"''', '''"leftbottle"''', '''"middlebottle"''', and '''"rightbottle"'''.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5039</id>
	<key><![CDATA[Banners]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5040</id>
	<key><![CDATA['''inventory''' : (array) An associative array with the slots for '''"result"''', '''"fuel"''', and '''"smelting"'''.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5041</id>
	<key><![CDATA['''patterns''' : (array) An array of pattern arrays. Each can contain the keys '''"color"''' (one of ''WHITE, ORANGE, MAGENTA, LIGHT_BLUE, YELLOW, LIME, PINK, GRAY, LIGHT_GRAY, CYAN, PURPLE, BLUE, BROWN, GREEN, RED, or BLACK'') and '''"shape"''' (one of ''BASE, BORDER, BRICKS, CIRCLE_MIDDLE, CREEPER, CROSS, CURLY_BORDER, DIAGONAL_LEFT, DIAGONAL_LEFT_MIRROR, DIAGONAL_RIGHT, DIAGONAL_RIGHT_MIRROR, FLOWER, GLOBE, GRADIENT, GRADIENT_UP, HALF_HORIZONTAL, HALF_HORIZONTAL_MIRROR, HALF_VERTICAL, HALF_VERTICAL_MIRROR, MOJANG, RHOMBUS_MIDDLE, SKULL, SQUARE_BOTTOM_LEFT, SQUARE_BOTTOM_RIGHT, SQUARE_TOP_LEFT, SQUARE_TOP_RIGHT, STRAIGHT_CROSS, STRIPE_BOTTOM, STRIPE_CENTER, STRIPE_DOWNLEFT, STRIPE_DOWNRIGHT, STRIPE_LEFT, STRIPE_MIDDLE, STRIPE_RIGHT, STRIPE_SMALL, STRIPE_TOP, TRIANGLE_BOTTOM, TRIANGLE_TOP, TRIANGLES_BOTTOM, or TRIANGLES_TOP'').]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5042</id>
	<key><![CDATA['''inventory''' : (array) An array of item arrays, where each index is an inventory slot. (exceptions exist for furnaces and brewing stands; see below)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5043</id>
	<key><![CDATA['''enchants''' : (array) An associative array of enchantments with the vanilla name of enchantment as the key, and value being an enchantment array with the key '''"elevel"''' for the level of the enchantment.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5044</id>
	<key><![CDATA['''display''' : (string) The display name seen when the item is selected.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5045</id>
	<key><![CDATA[Below are the available fields in the item meta array. Fields can be %s when the item meta doesn't have that value (except in some cases where the type is an array).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5046</id>
	<key><![CDATA['''stored''' : (array) An associative array of enchantments, just like "enchants".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5047</id>
	<key><![CDATA[All Items]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5048</id>
	<key><![CDATA[Brewing Stands]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5049</id>
	<key><![CDATA[Returns an associative array of known item meta for the slot given, or %s if there isn't any.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5050</id>
	<key><![CDATA[Shields]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5051</id>
	<key><![CDATA[Demonstrates a written book (excluding generic meta)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5052</id>
	<key><![CDATA['''fuel''' : (int) The amount of fuel left.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5053</id>
	<key><![CDATA['''potions''' : (array) An array of custom potion effect arrays. Each can contain the keys: '''"id"''' (string), '''"strength"''' (int), '''"seconds"''' remaining (int), whether the effect is '''"ambient"''', whether '''"particles"''' are enabled, and whether the '''"icon"''' is shown to the player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5054</id>
	<key><![CDATA['''fishcolor''' : (string) The color of the fish, can be one of ''WHITE, ORANGE, MAGENTA, LIGHT_BLUE, YELLOW, LIME, PINK, GRAY, LIGHT_GRAY, CYAN, PURPLE, BLUE, BROWN, GREEN, RED, or BLACK''.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5055</id>
	<key><![CDATA[Firework Charges]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5056</id>
	<key><![CDATA['''projectiles''' : (array) An array of item arrays that are loaded in the crossbow. Items must be arrows or fireworks. When fired, the first item is the middle projectile. (maximum of three projectiles)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5057</id>
	<key><![CDATA['''firework''' : (array) An array with the keys '''"strength"''' (int), how long in seconds the rocket will last, and '''"effects"''', an array of effect arrays (see Firework Charges above).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5058</id>
	<key><![CDATA[Leather Armor]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5059</id>
	<key><![CDATA['''patterns''' : (array) See Banner "patterns" above.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5060</id>
	<key><![CDATA['''base''' : (array) Defines the base potion effect. Has the keys '''"extended"''', '''"upgraded"''', and '''"type"''' which can be: ''AWKWARD, FIRE_RESISTANCE, INSTANT_DAMAGE, INSTANT_HEAL, INVISIBILITY, JUMP, LUCK, MUNDANE, NIGHT_VISION, POISON, REGEN, SLOWNESS, SLOW_FALLING, SPEED, STRENGTH, THICK, TURTLE_MASTER, UNCRAFTABLE, WATER, WATER_BREATHING, or WEAKNESS''.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5061</id>
	<key><![CDATA['''unbreakable''' : (boolean) Whether or not the item can be damaged.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5062</id>
	<key><![CDATA[Enchanted Books]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5063</id>
	<key><![CDATA[Furnaces]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5064</id>
	<key><![CDATA['''cooktime''' : (int) The amount of time in ticks the item has been cooking for.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5065</id>
	<key><![CDATA['''repair''' : (int) The cost to repair or combine this item in an anvil.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5066</id>
	<key><![CDATA['''basecolor''' : (string) A color name, one of ''WHITE, ORANGE, MAGENTA, LIGHT_BLUE, YELLOW, LIME, PINK, GRAY, LIGHT_GRAY, CYAN, PURPLE, BLUE, BROWN, GREEN, RED, or BLACK''.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5067</id>
	<key><![CDATA[Demonstrates generic meta for an item in your main hand.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5068</id>
	<key><![CDATA[Tropical Fish Buckets]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5069</id>
	<key><![CDATA[Crossbows]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5070</id>
	<key><![CDATA['''fishpatterncolor''' : (string) The color of the pattern on the fish.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5071</id>
	<key><![CDATA['''effect''' : (array) A firework effect array, can have the keys '''"flicker"''' (boolean), '''"trail"''' (boolean), '''"type"''' (one of ''BALL, BALL_LARGE, STAR, BURST, or CREEPER''), '''"colors"''' (array of color names or color arrays), and '''"fade"''' (array of color names or color arrays).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5072</id>
	<key><![CDATA[Potions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5073</id>
	<key><![CDATA['''burntime''' : (int) The amount of time left in ticks before the furnace extinguishes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5074</id>
	<key><![CDATA[Books]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5075</id>
	<key><![CDATA['''model''' : (int) Represents vanilla's CustomModelData tag for use with resource packs.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5076</id>
	<key><![CDATA[Player Heads]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5077</id>
	<key><![CDATA[Demonstrates a custom firework (excluding generic meta)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5078</id>
	<key><![CDATA[Fireworks]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5079</id>
	<key><![CDATA['''title''' : (string) The title of the book.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5080</id>
	<key><![CDATA['''author''' : (string) The author of the book.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5081</id>
	<key><![CDATA['''flags''' : (array) Possible flags: ''HIDE_ENCHANTS, HIDE_ATTRIBUTES, HIDE_UNBREAKABLE, HIDE_DESTROYS, HIDE_PLACED_ON, or HIDE_POTION_EFFECTS''.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5082</id>
	<key><![CDATA[Storage Blocks]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5083</id>
	<key><![CDATA[Demonstrates an EnchantedBook (excluding generic meta)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5084</id>
	<key><![CDATA['''fishpattern''' : (string) The pattern type on the fish, can be one of ''KOB, SUNSTREAK, SNOOPER, DASHER, BRINELY, SPOTTY, FLOPPER, STRIPEY, GLITTER, BLOCKFISH, BETTY, or CLAYFISH''.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5085</id>
	<key><![CDATA[Damageable Items]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5086</id>
	<key><![CDATA['''pages''' : (array) An array of pages as strings. New lines supported. 256 character limit per page. 50 page limit.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5087</id>
	<key><![CDATA['''damage''' : (int) The amount of damage on the item. 0 is undamaged. Maximum is determined by each item type's max durability.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5088</id>
	<key><![CDATA['''color''' : (array) A color array, with '''"r"''', '''"g"''', and '''"b"''' keys with values of 0 - 255.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5089</id>
	<key><![CDATA['''brewtime''' : (int) The amount of time left in ticks before brewing completes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5090</id>
	<key><![CDATA['''lore''' : (array) An array of strings that is displayed when hovering the item.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5091</id>
	<key><![CDATA['''delay''' : (int) The time in ticks until the spawner will spawn the next entity.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5092</id>
	<key><![CDATA[Maps]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5093</id>
	<key><![CDATA['''color''' : (array) An array of the map item's color, with '''"r"''', '''"g"''', and '''"b"''' keys that have values ranging from 0 to 255.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5094</id>
	<key><![CDATA['''color''' : (array) A color array, with '''"r"''', '''"g"''', and '''"b"''' keys that have values ranging from 0 to 255.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5095</id>
	<key><![CDATA[Spawners]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5096</id>
	<key><![CDATA['''potions''' : (array) An associative array of custom potion effect arrays, where each key is the vanilla potion effect name. Each effect array can contain the keys: '''"id"''' (int), '''"strength"''' (int), '''"seconds"''' remaining (int), whether the effect is '''"ambient"''', whether '''"particles"''' are enabled, and whether the '''"icon"''' is shown to the player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5097</id>
	<key><![CDATA['''spawntype''' : (string) May be one of ''AREA_EFFECT_CLOUD, ARMOR_STAND, ARROW, BAT, BLAZE, BOAT, CAT, CAVE_SPIDER, CHICKEN, COD, COW, CREEPER, DOLPHIN, DRAGON_FIREBALL, DROPPED_ITEM, DROWNED, DONKEY, EGG, ELDER_GUARDIAN, ENDERMAN, ENDERMITE, ENDER_CRYSTAL, ENDER_DRAGON, ENDER_EYE, ENDER_PEARL, EVOKER, EVOKER_FANGS, EXPERIENCE_ORB, FALLING_BLOCK, FIREBALL, FIREWORK, FOX, GHAST, GIANT, GUARDIAN, HORSE, HUSK, ILLUSIONER, IRON_GOLEM, ITEM_FRAME, LLAMA, LLAMA_SPIT, LEASH_HITCH, LIGHTNING, MAGMA_CUBE, MINECART, MINECART_CHEST, MINECART_COMMAND, MINECART_FURNACE, MINECART_HOPPER, MINECART_MOB_SPAWNER, MINECART_TNT, MULE, MUSHROOM_COW, OCELOT, PAINTING, PANDA, PARROT, PHANTOM, PIG, PIG_ZOMBIE, PILLAGER, POLAR_BEAR, PRIMED_TNT, PUFFERFISH, RABBIT, RAVAGER, SALMON, SHEEP, SILVERFISH, SKELETON, SHULKER, SHULKER_BULLET, SKELETON_HORSE, SLIME, SMALL_FIREBALL, SNOWBALL, SNOWMAN, SQUID, SPECTRAL_ARROW, SPIDER, SPLASH_POTION, STRAY, THROWN_EXP_BOTTLE, TRADER_LLAMA, TRIDENT, TROPICAL_FISH, TURTLE, VEX, VILLAGER, VINDICATOR, WANDERING_TRADER, WITCH, WITHER, WITHER_SKELETON, WITHER_SKULL, WOLF, ZOMBIE, ZOMBIE_HORSE, or ZOMBIE_VILLAGER''. Not all entity types will spawn from spawners, and some require special conditions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5098</id>
	<key><![CDATA['''mapid''' : (int) The unique id for a map on the server.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5099</id>
	<key><![CDATA[Returns the location of the currently running engine binary.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5100</id>
	<key><![CDATA[Error while compiling the examples for function_exists]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5101</id>
	<key><![CDATA[Binds some functionality to an event, so that when said event occurs, the event handler will fire. Returns the id of this event, so it can be unregistered later, if need be. See more on the page detailing [[Events]].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5102</id>
	<key><![CDATA[Manually triggers bound events. The event object passed to this function is sent directly as-is to the bound events. Check the documentation for each event to see what is required. No checks will be done on the data here, but it is not recommended to fail to send all parameters required. If serverWide is true, the event is triggered directly in the server, unless it is a CommandHelper specific event, in which case, serverWide is irrelevant. Defaults to false, which means that only CommandHelper code will receive the event. Throws a CastException when eventObject is not an array and not %s. Throws a BindException when trigger() is not yet supported by the given event.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5103</id>
	<key><![CDATA[Extensions are a way to extend MethodScript using native Java code. Extensions can add a number of types of functionality, from new functions and events, to new commandline tools.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5104</id>
	<key><![CDATA[{{TakeNote|text=Note that extensions completely bypass the security restrictions in place in MethodScript, and therefore should be carefully installed, and only downloaded from trusted sources.}}]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5105</id>
	<key><![CDATA[In order to install extensions, simply drop the jar into the extensions folder, in your MethodScript installation, and restart. The extensions will be automatically loaded from there.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5106</id>
	<key><![CDATA[While the extension framework is officially supported, no individual extensions are themselves officially supported. Extension developers do not need to register with the project, and there is no central repository of extensions, so it isn't possible to say what extensions are out there. A number of extensions can be found  [%s here], but note that this is not exhaustive, and is a community supported effort.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5107</id>
	<key><![CDATA[Extensions can provide access to any features that can be provided in Java, and so can therefore be quite powerful. If you're interested in developing your own extension, see the page on [[%s|Extension Development]].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5108</id>
	<key><![CDATA[Other Extension Points]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5109</id>
	<key><![CDATA[Command Line Tools]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5110</id>
	<key><![CDATA[Implement the DataSource interface (or extend the AbstractDataSource class) and tag the class with the @datasource annotation.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5111</id>
	<key><![CDATA[Implement the CommandLineTool interface (or extend the AbstractCommandLineTool class) and tag the class with the @tool annotation. All of the built in tools use this mechanism, and extensions can provide new tools just the same way.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5112</id>
	<key><![CDATA[Persistence Network Data Sources]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5113</id>
	<key><![CDATA[[%splayer%s]%s, statistic, %s[%stype%s]%s, amount]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5114</id>
	<key><![CDATA[[%splayer%s]%s, statistic, %s[%stype%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5115</id>
	<key><![CDATA[Returns the specified statistic for the player. Some statistics require a block, item or entity type. An IllegalArgumentException will be thrown if the statistic is invalid, or if the type is invalid for that statistic. The player argument is required before the type argument is. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5116</id>
	<key><![CDATA[Forces a player to leave their vehicle. This returns false if the player is not riding a vehicle.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5117</id>
	<key><![CDATA[Sets the specified statistic for the player. Some statistics require a block, item or entity type. An IllegalArgumentException will be thrown if the statistic is invalid, or if the type is invalid for that statistic. The player argument is required before the type argument is. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5118</id>
	<key><![CDATA[Returns the specified statistic for the player. Some statistics require a block, item or entity type. An IllegalArgumentException will be thrown if the statistic is invalid, or if the type is invalid for that statistic. The player argument is required before the type argument is.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5119</id>
	<key><![CDATA[Valid statistics are: DAMAGE_DEALT, DAMAGE_TAKEN, DEATHS, MOB_KILLS, PLAYER_KILLS, FISH_CAUGHT, ANIMALS_BRED, LEAVE_GAME, JUMP, DROP_COUNT, DROP, PICKUP, PLAY_ONE_MINUTE, WALK_ONE_CM, WALK_ON_WATER_ONE_CM, FALL_ONE_CM, SNEAK_TIME, CLIMB_ONE_CM, FLY_ONE_CM, WALK_UNDER_WATER_ONE_CM, MINECART_ONE_CM, BOAT_ONE_CM, PIG_ONE_CM, HORSE_ONE_CM, SPRINT_ONE_CM, CROUCH_ONE_CM, AVIATE_ONE_CM, MINE_BLOCK, USE_ITEM, BREAK_ITEM, CRAFT_ITEM, KILL_ENTITY, ENTITY_KILLED_BY, TIME_SINCE_DEATH, TALKED_TO_VILLAGER, TRADED_WITH_VILLAGER, CAKE_SLICES_EATEN, CAULDRON_FILLED, CAULDRON_USED, ARMOR_CLEANED, BANNER_CLEANED, BREWINGSTAND_INTERACTION, BEACON_INTERACTION, DROPPER_INSPECTED, HOPPER_INSPECTED, DISPENSER_INSPECTED, NOTEBLOCK_PLAYED, NOTEBLOCK_TUNED, FLOWER_POTTED, TRAPPED_CHEST_TRIGGERED, ENDERCHEST_OPENED, ITEM_ENCHANTED, RECORD_PLAYED, FURNACE_INTERACTION, CRAFTING_TABLE_INTERACTION, CHEST_OPENED, SLEEP_IN_BED, SHULKER_BOX_OPENED, TIME_SINCE_REST, SWIM_ONE_CM, DAMAGE_DEALT_ABSORBED, DAMAGE_DEALT_RESISTED, DAMAGE_BLOCKED_BY_SHIELD, DAMAGE_ABSORBED, DAMAGE_RESISTED, CLEAN_SHULKER_BOX, OPEN_BARREL, INTERACT_WITH_BLAST_FURNACE, INTERACT_WITH_SMOKER, INTERACT_WITH_LECTERN, INTERACT_WITH_CAMPFIRE, INTERACT_WITH_CARTOGRAPHY_TABLE, INTERACT_WITH_LOOM, INTERACT_WITH_STONECUTTER, BELL_RING, RAID_TRIGGER, or RAID_WIN]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5120</id>
	<key><![CDATA[Sets the specified statistic for the player. Some statistics require a block, item or entity type. An IllegalArgumentException will be thrown if the statistic is invalid, or if the type is invalid for that statistic. The player argument is required before the type argument is.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5121</id>
	<key><![CDATA[And for the whitelist, use TODO: Need to figure out what the whitelist parameter should be.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5122</id>
	<key><![CDATA[There is basic syntax highlighter support for several environments as well, which you can generate locally yourself with the command line tool "java -jar MethodScript.jar syntax". Run the tool to see what environments are supported.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5123</id>
	<key><![CDATA[Once VSCode is installed, open the extensions tab on the left, and search for the "MethodScriptVSC" extension in the marketplace. Install, and restart VSCode.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5124</id>
	<key><![CDATA[When writing a programming language, it can be extremely helpful to use the tools available to you to assist you in development. A lot of work has gone into the tooling surrounding the language, to help you code better and faster.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5125</id>
	<key><![CDATA[Minimal support can also be obtained in vim, though this is not nearly as feature rich as other IDEs. First, you should install the syntax highlighter files, which provides basic support for highlighting. Next, install the vim-lsp plugin, found [%s here]. For the cmd, use]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5126</id>
	<key><![CDATA[On first launch, you need to select your profile. Your profile is simply the location of your jar file, and multiple versions can be supported, if you're using older or newer versions of MethodScript. You will be prompted to select your profile when you first open an .ms or .msa file, but you can actively select your profile at any time by using the command palette (Ctrl+Shift+P/Cmd+Shift+P) and typing "Choose MethodScript Profile".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5127</id>
	<key><![CDATA[Visual Studio Code]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5128</id>
	<key><![CDATA[The only officially supported Development Environment is the Visual Studio Code editor, though good support exists for other environments as well. This page will highlight the recommended setup to help you get started faster. If you already have a preferred environment, you may find it interesting to know that MethodScript implements the  [%s Language Server Protocol], and so it may be quite easy to plug into other environments that aren't listed here.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5129</id>
	<key><![CDATA[Instructions for configuring the vim-lsp plugin can be found in the readme.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5130</id>
	<key><![CDATA[Vim]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5131</id>
	<key><![CDATA[This does two things, first, it loads up syntax highlighting files directly from the jar, and secondly, it kicks off the MethodScript Language Server. The syntax highlighting provides basic syntax support, and also provides the hover text that appears when you hover over a method. However, the most useful part is the language server. Each time you save a file, it is automatically compiled and checked for compiler errors and warnings. These are highlighted for you both directly in the text editor window, but also in the problems list (Ctrl+Shift+M/Cmd+Shift+M). This can help you see at a glance if your scripts will compile. Code completion is also provided. Function names can be autocompleted, just by beginning to type, or by hitting Ctrl+Space to bring up the IntelliSense panel. The function names are all listed, and you can also see information about parameters and general function documentation.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5132</id>
	<key><![CDATA[Going far beyond basic syntax highlighting, Visual Studio Code (VSCode) is the only officially supported environment.  VSCode is cross platform, open source, and provides great support for the Language Server. First, install VSCode from [%s here].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5133</id>
	<key><![CDATA[A thin wrapper around the tellraw command from console context, this simply passes the input to the command. The raw is passed in as a normal (possibly associative) array, and json encoded. No validation is done on the input, so the command may fail. If not provided, the selector defaults to @a. Do not use double quotes (smart string) when providing the selector. See %s if you need player context. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5134</id>
	<key><![CDATA[[%sstring selector%s]%s, array raw]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5135</id>
	<key><![CDATA[A thin wrapper around the tellraw command from player context, this simply passes the input to the command. The raw is passed in as a normal (possibly associative) array, and json encoded. No validation is done on the input, so the command may fail. If not provided, the selector defaults to @s. Do not use double quotes (smart string) when providing the selector. See %s if you don&apos;t need player context. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5136</id>
	<key><![CDATA[A thin wrapper around the tellraw command from player context, this simply passes the input to the command. The raw is passed in as a normal (possibly associative) array, and json encoded. No validation is done on the input, so the command may fail. If not provided, the selector defaults to @s. Do not use double quotes (smart string) when providing the selector. See %s if you don't need player context.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5137</id>
	<key><![CDATA[Advanced usage with embedded selectors.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5138</id>
	<key><![CDATA[The specification of the array may change from version to version of Minecraft, but is documented here %s. This function is simply written in terms of json_encode and sudo, and is otherwise equivalent to sudo('/minecraft:tellraw ' . @selector . ' ' . json_encode(@raw))]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5139</id>
	<key><![CDATA[A thin wrapper around the tellraw command from console context, this simply passes the input to the command. The raw is passed in as a normal (possibly associative) array, and json encoded. No validation is done on the input, so the command may fail. If not provided, the selector defaults to @a. Do not use double quotes (smart string) when providing the selector. See %s if you need player context.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5140</id>
	<key><![CDATA[The specification of the array may change from version to version of Minecraft, but is documented here %s. This function is simply written in terms of json_encode and runas, and is otherwise equivalent to runas('~console', '/minecraft:tellraw ' . @selector . ' ' . json_encode(@raw))]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5141</id>
	<key><![CDATA[[%splayer%s]%s, command]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5142</id>
	<key><![CDATA[Runs a single command for the current or provided player, as op. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5143</id>
	<key><![CDATA[This is guaranteed to not allow the player to stay op, even if a fatal error occurs during the command. If this guarantee cannot be met, the function will simply fail. Some server types may find that this function does not work at all. If that's the case and you are ok with losing the deop guarantee, you can set use-sudo-fallback to true in your preferences. Then if the normal sudo functionality fails on your server, then it will actually fully op the player, run the command, and finally deop the player. However, this is less reliable than the normal sudo mechanism, and could potentially fail, leaving the player as op. So, this is not recommended. Enable that setting at your own risk.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5144</id>
	<key><![CDATA[Runs a single command for the current or provided player, as op.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5145</id>
	<key><![CDATA[When in strict mode, use of functional notation instead of operators triggers a compiler warning. This warning is suppressable, however.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5146</id>
	<key><![CDATA[In addition to functional support, MethodScript supports traditional operators.  This allows you to write more readable code, by  using more standard symbols instead of only functions. Using operators instead of functions is highly recommended for  all code, though the functional usage will continue to remain supported, and may be more readable in rare cases.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5147</id>
	<key><![CDATA[Provides a case insensitive switch statement, for switching over strings. This works by compiler transformations, transforming this into a normal switch statement, with each case lowercased, and the input to the switch wrapped in to_lower. The case statements must be strings, however, which is the main difference between this method and the normal switch statement. The lowercasing is done with the system&apos;s default locale.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5148</id>
	<key><![CDATA[Provides a case insensitive switch statement, for switching over strings. This works by compiler transformations, transforming this into a normal switch statement, with each case lowercased, and the input to the switch wrapped in to_lower. The case statements must be strings, however, which is the main difference between this method and the normal switch statement. The lowercasing is done with the system's default locale.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5149</id>
	<key><![CDATA[type%s: %s&lt;Macro&gt;%sreason%s: %s&lt;Macro&gt; One of BREEDING, BUILD_IRONGOLEM, BUILD_SNOWMAN, BUILD_WITHER, CHUNK_GEN, CUSTOM, DEFAULT, EGG, JOCKEY, LIGHTNING, NATURAL, PATROL, RAID, REINFORCEMENTS, SHOULDER_ENTITY, SLIME_SPLIT, SPAWNER, SPAWNER_EGG, VILLAGE_DEFENSE, VILLAGE_INVASION, NETHER_PORTAL, DISPENSE_EGG, INFECTION, CURED, OCELOT_BABY, SILVERFISH_BLOCK, MOUNT, TRAP, ENDER_PEARL, DROWNED, SHEARED, or EXPLOSION]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5150</id>
	<key><![CDATA[The end of each pipe must simply implement a two way protocol, which translates network/remote requests into UTF-8 strings, which are passed to/from the MScript interpreter. The interpreter will always provide at minimum a TCP socket connection, but other platforms/extensions may provide support for others, such as DBus or named pipe communication. Connections may be stateless, though maintaining pseudo state is the responsibility of the transport extension, and the interpreter expects the connection to appear stateful.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5151</id>
	<key><![CDATA[This is a [%s valid question]. What does MethodScript offer that other scripting languages don't?  Simplicity. This has several benefits, and drawbacks that we must consider. In general, MethodScript is much easier to  learn than other languages. In essence, everything is a function, including common control structures. This makes many  concepts easier to learn, and makes for easily embeddable scripts. This is demonstrated by MethodScripts being embedded  in the aliases.msa file. Each script is run separately from each other, and is embedded inside a simpler format, which  facilitates easier integration into existing paradigms. Secondly, as a scripting language, it is easy to transmit in  plain text, which makes it perfect for simple configuration and customization. Finally, it has many built in features  that simplify development, such as the include() function. With everything, there are drawbacks though. Since it is not  strongly typed, this makes it easier to use, but harder to maintain. It is not possible to easily refactor dynamic  elements. Though it will be pseudo object oriented, it is somewhat added on top, it wasn't initially designed with this  in mind. Though the design of the object oriented features should be properly designed, they are being designed inside  the existing constraints of the non-object oriented features.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5152</id>
	<key><![CDATA[About]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment><![CDATA[This is a global segment.]]></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5153</id>
	<key><![CDATA[Home]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment><![CDATA[This is a global segment.]]></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5154</id>
	<key><![CDATA[Privacy Policy]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment><![CDATA[This is a global segment.]]></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5155</id>
	<key><![CDATA[Sponsors]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment><![CDATA[This is a global segment.]]></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5156</id>
	<key><![CDATA[Help]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment><![CDATA[This is a global segment.]]></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5157</id>
	<key><![CDATA[Team. All rights reserved.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment><![CDATA[This will start with &copy; %%branding%%, so for instance, the complete sentence is "&copy; MethodScript Team. All rights reserved." This is a global segment.]]></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5158</id>
	<key><![CDATA[Docs]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment><![CDATA[This is a global segment.]]></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5159</id>
	<key><![CDATA[Automatically adds the default headers to this request, unless specifically overridden. Note that some headers simply cannot be overridden, for instance Host and User-Agent will ALWAYS be set. The default headers are:  {Accept=text/*, application/xhtml+xml, application/xml;q=0.9, */*;q=0.8, User-Agent=Java/1.8.0_221/MethodScript, Connection=close, Accept-Encoding=br, deflate, identity, gzip, DNT=1}]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5160</id>
	<key><![CDATA[Only the latest development build is officially supported, but there is some community support for older builds, which you can get by joining IRC or Discord. For the latest builds, head to  [%s the build site], click the blue download button to the right of the topmost build, and then download the %scommandhelper-%s-SNAPSHOT-full.jar%s file. (Don't download the one without -full.) You can also download the versionless jar that corresponds to the exact version that this site was built with [[%s|here]], though this is not supported.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5161</id>
	<key><![CDATA[If you're using the cmdline version, run "java -jar commandhelper-%s-SNAPSHOT-full.jar help" for a listing of the possible commands, and "java -jar commandhelper-%s-SNAPSHOT-full.jar install-cmdline" to install. The configuration directory will be called MethodScript, and will be in the same directory as the jar. If the name or path of the jar file changes, you'll need to re-install, so it may be prudent to name the jar with a neutral name that does not include the version number.]]></key>
	<eligibleForMachineTranslation>true</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5162</id>
	<key><![CDATA[Individual fields may be marked as immutable as well. This has the effect of making the class immutable, but only through that particular object reference.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5163</id>
	<key><![CDATA[If a class itself is marked as immutable, it is not an error to also mark an instance of the field as immutable. This can be desirable anyways, in cases where it's possible that the class itself becomes mutable in the future, but  regardless, you wish this field to always be immutable. In general, however, it's bad practice to change a class's  mutability after release.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5164</id>
	<key><![CDATA[Classes may be marked as immutable, which means that none of the fields in the class may be changed after construction is complete.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5165</id>
	<key><![CDATA[Immutable classes may be useful from a business logic standpoint, as it allows enforcement of immutability by the compiler. However, the compiler/runtime can also do some optimizations when immutable classes are used, for instance, classes that are immutable can be passed either by value or reference, and the effective result will be the same. So the runtime may choose the most performant method if a class is marked as immutable.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5166</id>
	<key><![CDATA[It's also worth pointing out that an immutable field is not constant, and the referenced object may be changed,  (unless the field is marked as ''final'' in addition). The previous example shows this, when we set ''@immutable''  in the set method, this is allowed. What we cannot do, however, is set some field within the MyObject instance,  even if MyObject normally does declare some publicly accessible methods that set fields.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5167</id>
	<key><![CDATA[Immutable classes and immutable variables]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5168</id>
	<key><![CDATA[Immutable fields are a sort of overloaded type. That is, ''MyObject'' is different than ''immutable MyObject'', and it is required to declare them differently in each use. Mutable fields may safely be cast to the immutable variant, but not vice versa.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5169</id>
	<key><![CDATA[Returns the average (also known as the arithmetic mean) across all the numbers in the set. The input may be an array of numbers, or individual numbers as arguments. The average of a set of numbers is the result of adding all the numbers in the set, and dividing it by the number of values in the set.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5170</id>
	<key><![CDATA[Returns a random value from an array. If the array is empty a LengthException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5171</id>
	<key><![CDATA[Normal array usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5172</id>
	<key><![CDATA[Associative array usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5173</id>
	<key><![CDATA[hiddengene: The recessive trait for this panda.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5174</id>
	<key><![CDATA[maingene: The dominant trait for this panda (can be AGGRESSIVE, BROWN, LAZY, NORMAL, PLAYFUL, WEAK, or WORRIED).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5175</id>
	<key><![CDATA[level: The level of villager's profession. Can be 1-5. (not in 1.13)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5176</id>
	<key><![CDATA[PANDA]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5177</id>
	<key><![CDATA[experience: The amount of experience in the villager's profession towards the next level. (not in 1.13)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5178</id>
	<key><![CDATA[Azure DevOps is a %sContinuous Integration Server%s, which automatically builds  the project based on the code currently in the github repository. This allows for  quick detection of failures, which also usually leads to quick resolutions. This  also has the benefit of providing a convenient place to download the newest development  versions, without having to compile the code yourself.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5179</id>
	<key><![CDATA[JUnit is the test driver. Essentially, each test is generally supposed to test a small unit of code, though it tends to be easier to write integration tests, so there is a framework in place to simply run MethodScript and check the outputs, to verify correctness. There are also unit tests surrounding the documentation and other boilerplate tests to ensure basic consistency of code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5180</id>
	<key><![CDATA[There are 5 main "components" to MethodScript, each of which is addressed separately below,  and a final section speaks as to how they all integrate with each other.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5181</id>
	<key><![CDATA[The core is what glues everything together. The core knows how start up the program initially, and set up all of the initial parameters that are needed to run. There are 2 cores in MethodScript, the "MethodScript core" which is the command line version of MethodScript, and the "CommandHelper core", which is the core that the Minecraft server starts with.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5182</id>
	<key><![CDATA[MethodScript uses git as its version control system, and the code is hosted on github.  To get the source, you can use %sgit clone]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5183</id>
	<key><![CDATA[When the CI builds, if the build fails due to either compilation failures or unit  test failures, an email is sent. (Actually successful builds are emailed  as well.) Commits to the github account trigger a new build, so these builds are the freshest  you could possibly have, unless you're the developer.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5184</id>
	<key><![CDATA[MethodScript makes heavy use of annotations to provide functionality. Annotations are a [%s Java feature] that provides a way to "meta program" in Java. An annotation is a "tag" that can be use to mark various methods, fields, classes, or other constructs in that Java language. This meta programming allows for several different advantages, the main one in MethodScript being the ability to maintain all information about classes in one place, instead of spreading the information around several different files. In general, when adding a new class, it is customary to copy paste another class, then modify it. The ability to do this in one place, instead of having to modify an existing list manually is following a principal known as the [%s open/closed] principal, and is one of the key components of a [%s SOLID] architecture. It also enables easier Dependency Injection, one of the other heavily followed design principles. In general, MethodScript uses annotations to mark events, functions, and other resources for addition to the api, and inherently allows for one-to-many relationships between code. An additional feature that MethodScript includes is a   utility class, which provides the means to dynamically discover the constructs that are tagged with the various annotations, as well as providing other methods for meta class discovery for java sources that aren't aware of MethodScript.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5185</id>
	<key><![CDATA[The main dependency of CommandHelper is (of course) Spigot, but if you look  at it's dependency tree, you see more than 30 different dependencies! Not to worry,  most of those are not actually included by CH, they are transitive dependencies,  but anyways, with a few exceptions, they are not strictly required at runtime,  just build time. There are a few exceptions, but for the most part, for these  exceptions, I use a technique called %sshading%s. Shading allows you to  literally copy another dependency (or parts of a dependency) into the final jar  that is distributed. Doing this has both advantages and disadvantages. The main  disadvantage is that your distributable gets bigger, and you may end up distributing  code that they already have. To me, this is a non-issue, computer's hard disks are  huge and cheap, so even if you double the size of the jar, it won't make a dent in  the remaining free space for a person's disk drive. The advantage is that you only  need to distribute one single file instead of several, which tends to greatly  de-complicate the distribution process.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5186</id>
	<key><![CDATA[To embed MethodScript into another jar may cause issues when shading this way, however, hence why 2 jars are created in the build process. The one ending in ''-full'' is the one that has the dependencies shaded in it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5187</id>
	<key><![CDATA[The CommandHelper core registers the plugin with  bukkit and handles the builtin commands. When the plugin starts up initially, it starts in bukkit specific code, which sets the abstraction layer type, as well as hands control off to the more generic core.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5188</id>
	<key><![CDATA[The compiler takes the source code it is given, then lexes, parses and optimizes it. Lexing  turns the raw string into tokens, parsing turns the token stream into a tree, and the  optimizer takes out unneeded code paths, and converts optimizable function calls into single  values (such as turning "2 + 2" into 4). Then, it passes the parse tree to the execution  mechanism, which preprocesses the alias files, which stores each alias's execution tree in  memory. The main.ms file is also executed, and if it registers any events, those registrations  are also stored in memory, to be executed when an applicable event occurs. Technically,  this mechanism is part of the Compiler proper, however it is really a separate mechanism,  and could easily be split off from the actual compilation procedure, so in the future, if  the compiled tree were to be saved to disk for instance, this could easily be accomplished  in the future. In addition, because the Abstract Syntax Tree (AST) is separate at this point,  much of the battle is done to turning this into a full blown compiler; compiling to some  other platform's native code base (for instance, LLVM).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5189</id>
	<key><![CDATA[The abstraction layer handles all communication between MethodScript and Bukkit.  It is the only place in the code that should directly reference bukkit. All methods  of communication from MethodScript to Bukkit are defined as interfaces, which  must be implemented once per server type, but are all that are required to be  implemented to add another server type. This will allow for easier migration to  and from Bukkit and other server mods, with minimal effort on the part of the  programmer. There is a disadvantage of code being harder to trace, but if you  use the tools available to you in an IDE, this should not be a huge barrier,  and the advantages far outweigh the problems.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5190</id>
	<key><![CDATA[Mockito is the mocking framework in place. This allows creations of testing mocks, which allow parts of code to be replaced by simple mocks, which don't do anything, but generally look like the code they're replacing.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5191</id>
	<key><![CDATA[CI]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5192</id>
	<key><![CDATA[MethodScript has grown into quite a large project from its humble beginnings as a simple alias plugin for Minecraft.  Due to this, if you desire to contribute to MethodScript, you may not even know where to begin! This  document will hopefully get you at least pointed in the right direction, though there is no replacement  for digging through the code some yourself. This document is just going over the high level details, and  won't cover anything too specific, and is not aimed at the typical user, though it will not cover  anything too java specific. Also included are sections that cover the testing architecture, and build process.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5193</id>
	<key><![CDATA[You may have noticed that MethodScript has a large base of unit tests. I take automated  testing very seriously; there is no way for me to scale up and maintain any semblance of  quality without automating as much testing as possible. This is where the unit tests come  in. Each time a new build occurs, all the unit tests are run, and failing tests are reported,  and very quickly fixed. If a unit test covers a use case, you can more or less bank on that  particular use case working in the final product. This allows you to have much higher confidence  in the product, despite most functionality not being manually tested before a release.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5194</id>
	<key><![CDATA[While there is currently no difference between a "MethodScript" and "CommandHelper" executable, this is intended to change in the future, as the CommandHelper and Minecraft specific portions are intended to be removed to their own repository, and embed MethodScript, while the MethodScript core is meant to be used as either a standalone general purpose programming language, or as an embeddable programming language, primarily by CommandHelper at first, but perhaps in other projects in the future. Unfortunately, this design distinction was not put in place from the beginning, so actually separating the two parts is non-trivial, and is currently a long term goal. However, new code written tends to respect this distinction, and so there are some differences when running in standalone mode and as a Minecraft plugin.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5195</id>
	<key><![CDATA[For the most part, because we use maven, building MethodScript is as trivial as running  %smvn clean install%s, but it is nice to understand what actually happens when  you do that, and what things could cause that to go wrong.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5196</id>
	<key><![CDATA[Alternatively, you can install the http-server package, and leave off the ''npx'' command.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5197</id>
	<key><![CDATA[Reads in a gzipped file, and returns a byte_array for it. The file is returned exactly as is on disk, no conversions are done other than unzipping it. base-dir restrictions are enforced for the path, the same as read(). If file is relative, it is assumed to be relative to this file.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5198</id>
	<key><![CDATA[Returns a ClassType value of the typeof a value. For instance &apos;array&apos; is returned for typeof(array()). This is a generic replacement for the is_* series of functions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5199</id>
	<key><![CDATA[Returns a ClassType value of the typeof a value. For instance 'array' is returned for typeof(array()). This is a generic replacement for the is_* series of functions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5200</id>
	<key><![CDATA[Alternatively, and probably preferably, if you have mixed file types in a given folder, add this to your site config file:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5201</id>
	<key><![CDATA[MethodScript has support for running as a cgi-bin in a webserver. The setup for this is slightly different, and the sections below outline how to setup each server type. For other server types, it may still be possible to run, but you'll need to modify the instructions to cater to your server type.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5202</id>
	<key><![CDATA[Now, we need to install MethodScript itself. The jar may be installed anywhere, but keep in mind the configuration files are created beside the jar, and need to be writable by the server process, www-data. To do that, place the MethodScript jar in /opt/mscript, create a folder /opt/mscript/MethodScript, and run]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5203</id>
	<key><![CDATA[For ScriptAlias, add the following line to either apache2.conf, httpd.conf, or the given config file in your  sites-available directory. This should point to the directory that you want your scripts to be loaded from, along with the url that should be intercepted. For instance:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5204</id>
	<key><![CDATA[Doing it this way allows for .ms files to be run as scripts, but not other files, such as html and css files.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5205</id>
	<key><![CDATA[Regardless, you'll need Java and your server of choice installed, as well as the MethodScript jar. Installation of these things is outside the scope of this tutorial, and it is assumed that you have basic web pages being displayed through your server. The guide also assumes that you're running on Ubuntu Linux. If this is not the case, the basic setup should nonetheless be the same, but you may need to modify file paths.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5206</id>
	<key><![CDATA[Next, add either a ScriptAlias directive or AddHandler directive.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5207</id>
	<key><![CDATA[Would cause calls to /var/www/html/index.ms via "%s" to be run as scripts, rather than simply serving the resource as plain text. You may modify this to reflect where you wish to actually put the scripts, and what the url should be. This works with no further configuration on Ubuntu, however.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5208</id>
	<key><![CDATA[First step is to enable the CGID mod]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5209</id>
	<key><![CDATA[This will set up the necessary files and folder so that MethodScript can properly run under the www-data user.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5210</id>
	<key><![CDATA[This is a very rudimentary example, but it demonstrates how to properly interact with the system at a very low level.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5211</id>
	<key><![CDATA[Headers and other data are provided through the environment variables, which you can access with %s. See this script for an example of how to provide basic functionality:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5212</id>
	<key><![CDATA[Apache2]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5213</id>
	<key><![CDATA[Be sure to restart apache after all the configuration changes to make them apply.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5214</id>
	<key><![CDATA[Runs a plugin command&apos;s tab completer and returns an array of possible completions for the final argument. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5215</id>
	<key><![CDATA[[%splayer%s]%s, command, args]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5216</id>
	<key><![CDATA[Runs a plugin command's tab completer and returns an array of possible completions for the final argument.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5217</id>
	<key><![CDATA[The args parameter must be an array of strings. A command prefix can be used to specify a specific plugin. (eg. "/worldedit:remove") Throws a NotFoundException if the command does not exist.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5218</id>
	<key><![CDATA[This would cause calls to /var/www/html/index.ms via "%s" to be run as scripts, rather than simply serving the resource as plain text. You may modify this to reflect where you wish to actually put the scripts, and what the url should be. This works with no further configuration on Ubuntu, however.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5219</id>
	<key><![CDATA[{{TakeNote|text=Note that CGI is very inefficient, and has extremely limited flexibility, and so this setup is not necessarily recommended, but is shown to demonstrate the capabilities of MethodScript. Better solutions will be provided in the future.}}]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5220</id>
	<key><![CDATA[As you can see, MethodScript does most of the work for you, making it far simpler to use than javascript. However, this does not stop you from using javascript yourself. Any javascript you embed in the template will be included exactly as is, so existing javascript libraries can be used. Unfortunately, you cannot interface MethodScript with javascript directly, though MethodScript can call javascript functions indirectly. Inside of the tag, the %sthis%s keyword is available, and refers to that instance of the html tag.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5221</id>
	<key><![CDATA[This results in the following equivalent html (the actual html rendered will be more complicated, but for this example, it has been simplified to equivalent javascript):]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5222</id>
	<key><![CDATA[[%splayer%s]%s, slot, type, level %s player, slot, enchantsArray]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5223</id>
	<key><![CDATA['''modifiers''' : (array) An array of attribute modifier arrays, each with keys: attribute, operation, amount (double), uuid (optional), name (optional), and slot (optional). Possible attributes: ''GENERIC_ARMOR, GENERIC_ARMOR_TOUGHNESS, GENERIC_ATTACK_DAMAGE, GENERIC_ATTACK_SPEED, GENERIC_FLYING_SPEED, GENERIC_FOLLOW_RANGE, GENERIC_KNOCKBACK_RESISTANCE, GENERIC_LUCK, GENERIC_MAX_HEALTH, GENERIC_MOVEMENT_SPEED, HORSE_JUMP_STRENGTH, or ZOMBIE_SPAWN_REINFORCEMENTS''. Possible operations: ''ADD_NUMBER, ADD_SCALAR, or MULTIPLY_SCALAR_1''. Possible slots: ''WEAPON, OFF_HAND, BOOTS, LEGGINGS, CHESTPLATE, or HELMET''.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5224</id>
	<key><![CDATA[Sets the base value for the entity attribute. Accepts a double as the value. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5225</id>
	<key><![CDATA[Gets the default value for the attribute of this entity&apos;s type. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5226</id>
	<key><![CDATA[entityUUID, attribute]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5227</id>
	<key><![CDATA[entityUUID, modifier]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5228</id>
	<key><![CDATA[entityUUID, modifier %s entityUUID, attribute, id]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5229</id>
	<key><![CDATA[Removes an attribute modifier from an entity. A modifier array can be provided, or both an attribute name and either the UUID or name (if it&apos;s unique) for the modifier can be provided as the identifier.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5230</id>
	<key><![CDATA[Adds an attribute modifier to an entity. Throws BadEntityTypeException if the attribute type does not apply to this entity type. See {function|get_itemmeta} for how to define an attribute modifier array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5231</id>
	<key><![CDATA[Gets the base value for the given attribute of this entity. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5232</id>
	<key><![CDATA[Resets the base attribute value to the default for this entity. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5233</id>
	<key><![CDATA[Gets an array of modifier arrays for this entity&apos;s attribute. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5234</id>
	<key><![CDATA[entityUUID, attribute, value]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5235</id>
	<key><![CDATA[Gets the effective value for the attribute of this entity after all modifiers have been applied to the base value. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5236</id>
	<key><![CDATA[Gets the base value for the given attribute of this entity.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5237</id>
	<key><![CDATA[Available attributes: GENERIC_ARMOR, GENERIC_ARMOR_TOUGHNESS, GENERIC_ATTACK_DAMAGE, GENERIC_ATTACK_SPEED, GENERIC_FLYING_SPEED, GENERIC_FOLLOW_RANGE, GENERIC_KNOCKBACK_RESISTANCE, GENERIC_LUCK, GENERIC_MAX_HEALTH, GENERIC_MOVEMENT_SPEED, HORSE_JUMP_STRENGTH, and ZOMBIE_SPAWN_REINFORCEMENTS]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5238</id>
	<key><![CDATA[Gets the default value for the attribute of this entity's type.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5239</id>
	<key><![CDATA[Gets an array of modifier arrays for this entity's attribute.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5240</id>
	<key><![CDATA[Gets the effective value for the attribute of this entity after all modifiers have been applied to the base value.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5241</id>
	<key><![CDATA[Removes an attribute modifier from an entity. A modifier array can be provided, or both an attribute name and either the UUID or name (if it's unique) for the modifier can be provided as the identifier.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5242</id>
	<key><![CDATA[Resets the base attribute value to the default for this entity.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5243</id>
	<key><![CDATA[Sets the base value for the entity attribute. Accepts a double as the value.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5244</id>
	<key><![CDATA[Returns an array of arrays of the enchantments and their levels on the given item. (deprecated for %s) [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5245</id>
	<key><![CDATA[Gets the id of the block at the coordinates. (deprecated for %s) [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5246</id>
	<key><![CDATA[Removes an enchantment from an item. (deprecated for %s) [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5247</id>
	<key><![CDATA[Tames any tameable mob to the specified player. (deprecated for %s) [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5248</id>
	<key><![CDATA[Adds an enchantment to an item in the player&apos;s inventory. (deprecated for %s) [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5249</id>
	<key><![CDATA[Given an enchantment name and an item type, returns whether or not that item can be enchanted with that enchantment. (deprecated for %s) [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5250</id>
	<key><![CDATA[Adds an attribute modifier to an entity. Throws BadEntityTypeException if the attribute type does not apply to this entity type. See %s for how to define an attribute modifier array.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5251</id>
	<key><![CDATA[Spawns qty mob of one of the following types at location. qty defaults to 1, and location defaults to the location of the player. An array of the entity UUIDs spawned is returned. (deprecated for %s) [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5252</id>
	<key><![CDATA[Sets the id of the block at the x y z coordinates specified. (deprecated for %s) [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5253</id>
	<key><![CDATA[Throws an EnchantmentException if the name is not a valid enchantment type.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5254</id>
	<key><![CDATA[Given an enchantment name and an item type, returns whether or not that item can be enchanted with that enchantment. (deprecated for %s)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5255</id>
	<key><![CDATA[Adds an enchantment to an item in the player's inventory. (deprecated for %s)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5256</id>
	<key><![CDATA[Type can be a single string, or an array of enchantment names. If slot is %s, the currently selected slot is used. If the enchantment cannot be applied to the specified item, an EnchantmentException is thrown, and if the level specified is not valid, a RangeException is thrown. If type is an array, level must also be an array, with equal number of values in it, with each int corresponding to the appropriate type. The minecraft names for enchantments may be used: [%s], and level may be a roman numeral as well.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5257</id>
	<key><![CDATA[The type may be a valid enchantment, or an array of enchantment names. It can also be %s, and all enchantments will be removed. If an enchantment is specified, and the item is not enchanted with that, it is simply ignored.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5258</id>
	<key><![CDATA[Removes an enchantment from an item. (deprecated for %s)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5259</id>
	<key><![CDATA[The format of the return will be x:y where x is the id of the block, and y is the meta data for the block. All blocks will return in this format, but blocks that don't have meta data will return 0 in y (eg. air is "0:0"). If a world isn't provided in the location array or as an argument, the current player's world is used.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5260</id>
	<key><![CDATA[Gets the id of the block at the coordinates. (deprecated for %s)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5261</id>
	<key><![CDATA[Returns an array of arrays of the enchantments and their levels on the given item. (deprecated for %s)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5262</id>
	<key><![CDATA[For example: array(array(DAMAGE_ALL, DAMAGE_UNDEAD), array(1, 2))]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5263</id>
	<key><![CDATA[The id must be an integer or a blocktype identifier similar to the type returned from get_block_at (eg. "0:0"). If the meta value is not specified, 0 is used. If world isn't specified, the current player's world is used. Physics (which defaults to true) specifies whether or not to update the surrounding blocks when this block is set.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5264</id>
	<key><![CDATA[Sets the id of the block at the x y z coordinates specified. (deprecated for %s)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5265</id>
	<key><![CDATA[Spawns qty mob of one of the following types at location. qty defaults to 1, and location defaults to the location of the player. An array of the entity UUIDs spawned is returned. (deprecated for %s)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5266</id>
	<key><![CDATA[Tames any tameable mob to the specified player. (deprecated for %s)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5267</id>
	<key><![CDATA[Offline players are supported, but this means that partial matches are NOT supported. You must type the players name exactly. Setting the player to %s will untame the mob. If the entity doesn't exist, nothing happens.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5268</id>
	<key><![CDATA[By default, the ability to run CGI applications is disabled, and must be enabled. In general, these instructions are taken from %s (where you can also find other versions).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5269</id>
	<key><![CDATA[Regardless, you'll need Java and your server of choice installed, as well as the MethodScript jar. Installation of these things is outside the scope of this tutorial, and it is assumed that you have basic web pages being displayed through your server. The guide also assumes that you're running on Ubuntu Linux, except for IIS, which is assumed to be running on Windows Server Datacenter 2019. If this is not the case, the basic setup should nonetheless be the same, but you may  need to modify file paths.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5270</id>
	<key><![CDATA[Example Script]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5271</id>
	<key><![CDATA[We need to grant the IUSR user permission to access the relevant folders. Create a new folder under ProgramFiles named MethodScript, and place the MethodScript jar in this folder. We also need to install the cmdline version, as IIS will not run the jar, but needs an .exe file. From an Administrator command prompt, run  '''java -jar MethodScript.jar install-cmdline'''. This will install mscript.exe in ProgramFiles/MethodScript. Grant the '''IUSR''' user access to read, execute, and write to this folder.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5272</id>
	<key><![CDATA[Configure CGI]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5273</id>
	<key><![CDATA[IIS]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5274</id>
	<key><![CDATA[Create a second folder which will contain the scripts. The location is not relevant, but this assumes a bin/ folder on your Desktop.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5275</id>
	<key><![CDATA[Launch the Server Manager from the task bar, click Manage (at the top right) then "Add Roles and Features". On Installation Type, select "Role-based or feature-based installation". Select the local server. Expand "Web Server (IIS)", "Web Server", "Application Development" and select CGI. (Note that this also installs FastCGI capabilities.) Click Next on the Select Features page, then  check the restart automatically checkbox, then Install. Restart IIS Manager, and the icon should appear.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5276</id>
	<key><![CDATA[Enable CGI]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5277</id>
	<key><![CDATA[particle: The particle type which comprises the cloud (can be SMOKE_NORMAL, ENCHANTMENT_TABLE, REDSTONE, SNOW_SHOVEL, BUBBLE_COLUMN_UP, SPELL_MOB, CAMPFIRE_SIGNAL_SMOKE, BLOCK_DUST, SWEEP_ATTACK, WATER_SPLASH, LANDING_LAVA, SLIME, FALLING_LAVA, DRAGON_BREATH, CURRENT_DOWN, ITEM_CRACK, FALLING_DUST, SNEEZE, WATER_BUBBLE, FLASH, VILLAGER_ANGRY, HEART, END_ROD, CRIT_MAGIC, SUSPENDED, WATER_DROP, SPELL, FALLING_WATER, SPELL_INSTANT, LAVA, VILLAGER_HAPPY, SQUID_INK, CRIT, CLOUD, BUBBLE_POP, COMPOSTER, NAUTILUS, EXPLOSION_LARGE, TOWN_AURA, SUSPENDED_DEPTH, CAMPFIRE_COSY_SMOKE, NOTE, SNOWBALL, SPELL_MOB_AMBIENT, DAMAGE_INDICATOR, SMOKE_LARGE, TOTEM, BARRIER, EXPLOSION_NORMAL, FLAME, SPIT, PORTAL, MOB_APPEARANCE, DOLPHIN, SPELL_WITCH, DRIP_WATER, EXPLOSION_HUGE, WATER_WAKE, UNKNOWN, FIREWORKS_SPARK, DRIP_LAVA, or BLOCK_CRACK). Can accept a particle array for setting index data required for specific particle types. This particle array must contain a "particle" key, and supports the keys "block", "item", or "color" when applicable.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5278</id>
	<key><![CDATA[color: The color array of the particle, if applicable (eg. SPELL_MOB particle type).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5279</id>
	<key><![CDATA[Possible particle types: SMOKE_NORMAL, ENCHANTMENT_TABLE, REDSTONE, SNOW_SHOVEL, BUBBLE_COLUMN_UP, SPELL_MOB, CAMPFIRE_SIGNAL_SMOKE, BLOCK_DUST, SWEEP_ATTACK, WATER_SPLASH, LANDING_LAVA, SLIME, FALLING_LAVA, DRAGON_BREATH, CURRENT_DOWN, ITEM_CRACK, FALLING_DUST, SNEEZE, WATER_BUBBLE, FLASH, VILLAGER_ANGRY, HEART, END_ROD, CRIT_MAGIC, SUSPENDED, WATER_DROP, SPELL, FALLING_WATER, SPELL_INSTANT, LAVA, VILLAGER_HAPPY, SQUID_INK, CRIT, CLOUD, BUBBLE_POP, COMPOSTER, NAUTILUS, EXPLOSION_LARGE, TOWN_AURA, SUSPENDED_DEPTH, CAMPFIRE_COSY_SMOKE, NOTE, SNOWBALL, SPELL_MOB_AMBIENT, DAMAGE_INDICATOR, SMOKE_LARGE, TOTEM, BARRIER, EXPLOSION_NORMAL, FLAME, SPIT, PORTAL, MOB_APPEARANCE, DOLPHIN, SPELL_WITCH, DRIP_WATER, EXPLOSION_HUGE, WATER_WAKE, UNKNOWN, FIREWORKS_SPARK, DRIP_LAVA, or BLOCK_CRACK.  Some particles have more specific keys and/or special behavior, but the common keys for the particle array are "count" (usually the number of particles to be spawned), "speed" (usually the velocity of the particle), "xoffset", "yoffset", and "zoffset" (usually the ranges from center within which the particle may be offset on that axis).  BLOCK_DUST, BLOCK_CRACK and FALLING_DUST particles can take a block type name parameter under the key "block" (default: STONE).  ITEM_CRACK particles can take an item array or name under the key "item" (default: STONE).  REDSTONE particles take an RGB color array (each 0 - 255) or name under the key "color" (default: RED).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5280</id>
	<key><![CDATA[Contains various methods for interacting with the Operating System. Some of the functions deal with OS specific mechanisms.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5281</id>
	<key><![CDATA[OS]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5282</id>
	<key><![CDATA[Returns the process id (pid) of the current process. In some implementations of Java, this cannot be relied on, and in those cases, an UnsupportedOperationException is thrown. In Java 9 and above, this can generally be relied upon to work correctly, however.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5283</id>
	<key><![CDATA[ArrayHandling%sBasicLogic%sBossBar%sBukkitMetadata%sByteArrays%sClipboard%sCmdline%sCommands%sCompiler%sControlFlow%sCrypto%sDataHandling%sDataTransformations%sDebug%sEchoes%sEnchantments%sEntityManagement%sEnvironment%sEventBinding%sExceptions%sExecutionQueue%sExtensionMeta%sFileHandling%sInventoryManagement%sItemMeta%sMarquee%sMath%sMeta%sMinecraft%sMobManagement%sOAuth%sOS%sObjectManagement%sPerformance%sPermissions%sPersistence%sPlayerManagement%sPluginMeta%sRecipes%sReflection%sRegex%sResourceManager%sSQL%sSandbox%sScheduling%sScoreboards%sStatistics%sStringHandling%sTaskHandling%sThreading%sTrades%sWeather%sWeb%sWorld%sXGUI]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5284</id>
	<key><![CDATA[Edit the /etc/nginx/sites-available/default file. Within the server {} section, add a link to the config file.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5285</id>
	<key><![CDATA[Copy the example config file into the nginx config directory.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5286</id>
	<key><![CDATA[Create a file at /etc/nginx/fcgiwrap.conf, with the following content:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5287</id>
	<key><![CDATA[NGINX]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5288</id>
	<key><![CDATA[First, ensure that nginx is properly installed and running. We will be using the fastcgi wrapper, though we will not be taking advantage of its daemon features, so this is not a true FastCGI application.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5289</id>
	<key><![CDATA[Create the cgi-bin folder, and assign the correct permissions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5290</id>
	<key><![CDATA[Restart nginx.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5291</id>
	<key><![CDATA[If you would like the server to start on server boot, run]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5292</id>
	<key><![CDATA[Systemd integration]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5293</id>
	<key><![CDATA[Nginx]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5294</id>
	<key><![CDATA[Before starting, you must choose a server frontend. This may be any server that supports reverse proxying, but Apache and Nginx are the only tested server types. While possible, it is highly discouraged from exposing the MethodScript web server directly to the internet, and further, since it does not support serving static files, it cannot be used in a useful way otherwise.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5295</id>
	<key><![CDATA[On unix systems where systemd is installed (or more specifically, where a folder exists at /lib/systemd/system, msws integrates with systemd. It supports starting, stopping, restarting, and reloading. Reloading maps to the --recompile flag. The name of the service is "msws".]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5296</id>
	<key><![CDATA[MSWS can only serve scripts. Therefore, you need to configure your primary web server to serve static files, such as css and javascript files, and only configure the frontend server to call to MSWS for .ms files.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5297</id>
	<key><![CDATA[If you want to stop the server when it's running in background mode, you can run]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5298</id>
	<key><![CDATA[as root/Administrator. If prompted, reboot your computer. Note that this step is not optional -- several portions of the system assume there is an executable binary named "mscript" on your system.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5299</id>
	<key><![CDATA[Next, we want to test to ensure that a connection can be made to the server. Take note of the port listed in webserver.ini. By default, this is 16438, though if you changed this, use the new value in place. On Windows, open a web browser, and go to "%s".  (On Linux, run curl "%s) If everything is working, you should get a 404. Since we have not created any scripts, this is expected, but it means that the server is up and accepting connections. If you get a connection refused error, restart the server in --foreground mode, and check the server startup logs to see if there is an error.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5300</id>
	<key><![CDATA[Installing MSWS]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5301</id>
	<key><![CDATA[MethodScript supports running as a web server behind a web server frontend, such as Apache or Nginx. This functionality is not installed, configured, or running by default, so a bit of setup is required to enable the feature.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5302</id>
	<key><![CDATA[Since MSWS is not expected to be directly exposed to the internet, we require a frontend server, such as Apache or Nginx. MSWS communicates via standard http, and both Apache and Nginx have good support for "Reverse Proxying". In general, however, you are not limited to Apache or Nginx, however, they are the only frontends documented here. Using another web server should be possible if you adapt these instructions to that platform.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5303</id>
	<key><![CDATA[as root/Administrator. This will create a configuration file in your prefs folder, named webserver.ini. Open this file in a text editor, and configure it to your liking. Reasonable defaults have been selected, but you may wish to choose different values for this, particularly the server root.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5304</id>
	<key><![CDATA[While developing, you can recompile scripts with]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5305</id>
	<key><![CDATA[Ensure that the server starts up correctly. If so, kill the process with ctrl+c, so we can start it back up in background mode (daemon mode).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5306</id>
	<key><![CDATA[Apache]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5307</id>
	<key><![CDATA[Using MSWS]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5308</id>
	<key><![CDATA[Integrating with a server frontend]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5309</id>
	<key><![CDATA[The next step is to install the webserver component. This creates the necessary config files, as well as integrating with systemd on unix systems, if installed. To install, run]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5310</id>
	<key><![CDATA[The zeroth step is to install MethodScript to the command line. To do this, run]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5311</id>
	<key><![CDATA[On all systems, a basic frontend is included by default. This allows you to start and stop the webserver, as well as recompile on demand. To increase performance, all server files are compiled once at startup, and then are no longer scanned, so recompilation is necessary during active development. In any case, the first step is to start up the web server. For test purposes, we will start the server in the foreground, so we can see any logging output.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5312</id>
	<key><![CDATA[Fires when a player left or right clicks a block or the air. Note that this event may fire for the main hand, off hand, or twice, one for each hand, depending on the item priority and what is clicked. If you don't want multiple events, you can prefilter on hand.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5313</id>
	<key><![CDATA[This event is fired off when a player runs any command at all. This actually fires before normal CommandHelper aliases, allowing you to insert control before defined aliases, even.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5314</id>
	<key><![CDATA[Returns the name of the inventory holder specified. If the block or entity can&apos;t have an inventory or a name, an IllegalArgumentException is thrown. If the inventory was not given a title, an empty string is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5315</id>
	<key><![CDATA[VEX]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5316</id>
	<key><![CDATA[charging: Whether or not this vex is charging.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5317</id>
	<key><![CDATA[Returns the name of the inventory holder specified. If the block or entity can't have an inventory or a name, an IllegalArgumentException is thrown. If the inventory was not given a title, an empty string is returned.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5318</id>
	<key><![CDATA[Returns an associative array containing the values of all existing gamerules for the given world. If the gameRule parameter is specified, the function only returns that one value instead of an array. The gameRule can be ANNOUNCEADVANCEMENTS, COMMANDBLOCKOUTPUT, DISABLEELYTRAMOVEMENTCHECK, DISABLERAIDS, DODAYLIGHTCYCLE, DOENTITYDROPS, DOFIRETICK, DOIMMEDIATERESPAWN, DOINSOMNIA, DOLIMITEDCRAFTING, DOMOBLOOT, DOMOBSPAWNING, DOTILEDROPS, DOWEATHERCYCLE, DROWNINGDAMAGE, FALLDAMAGE, FIREDAMAGE, KEEPINVENTORY, LOGADMINCOMMANDS, MAXCOMMANDCHAINLENGTH, MAXENTITYCRAMMING, MOBGRIEFING, NATURALREGENERATION, RANDOMTICKSPEED, REDUCEDDEBUGINFO, SENDCOMMANDFEEDBACK, SHOWDEATHMESSAGES, SPAWNRADIUS, or SPECTATORSGENERATECHUNKS.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5319</id>
	<key><![CDATA[Returns an array of all entities within the given distance from the location. Set type argument to filter entities to a specific entity type. You can pass an array of types. Valid types (case doesn&apos;t matter): DROPPED_ITEM, MAGMA_CUBE, SILVERFISH, MULE, HUSK, VINDICATOR, PILLAGER, SHULKER_BULLET, VILLAGER, AREA_EFFECT_CLOUD, PAINTING, TURTLE, TRADER_LLAMA, SMALL_FIREBALL, CAVE_SPIDER, SLIME, DROWNED, FIREBALL, EVOKER, MINECART_HOPPER, ENDERMITE, PLAYER, SALMON, ZOMBIE, PANDA, MINECART_COMMAND, OCELOT, ENDERMAN, ZOMBIE_VILLAGER, LLAMA, ENDER_DRAGON, WITCH, EXPERIENCE_ORB, ITEM_FRAME, WITHER, ARROW, CREEPER, ILLUSIONER, COD, ENDER_EYE, ZOMBIE_HORSE, MINECART_TNT, FIREWORK, PRIMED_TNT, RAVAGER, BOAT, SHULKER, FISHING_HOOK, BEE, PHANTOM, BLAZE, SKELETON_HORSE, COW, WANDERING_TRADER, PIG, MINECART_MOB_SPAWNER, WOLF, IRON_GOLEM, PIG_ZOMBIE, SHEEP, VEX, ENDER_PEARL, TRIDENT, POLAR_BEAR, MINECART, SNOWMAN, MINECART_CHEST, LEASH_HITCH, SQUID, DRAGON_FIREBALL, ELDER_GUARDIAN, HORSE, ARMOR_STAND, LIGHTNING, PARROT, EVOKER_FANGS, FOX, GIANT, STRAY, SPECTRAL_ARROW, CAT, RABBIT, DONKEY, ENDER_CRYSTAL, TROPICAL_FISH, SPIDER, SKELETON, WITHER_SKELETON, MUSHROOM_COW, CHICKEN, SNOWBALL, THROWN_EXP_BOTTLE, WITHER_SKULL, PUFFERFISH, GUARDIAN, EGG, LLAMA_SPIT, FALLING_BLOCK, SPLASH_POTION, GHAST, BAT, DOLPHIN, MINECART_FURNACE, or UNKNOWN]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5320</id>
	<key><![CDATA[Sets the value of the gamerule for the specified world. If world is not given the value is set for all worlds. Returns true if successful. gameRule can be ANNOUNCEADVANCEMENTS, COMMANDBLOCKOUTPUT, DISABLEELYTRAMOVEMENTCHECK, DISABLERAIDS, DODAYLIGHTCYCLE, DOENTITYDROPS, DOFIRETICK, DOIMMEDIATERESPAWN, DOINSOMNIA, DOLIMITEDCRAFTING, DOMOBLOOT, DOMOBSPAWNING, DOTILEDROPS, DOWEATHERCYCLE, DROWNINGDAMAGE, FALLDAMAGE, FIREDAMAGE, KEEPINVENTORY, LOGADMINCOMMANDS, MAXCOMMANDCHAINLENGTH, MAXENTITYCRAMMING, MOBGRIEFING, NATURALREGENERATION, RANDOMTICKSPEED, REDUCEDDEBUGINFO, SENDCOMMANDFEEDBACK, SHOWDEATHMESSAGES, SPAWNRADIUS, or SPECTATORSGENERATECHUNKS.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5321</id>
	<key><![CDATA[Returns an array of all entities within the given distance from the location. Set type argument to filter entities to a specific entity type. You can pass an array of types. Valid types (case doesn't matter): DROPPED_ITEM, MAGMA_CUBE, SILVERFISH, MULE, HUSK, VINDICATOR, PILLAGER, SHULKER_BULLET, VILLAGER, AREA_EFFECT_CLOUD, PAINTING, TURTLE, TRADER_LLAMA, SMALL_FIREBALL, CAVE_SPIDER, SLIME, DROWNED, FIREBALL, EVOKER, MINECART_HOPPER, ENDERMITE, PLAYER, SALMON, ZOMBIE, PANDA, MINECART_COMMAND, OCELOT, ENDERMAN, ZOMBIE_VILLAGER, LLAMA, ENDER_DRAGON, WITCH, EXPERIENCE_ORB, ITEM_FRAME, WITHER, ARROW, CREEPER, ILLUSIONER, COD, ENDER_EYE, ZOMBIE_HORSE, MINECART_TNT, FIREWORK, PRIMED_TNT, RAVAGER, BOAT, SHULKER, FISHING_HOOK, BEE, PHANTOM, BLAZE, SKELETON_HORSE, COW, WANDERING_TRADER, PIG, MINECART_MOB_SPAWNER, WOLF, IRON_GOLEM, PIG_ZOMBIE, SHEEP, VEX, ENDER_PEARL, TRIDENT, POLAR_BEAR, MINECART, SNOWMAN, MINECART_CHEST, LEASH_HITCH, SQUID, DRAGON_FIREBALL, ELDER_GUARDIAN, HORSE, ARMOR_STAND, LIGHTNING, PARROT, EVOKER_FANGS, FOX, GIANT, STRAY, SPECTRAL_ARROW, CAT, RABBIT, DONKEY, ENDER_CRYSTAL, TROPICAL_FISH, SPIDER, SKELETON, WITHER_SKELETON, MUSHROOM_COW, CHICKEN, SNOWBALL, THROWN_EXP_BOTTLE, WITHER_SKULL, PUFFERFISH, GUARDIAN, EGG, LLAMA_SPIT, FALLING_BLOCK, SPLASH_POTION, GHAST, BAT, DOLPHIN, MINECART_FURNACE, or UNKNOWN]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5322</id>
	<key><![CDATA[hivelocation: The location array of the bee's hive, or %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5323</id>
	<key><![CDATA[anger: The remaining time in ticks that the bee is angry.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5324</id>
	<key><![CDATA[particle: The particle type which comprises the cloud (can be SMOKE_NORMAL, ENCHANTMENT_TABLE, REDSTONE, SNOW_SHOVEL, BUBBLE_COLUMN_UP, SPELL_MOB, CAMPFIRE_SIGNAL_SMOKE, BLOCK_DUST, FALLING_HONEY, SWEEP_ATTACK, WATER_SPLASH, LANDING_LAVA, SLIME, FALLING_LAVA, DRAGON_BREATH, CURRENT_DOWN, DRIPPING_HONEY, ITEM_CRACK, FALLING_DUST, SNEEZE, WATER_BUBBLE, FLASH, VILLAGER_ANGRY, HEART, LANDING_HONEY, END_ROD, FALLING_NECTAR, CRIT_MAGIC, SUSPENDED, WATER_DROP, SPELL, FALLING_WATER, SPELL_INSTANT, LAVA, VILLAGER_HAPPY, SQUID_INK, CRIT, CLOUD, BUBBLE_POP, COMPOSTER, NAUTILUS, EXPLOSION_LARGE, TOWN_AURA, SUSPENDED_DEPTH, CAMPFIRE_COSY_SMOKE, NOTE, SNOWBALL, SPELL_MOB_AMBIENT, DAMAGE_INDICATOR, SMOKE_LARGE, TOTEM, BARRIER, EXPLOSION_NORMAL, FLAME, SPIT, PORTAL, MOB_APPEARANCE, DOLPHIN, SPELL_WITCH, DRIP_WATER, EXPLOSION_HUGE, WATER_WAKE, UNKNOWN, FIREWORKS_SPARK, DRIP_LAVA, or BLOCK_CRACK). Can accept a particle array for setting index data required for specific particle types. This particle array must contain a "particle" key, and supports the keys "block", "item", or "color" when applicable.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5325</id>
	<key><![CDATA[stung: Whether or not the bee has stung something.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5326</id>
	<key><![CDATA[BEE]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5327</id>
	<key><![CDATA[flowerlocation: The location array of the flower the bee is targeting, or %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5328</id>
	<key><![CDATA[nector: Whether or not the bee is carrying pollen.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5329</id>
	<key><![CDATA['''spawntype''' : (string) May be one of ''AREA_EFFECT_CLOUD, ARMOR_STAND, ARROW, BAT, BEE, BLAZE, BOAT, CAT, CAVE_SPIDER, CHICKEN, COD, COW, CREEPER, DOLPHIN, DRAGON_FIREBALL, DROPPED_ITEM, DROWNED, DONKEY, EGG, ELDER_GUARDIAN, ENDERMAN, ENDERMITE, ENDER_CRYSTAL, ENDER_DRAGON, ENDER_EYE, ENDER_PEARL, EVOKER, EVOKER_FANGS, EXPERIENCE_ORB, FALLING_BLOCK, FIREBALL, FIREWORK, FOX, GHAST, GIANT, GUARDIAN, HORSE, HUSK, ILLUSIONER, IRON_GOLEM, ITEM_FRAME, LLAMA, LLAMA_SPIT, LEASH_HITCH, LIGHTNING, MAGMA_CUBE, MINECART, MINECART_CHEST, MINECART_COMMAND, MINECART_FURNACE, MINECART_HOPPER, MINECART_MOB_SPAWNER, MINECART_TNT, MULE, MUSHROOM_COW, OCELOT, PAINTING, PANDA, PARROT, PHANTOM, PIG, PIG_ZOMBIE, PILLAGER, POLAR_BEAR, PRIMED_TNT, PUFFERFISH, RABBIT, RAVAGER, SALMON, SHEEP, SILVERFISH, SKELETON, SHULKER, SHULKER_BULLET, SKELETON_HORSE, SLIME, SMALL_FIREBALL, SNOWBALL, SNOWMAN, SQUID, SPECTRAL_ARROW, SPIDER, SPLASH_POTION, STRAY, THROWN_EXP_BOTTLE, TRADER_LLAMA, TRIDENT, TROPICAL_FISH, TURTLE, VEX, VILLAGER, VINDICATOR, WANDERING_TRADER, WITCH, WITHER, WITHER_SKELETON, WITHER_SKULL, WOLF, ZOMBIE, ZOMBIE_HORSE, or ZOMBIE_VILLAGER''. Not all entity types will spawn from spawners, and some require special conditions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5330</id>
	<key><![CDATA[Beehive]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5331</id>
	<key><![CDATA['''flowerlocation''' : (array) The location of a flower for bees to target, or %s if there is none.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5332</id>
	<key><![CDATA[Possible sounds: ENTITY_FOX_HURT%sENTITY_SPIDER_STEP%sENTITY_IRON_GOLEM_STEP%sBLOCK_WOODEN_TRAPDOOR_CLOSE%sBLOCK_DISPENSER_LAUNCH%sENTITY_SALMON_DEATH%sBLOCK_GLASS_STEP%sENTITY_ZOMBIE_VILLAGER_STEP%sAMBIENT_UNDERWATER_ENTER%sENTITY_PANDA_EAT%sENTITY_RAVAGER_HURT%sENTITY_VILLAGER_WORK_BUTCHER%sBLOCK_LADDER_HIT%sENCHANT_THORNS_HIT%sENTITY_DROWNED_SHOOT%sENTITY_ITEM_FRAME_ADD_ITEM%sENTITY_PARROT_IMITATE_MAGMA_CUBE%sITEM_TRIDENT_THUNDER%sENTITY_SILVERFISH_DEATH%sENTITY_FOX_AMBIENT%sENTITY_SPLASH_POTION_THROW%sENTITY_PANDA_HURT%sENTITY_FOX_SNIFF%sENTITY_TURTLE_DEATH_BABY%sENTITY_BLAZE_SHOOT%sITEM_BOTTLE_FILL%sENTITY_PARROT_DEATH%sBLOCK_BAMBOO_SAPLING_BREAK%sBLOCK_PUMPKIN_CARVE%sENTITY_VILLAGER_CELEBRATE%sMUSIC_DISC_STRAD%sBLOCK_METAL_PRESSURE_PLATE_CLICK_ON%sENTITY_GHAST_WARN%sITEM_ELYTRA_FLYING%sITEM_BUCKET_FILL_LAVA%sENTITY_GHAST_SCREAM%sENTITY_ILLUSIONER_CAST_SPELL%sENTITY_FOX_SLEEP%sENTITY_ENDER_PEARL_THROW%sENTITY_PUFFER_FISH_HURT%sENTITY_FIREWORK_ROCKET_LAUNCH%sBLOCK_SWEET_BERRY_BUSH_BREAK%sENTITY_PLAYER_SMALL_FALL%sENTITY_ILLUSIONER_MIRROR_MOVE%sENTITY_SLIME_DEATH%sENTITY_SPIDER_DEATH%sENTITY_SHULKER_BULLET_HURT%sENTITY_ENDER_DRAGON_SHOOT%sENTITY_PARROT_IMITATE_BLAZE%sBLOCK_GRASS_STEP%sENTITY_PARROT_IMITATE_SPIDER%sENTITY_ELDER_GUARDIAN_CURSE%sITEM_ARMOR_EQUIP_ELYTRA%sBLOCK_WET_GRASS_STEP%sENTITY_IRON_GOLEM_REPAIR%sENTITY_VEX_HURT%sENTITY_WITCH_HURT%sENTITY_WITHER_SKELETON_AMBIENT%sUI_BUTTON_CLICK%sENTITY_ZOMBIE_AMBIENT%sBLOCK_NOTE_BLOCK_BASS%sENTITY_CAT_AMBIENT%sBLOCK_NOTE_BLOCK_IRON_XYLOPHONE%sENTITY_CHICKEN_EGG%sENTITY_ZOMBIE_HORSE_HURT%sITEM_SWEET_BERRIES_PICK_FROM_BUSH%sBLOCK_CORAL_BLOCK_STEP%sENTITY_SKELETON_HORSE_GALLOP_WATER%sENTITY_PUFFER_FISH_AMBIENT%sENTITY_COD_AMBIENT%sITEM_TRIDENT_RIPTIDE_2%sENTITY_ITEM_PICKUP%sENTITY_LIGHTNING_BOLT_IMPACT%sITEM_TRIDENT_RIPTIDE_1%sBLOCK_SWEET_BERRY_BUSH_PLACE%sENTITY_ZOMBIE_VILLAGER_CURE%sITEM_TRIDENT_RIPTIDE_3%sBLOCK_CHORUS_FLOWER_DEATH%sENTITY_MULE_CHEST%sENTITY_TURTLE_EGG_HATCH%sENTITY_LLAMA_DEATH%sENTITY_PARROT_IMITATE_RAVAGER%sENTITY_ENDERMITE_AMBIENT%sBLOCK_LAVA_AMBIENT%sITEM_BOOK_PUT%sENTITY_PLAYER_ATTACK_NODAMAGE%sENTITY_VILLAGER_TRADE%sBLOCK_NOTE_BLOCK_FLUTE%sENTITY_DROWNED_AMBIENT%sBLOCK_BAMBOO_SAPLING_PLACE%sENTITY_SQUID_AMBIENT%sBLOCK_ANVIL_USE%sENTITY_HUSK_CONVERTED_TO_ZOMBIE%sENTITY_ENDER_DRAGON_DEATH%sENTITY_LLAMA_SPIT%sENTITY_SILVERFISH_AMBIENT%sENTITY_PARROT_FLY%sITEM_ARMOR_EQUIP_GENERIC%sENTITY_ENDER_DRAGON_FLAP%sENTITY_PUFFER_FISH_BLOW_UP%sENTITY_POLAR_BEAR_WARNING%sENTITY_MAGMA_CUBE_DEATH_SMALL%sENTITY_PARROT_IMITATE_ENDER_DRAGON%sENTITY_WITCH_DEATH%sBLOCK_WOODEN_DOOR_CLOSE%sENTITY_SKELETON_HORSE_AMBIENT%sBLOCK_SNOW_STEP%sENTITY_PHANTOM_AMBIENT%sENTITY_EXPERIENCE_ORB_PICKUP%sENTITY_WOLF_WHINE%sENTITY_ARROW_SHOOT%sBLOCK_SLIME_BLOCK_HIT%sENTITY_BLAZE_DEATH%sBLOCK_ANVIL_PLACE%sENTITY_MULE_AMBIENT%sENTITY_PARROT_IMITATE_ZOMBIE_VILLAGER%sENTITY_PARROT_HURT%sENTITY_PIG_AMBIENT%sENTITY_FOX_BITE%sBLOCK_BEEHIVE_ENTER%sENTITY_GUARDIAN_HURT%sENTITY_WITHER_SKELETON_DEATH%sBLOCK_WOOD_PLACE%sBLOCK_SNOW_FALL%sENTITY_HORSE_STEP%sBLOCK_CORAL_BLOCK_BREAK%sAMBIENT_CAVE%sENTITY_HORSE_EAT%sBLOCK_HONEY_BLOCK_BREAK%sENTITY_PARROT_IMITATE_SHULKER%sENTITY_ARMOR_STAND_FALL%sENTITY_ZOMBIE_VILLAGER_DEATH%sBLOCK_CONDUIT_AMBIENT_SHORT%sENTITY_SKELETON_HORSE_HURT%sENTITY_HORSE_AMBIENT%sENTITY_PIG_STEP%sUI_TOAST_OUT%sBLOCK_CORAL_BLOCK_HIT%sENTITY_SNOW_GOLEM_AMBIENT%sENTITY_MINECART_INSIDE%sENTITY_BEE_DEATH%sENTITY_EVOKER_FANGS_ATTACK%sBLOCK_ENCHANTMENT_TABLE_USE%sENTITY_OCELOT_HURT%sITEM_CROSSBOW_HIT%sENTITY_SHULKER_CLOSE%sENTITY_PARROT_IMITATE_ENDERMITE%sITEM_CROSSBOW_LOADING_END%sUI_TOAST_IN%sBLOCK_GLASS_FALL%sENTITY_WOLF_AMBIENT%sENTITY_BAT_HURT%sENTITY_ARMOR_STAND_HIT%sITEM_BUCKET_EMPTY_FISH%sENTITY_WANDERING_TRADER_AMBIENT%sENTITY_SLIME_JUMP%sENTITY_CAT_HISS%sENTITY_LINGERING_POTION_THROW%sENTITY_ELDER_GUARDIAN_DEATH%sENTITY_DONKEY_HURT%sENTITY_LLAMA_EAT%sENTITY_FISH_SWIM%sENTITY_ILLUSIONER_HURT%sENTITY_WANDERING_TRADER_DRINK_MILK%sENTITY_EVOKER_PREPARE_WOLOLO%sENTITY_LLAMA_ANGRY%sENTITY_HOSTILE_SPLASH%sENTITY_DROWNED_HURT%sITEM_HOE_TILL%sENTITY_ELDER_GUARDIAN_FLOP%sENTITY_BEE_LOOP_AGGRESSIVE%sBLOCK_WOODEN_PRESSURE_PLATE_CLICK_OFF%sENTITY_GHAST_HURT%sBLOCK_WET_GRASS_PLACE%sBLOCK_ANVIL_BREAK%sENTITY_ZOMBIE_DEATH%sENTITY_CAT_PURR%sENTITY_DONKEY_CHEST%sBLOCK_SCAFFOLDING_HIT%sENTITY_LLAMA_SWAG%sENTITY_PARROT_IMITATE_EVOKER%sENTITY_HORSE_SADDLE%sMUSIC_GAME%sENTITY_ITEM_FRAME_ROTATE_ITEM%sENTITY_GENERIC_DRINK%sENTITY_PANDA_DEATH%sBLOCK_WET_GRASS_FALL%sENTITY_PARROT_IMITATE_ILLUSIONER%sBLOCK_ANVIL_STEP%sENTITY_HUSK_HURT%sBLOCK_COMPOSTER_READY%sENTITY_WITHER_SKELETON_STEP%sBLOCK_CONDUIT_AMBIENT%sENTITY_MOOSHROOM_SHEAR%sBLOCK_WOOD_BREAK%sBLOCK_BUBBLE_COLUMN_WHIRLPOOL_INSIDE%sENTITY_VILLAGER_WORK_TOOLSMITH%sENTITY_GENERIC_EAT%sENTITY_BLAZE_HURT%sENTITY_SLIME_HURT%sBLOCK_GRASS_FALL%sBLOCK_NOTE_BLOCK_COW_BELL%sBLOCK_CORAL_BLOCK_PLACE%sENTITY_PHANTOM_SWOOP%sBLOCK_HONEY_BLOCK_PLACE%sENTITY_WANDERING_TRADER_DRINK_POTION%sBLOCK_GLASS_HIT%sBLOCK_NOTE_BLOCK_CHIME%sENTITY_OCELOT_AMBIENT%sENTITY_WITCH_CELEBRATE%sENTITY_PARROT_EAT%sENTITY_CHICKEN_DEATH%sENTITY_MINECART_RIDING%sENTITY_COW_HURT%sBLOCK_NOTE_BLOCK_SNARE%sENTITY_DOLPHIN_HURT%sBLOCK_TRIPWIRE_CLICK_OFF%sENTITY_WITHER_DEATH%sENTITY_PLAYER_BIG_FALL%sENTITY_FISHING_BOBBER_THROW%sENTITY_POLAR_BEAR_AMBIENT_BABY%sBLOCK_WOODEN_TRAPDOOR_OPEN%sENTITY_DOLPHIN_SPLASH%sBLOCK_GLASS_BREAK%sENTITY_SKELETON_STEP%sENTITY_LIGHTNING_BOLT_THUNDER%sUI_LOOM_TAKE_RESULT%sENTITY_DOLPHIN_JUMP%sENTITY_GUARDIAN_DEATH_LAND%sENTITY_ENDERMAN_AMBIENT%sENTITY_ILLUSIONER_AMBIENT%sBLOCK_END_PORTAL_FRAME_FILL%sENTITY_FIREWORK_ROCKET_TWINKLE%sENTITY_GHAST_SHOOT%sENTITY_PUFFER_FISH_BLOW_OUT%sENTITY_SLIME_HURT_SMALL%sENTITY_STRAY_DEATH%sENTITY_ZOMBIE_VILLAGER_CONVERTED%sENTITY_PLAYER_HURT_SWEET_BERRY_BUSH%sENTITY_VINDICATOR_AMBIENT%sBLOCK_CROP_BREAK%sENTITY_DOLPHIN_DEATH%sBLOCK_METAL_STEP%sBLOCK_WOODEN_DOOR_OPEN%sENTITY_FISHING_BOBBER_SPLASH%sENTITY_COW_MILK%sENTITY_PLAYER_ATTACK_STRONG%sENTITY_CAT_EAT%sENTITY_SHULKER_SHOOT%sBLOCK_WOODEN_BUTTON_CLICK_ON%sENTITY_ZOMBIE_INFECT%sENTITY_HORSE_GALLOP%sBLOCK_ANVIL_FALL%sBLOCK_BAMBOO_BREAK%sUI_LOOM_SELECT_PATTERN%sENTITY_VILLAGER_AMBIENT%sENTITY_WITHER_SKELETON_HURT%sMUSIC_DISC_WAIT%sENTITY_ZOMBIE_PIGMAN_AMBIENT%sBLOCK_BAMBOO_FALL%sBLOCK_COMPOSTER_EMPTY%sENTITY_SNOWBALL_THROW%sENTITY_ENDERMAN_DEATH%sENTITY_VILLAGER_WORK_SHEPHERD%sENTITY_GUARDIAN_DEATH%sENTITY_SHEEP_AMBIENT%sENTITY_ILLUSIONER_PREPARE_BLINDNESS%sBLOCK_IRON_TRAPDOOR_OPEN%sENTITY_GHAST_DEATH%sENTITY_PLAYER_SPLASH_HIGH_SPEED%sENTITY_VILLAGER_WORK_LIBRARIAN%sENTITY_WANDERING_TRADER_DISAPPEARED%sBLOCK_LADDER_FALL%sENTITY_WOLF_PANT%sENTITY_SNOW_GOLEM_HURT%sENTITY_RAVAGER_STEP%sBLOCK_NOTE_BLOCK_BELL%sBLOCK_BAMBOO_PLACE%sBLOCK_CHEST_CLOSE%sENTITY_PANDA_PRE_SNEEZE%sBLOCK_METAL_FALL%sBLOCK_LADDER_PLACE%sENTITY_BOAT_PADDLE_WATER%sENTITY_ZOMBIE_ATTACK_WOODEN_DOOR%sENTITY_SKELETON_HORSE_JUMP_WATER%sBLOCK_WOOD_FALL%sAMBIENT_UNDERWATER_LOOP_ADDITIONS%sENTITY_FOX_SCREECH%sENTITY_VILLAGER_NO%sENTITY_PARROT_IMITATE_SKELETON%sENTITY_WANDERING_TRADER_REAPPEARED%sENTITY_VILLAGER_YES%sBLOCK_SAND_STEP%sENTITY_GENERIC_HURT%sENTITY_PIG_SADDLE%sBLOCK_ANVIL_HIT%sBLOCK_PORTAL_TRAVEL%sENTITY_RAVAGER_AMBIENT%sMUSIC_DISC_FAR%sBLOCK_CONDUIT_ACTIVATE%sENTITY_SHEEP_STEP%sENTITY_SHULKER_DEATH%sENTITY_VEX_DEATH%sENTITY_OCELOT_DEATH%sMUSIC_END%sENTITY_CAT_STRAY_AMBIENT%sENTITY_PARROT_IMITATE_STRAY%sBLOCK_SAND_HIT%sBLOCK_BEACON_POWER_SELECT%sENTITY_VILLAGER_WORK_MASON%sITEM_CHORUS_FRUIT_TELEPORT%sBLOCK_CONDUIT_ATTACK_TARGET%sENTITY_ELDER_GUARDIAN_AMBIENT_LAND%sENTITY_PARROT_IMITATE_PILLAGER%sBLOCK_FIRE_AMBIENT%sMUSIC_DISC_MELLOHI%sBLOCK_BUBBLE_COLUMN_UPWARDS_INSIDE%sENTITY_RABBIT_HURT%sENTITY_RAVAGER_ROAR%sBLOCK_COMPARATOR_CLICK%sENTITY_PHANTOM_FLAP%sENTITY_SHEEP_SHEAR%sENTITY_SPLASH_POTION_BREAK%sENTITY_PLAYER_BURP%sITEM_TRIDENT_RETURN%sENTITY_BEE_HURT%sENTITY_GENERIC_DEATH%sENTITY_TROPICAL_FISH_FLOP%sBLOCK_METAL_BREAK%sENTITY_RAVAGER_STUNNED%sENTITY_DROWNED_SWIM%sITEM_SHIELD_BLOCK%sENTITY_MOOSHROOM_CONVERT%sENTITY_LLAMA_HURT%sENTITY_DOLPHIN_AMBIENT%sENTITY_PANDA_BITE%sENTITY_WANDERING_TRADER_TRADE%sENTITY_PLAYER_ATTACK_SWEEP%sENTITY_STRAY_HURT%sENTITY_HORSE_ARMOR%sENTITY_PUFFER_FISH_FLOP%sENTITY_WOLF_SHAKE%sITEM_ARMOR_EQUIP_CHAIN%sENTITY_MULE_DEATH%sBLOCK_BREWING_STAND_BREW%sENTITY_ENDERMITE_HURT%sBLOCK_TRIPWIRE_ATTACH%sENTITY_RABBIT_JUMP%sENTITY_SKELETON_DEATH%sENTITY_WOLF_GROWL%sBLOCK_BELL_USE%sBLOCK_NOTE_BLOCK_BIT%sENTITY_PARROT_IMITATE_VINDICATOR%sMUSIC_MENU%sENTITY_DONKEY_AMBIENT%sENTITY_DOLPHIN_EAT%sBLOCK_METAL_HIT%sBLOCK_SAND_FALL%sENTITY_ENDERMITE_DEATH%sENTITY_PILLAGER_CELEBRATE%sITEM_CROSSBOW_LOADING_START%sBLOCK_COMPOSTER_FILL_SUCCESS%sMUSIC_DISC_13%sMUSIC_DISC_WARD%sMUSIC_DISC_11%sENTITY_HORSE_HURT%sENTITY_SKELETON_HORSE_STEP_WATER%sENTITY_DROWNED_DEATH_WATER%sENTITY_EXPERIENCE_BOTTLE_THROW%sENTITY_ENDER_DRAGON_GROWL%sBLOCK_LAVA_POP%sENTITY_VILLAGER_WORK_WEAPONSMITH%sBLOCK_NOTE_BLOCK_GUITAR%sENTITY_FIREWORK_ROCKET_LARGE_BLAST_FAR%sBLOCK_PISTON_CONTRACT%sENTITY_SKELETON_HORSE_DEATH%sENTITY_ILLUSIONER_PREPARE_MIRROR%sITEM_TRIDENT_HIT_GROUND%sBLOCK_IRON_TRAPDOOR_CLOSE%sBLOCK_LEVER_CLICK%sENTITY_CHICKEN_HURT%sBLOCK_BAMBOO_STEP%sENTITY_PIG_HURT%sENTITY_WANDERING_TRADER_DEATH%sENTITY_BOAT_PADDLE_LAND%sENTITY_PLAYER_SWIM%sAMBIENT_UNDERWATER_EXIT%sENTITY_HOSTILE_DEATH%sBLOCK_BEEHIVE_EXIT%sWEATHER_RAIN%sBLOCK_CORAL_BLOCK_FALL%sENTITY_COW_DEATH%sENTITY_ZOMBIE_PIGMAN_DEATH%sBLOCK_ANVIL_DESTROY%sENTITY_PARROT_IMITATE_VEX%sBLOCK_FURNACE_FIRE_CRACKLE%sENTITY_ENDERMAN_SCREAM%sENTITY_HORSE_STEP_WOOD%sITEM_ARMOR_EQUIP_IRON%sBLOCK_LAVA_EXTINGUISH%sUI_CARTOGRAPHY_TABLE_TAKE_RESULT%sBLOCK_LADDER_BREAK%sENTITY_HORSE_JUMP%sITEM_ARMOR_EQUIP_DIAMOND%sENTITY_PANDA_AGGRESSIVE_AMBIENT%sENTITY_LEASH_KNOT_BREAK%sENTITY_SALMON_HURT%sBLOCK_REDSTONE_TORCH_BURNOUT%sENTITY_GENERIC_EXTINGUISH_FIRE%sENTITY_SHULKER_BULLET_HIT%sENTITY_WANDERING_TRADER_NO%sENTITY_SHULKER_TELEPORT%sENTITY_FIREWORK_ROCKET_BLAST_FAR%sENTITY_TROPICAL_FISH_HURT%sBLOCK_PORTAL_TRIGGER%sENTITY_ELDER_GUARDIAN_HURT_LAND%sBLOCK_CHEST_OPEN%sEVENT_RAID_HORN%sENTITY_FIREWORK_ROCKET_LARGE_BLAST%sBLOCK_WOOL_PLACE%sENTITY_CREEPER_HURT%sENTITY_ENDER_EYE_LAUNCH%sENTITY_TURTLE_SHAMBLE%sENTITY_WITHER_AMBIENT%sBLOCK_COMPOSTER_FILL%sENTITY_FOX_EAT%sITEM_FLINTANDSTEEL_USE%sBLOCK_ENDER_CHEST_CLOSE%sENTITY_LLAMA_CHEST%sENTITY_IRON_GOLEM_DAMAGE%sENTITY_BLAZE_AMBIENT%sBLOCK_STONE_PRESSURE_PLATE_CLICK_OFF%sENTITY_STRAY_STEP%sENTITY_EVOKER_DEATH%sENTITY_MOOSHROOM_SUSPICIOUS_MILK%sENTITY_FOX_SPIT%sENTITY_VILLAGER_WORK_LEATHERWORKER%sMUSIC_DRAGON%sENTITY_ZOMBIE_DESTROY_EGG%sENTITY_GUARDIAN_FLOP%sENTITY_POLAR_BEAR_STEP%sITEM_CROSSBOW_QUICK_CHARGE_2%sITEM_CROSSBOW_QUICK_CHARGE_3%sENTITY_COD_FLOP%sITEM_CROSSBOW_QUICK_CHARGE_1%sENTITY_MAGMA_CUBE_DEATH%sBLOCK_DISPENSER_DISPENSE%sENTITY_HORSE_DEATH%sENTITY_GENERIC_SWIM%sBLOCK_SNOW_PLACE%sUI_STONECUTTER_TAKE_RESULT%sENTITY_PILLAGER_AMBIENT%sENTITY_ILLUSIONER_DEATH%sENTITY_EVOKER_CAST_SPELL%sENTITY_MAGMA_CUBE_SQUISH%sBLOCK_BAMBOO_SAPLING_HIT%sENTITY_FISHING_BOBBER_RETRIEVE%sENTITY_SHULKER_HURT%sMUSIC_CREATIVE%sMUSIC_DISC_BLOCKS%sBLOCK_PISTON_EXTEND%sENTITY_ARMOR_STAND_BREAK%sBLOCK_SCAFFOLDING_FALL%sENTITY_HUSK_DEATH%sENTITY_PILLAGER_DEATH%sITEM_ARMOR_EQUIP_GOLD%sENTITY_RABBIT_DEATH%sENTITY_CREEPER_DEATH%sENTITY_ZOMBIE_CONVERTED_TO_DROWNED%sENTITY_PANDA_AMBIENT%sENTITY_SILVERFISH_HURT%sENTITY_ELDER_GUARDIAN_HURT%sENTITY_MAGMA_CUBE_JUMP%sBLOCK_ANVIL_LAND%sENTITY_PARROT_IMITATE_HUSK%sBLOCK_FENCE_GATE_CLOSE%sENTITY_FIREWORK_ROCKET_BLAST%sENTITY_EVOKER_HURT%sENTITY_SKELETON_AMBIENT%sENTITY_PLAYER_HURT_ON_FIRE%sENTITY_GHAST_AMBIENT%sBLOCK_LANTERN_BREAK%sBLOCK_BEEHIVE_SHEAR%sENTITY_DOLPHIN_ATTACK%sENTITY_ENDER_DRAGON_AMBIENT%sENTITY_MAGMA_CUBE_HURT%sENTITY_GENERIC_BURN%sENTITY_HORSE_ANGRY%sWEATHER_RAIN_ABOVE%sBLOCK_WOOL_STEP%sENTITY_BEE_LOOP%sENTITY_LEASH_KNOT_PLACE%sENTITY_DONKEY_ANGRY%sENTITY_CAT_HURT%sENTITY_PARROT_IMITATE_WITCH%sENTITY_ZOMBIE_HORSE_DEATH%sENTITY_SLIME_SQUISH_SMALL%sENTITY_PARROT_IMITATE_CREEPER%sENTITY_TURTLE_SHAMBLE_BABY%sENTITY_SKELETON_SHOOT%sITEM_SHIELD_BREAK%sENTITY_ZOMBIE_PIGMAN_ANGRY%sBLOCK_BUBBLE_COLUMN_WHIRLPOOL_AMBIENT%sBLOCK_WOOL_BREAK%sENTITY_ZOMBIE_STEP%sENTITY_HOSTILE_HURT%sBLOCK_END_GATEWAY_SPAWN%sITEM_BUCKET_FILL_FISH%sENTITY_COW_STEP%sBLOCK_METAL_PLACE%sBLOCK_CHORUS_FLOWER_GROW%sBLOCK_DISPENSER_FAIL%sENTITY_TNT_PRIMED%sENTITY_ZOMBIE_PIGMAN_HURT%sBLOCK_SMOKER_SMOKE%sENTITY_DROWNED_STEP%sITEM_ARMOR_EQUIP_TURTLE%sBLOCK_NOTE_BLOCK_PLING%sENTITY_MOOSHROOM_EAT%sBLOCK_IRON_DOOR_CLOSE%sBLOCK_NOTE_BLOCK_XYLOPHONE%sENTITY_TROPICAL_FISH_AMBIENT%sENTITY_COW_AMBIENT%sBLOCK_GRAVEL_HIT%sBLOCK_WOOD_STEP%sENTITY_TURTLE_AMBIENT_LAND%sENTITY_PAINTING_PLACE%sENTITY_STRAY_AMBIENT%sENTITY_RAVAGER_CELEBRATE%sITEM_SHOVEL_FLATTEN%sENTITY_CAT_PURREOW%sITEM_BUCKET_EMPTY_LAVA%sENTITY_SLIME_DEATH_SMALL%sENTITY_IRON_GOLEM_ATTACK%sENTITY_SHULKER_HURT_CLOSED%sENTITY_SQUID_SQUIRT%sENTITY_ZOMBIE_HORSE_AMBIENT%sITEM_TRIDENT_HIT%sENTITY_MAGMA_CUBE_HURT_SMALL%sENTITY_ARMOR_STAND_PLACE%sBLOCK_STONE_PRESSURE_PLATE_CLICK_ON%sBLOCK_WOOL_FALL%sENTITY_PANDA_CANT_BREED%sENTITY_PARROT_IMITATE_GUARDIAN%sITEM_BUCKET_FILL%sBLOCK_BEEHIVE_DRIP%sENTITY_DOLPHIN_PLAY%sENTITY_VINDICATOR_DEATH%sBLOCK_GRASS_BREAK%sITEM_CROSSBOW_SHOOT%sENTITY_EVOKER_PREPARE_ATTACK%sENTITY_POLAR_BEAR_DEATH%sENTITY_ELDER_GUARDIAN_AMBIENT%sENTITY_DONKEY_DEATH%sENTITY_TURTLE_SWIM%sENTITY_HORSE_BREATHE%sENTITY_POLAR_BEAR_AMBIENT%sENTITY_BEE_POLLINATE%sBLOCK_METAL_PRESSURE_PLATE_CLICK_OFF%sUI_STONECUTTER_SELECT_RECIPE%sBLOCK_SAND_BREAK%sENTITY_PARROT_IMITATE_ELDER_GUARDIAN%sUI_TOAST_CHALLENGE_COMPLETE%sENTITY_IRON_GOLEM_HURT%sITEM_TOTEM_USE%sMUSIC_CREDITS%sENTITY_GENERIC_BIG_FALL%sENTITY_PLAYER_HURT%sENTITY_PARROT_AMBIENT%sENTITY_PARROT_IMITATE_DROWNED%sBLOCK_GLASS_PLACE%sBLOCK_WOODEN_BUTTON_CLICK_OFF%sENTITY_HUSK_AMBIENT%sENTITY_ARROW_HIT_PLAYER%sENTITY_GUARDIAN_AMBIENT%sENTITY_RAVAGER_DEATH%sBLOCK_GRASS_HIT%sBLOCK_GRAVEL_STEP%sENTITY_VEX_AMBIENT%sENTITY_PARROT_IMITATE_SLIME%sENTITY_ZOMBIE_VILLAGER_HURT%sENTITY_FOX_AGGRO%sENTITY_PANDA_STEP%sENTITY_SNOW_GOLEM_SHOOT%sBLOCK_SAND_PLACE%sMUSIC_DISC_CHIRP%sBLOCK_WOOD_HIT%sBLOCK_TRIPWIRE_CLICK_ON%sITEM_BOTTLE_EMPTY%sENTITY_PLAYER_ATTACK_WEAK%sENTITY_ENDERMAN_HURT%sENTITY_WANDERING_TRADER_YES%sENTITY_ENDERMITE_STEP%sENTITY_BAT_DEATH%sENTITY_DOLPHIN_SWIM%sENTITY_PANDA_SNEEZE%sENTITY_GENERIC_EXPLODE%sBLOCK_WOODEN_PRESSURE_PLATE_CLICK_ON%sBLOCK_SCAFFOLDING_STEP%sENTITY_SHEEP_HURT%sBLOCK_LANTERN_HIT%sENTITY_WITCH_AMBIENT%sBLOCK_HONEY_BLOCK_HIT%sENTITY_HORSE_LAND%sITEM_CROP_PLANT%sENTITY_TURTLE_EGG_BREAK%sENTITY_RABBIT_AMBIENT%sENTITY_VILLAGER_WORK_CLERIC%sITEM_BOOK_PAGE_TURN%sENTITY_WOLF_HURT%sENTITY_FOX_DEATH%sENTITY_TROPICAL_FISH_DEATH%sENTITY_TURTLE_LAY_EGG%sMUSIC_NETHER%sBLOCK_BEEHIVE_WORK%sENTITY_FIREWORK_ROCKET_TWINKLE_FAR%sENTITY_GENERIC_SPLASH%sENTITY_WITHER_BREAK_BLOCK%sBLOCK_GRAVEL_FALL%sENTITY_ITEM_BREAK%sENTITY_SLIME_ATTACK%sITEM_BOTTLE_FILL_DRAGONBREATH%sENTITY_PLAYER_DEATH%sENTITY_VILLAGER_WORK_FLETCHER%sBLOCK_GRASS_PLACE%sITEM_AXE_STRIP%sENTITY_TURTLE_DEATH%sENTITY_EVOKER_CELEBRATE%sBLOCK_LANTERN_PLACE%sBLOCK_STONE_STEP%sBLOCK_CONDUIT_DEACTIVATE%sENTITY_PHANTOM_DEATH%sBLOCK_LADDER_STEP%sBLOCK_LILY_PAD_PLACE%sENTITY_BAT_LOOP%sENTITY_PARROT_IMITATE_SILVERFISH%sBLOCK_END_PORTAL_SPAWN%sENTITY_GENERIC_SMALL_FALL%sENTITY_WITCH_DRINK%sBLOCK_GRAVEL_BREAK%sENTITY_PLAYER_ATTACK_CRIT%sENTITY_HOSTILE_SMALL_FALL%sENTITY_ZOMBIE_HURT%sAMBIENT_UNDERWATER_LOOP_ADDITIONS_RARE%sBLOCK_WOOL_HIT%sITEM_ARMOR_EQUIP_LEATHER%sENTITY_CREEPER_PRIMED%sBLOCK_STONE_FALL%sBLOCK_WATER_AMBIENT%sENTITY_RAVAGER_ATTACK%sITEM_FIRECHARGE_USE%sITEM_TRIDENT_THROW%sENTITY_SHULKER_OPEN%sENTITY_HUSK_STEP%sENTITY_BAT_AMBIENT%sENTITY_PIG_DEATH%sBLOCK_WET_GRASS_HIT%sBLOCK_BEACON_ACTIVATE%sBLOCK_LANTERN_STEP%sBLOCK_STONE_BUTTON_CLICK_ON%sBLOCK_SHULKER_BOX_OPEN%sENTITY_HOSTILE_SWIM%sENTITY_ENDERMAN_TELEPORT%sENTITY_SLIME_SQUISH%sAMBIENT_UNDERWATER_LOOP%sENTITY_PAINTING_BREAK%sENTITY_LLAMA_AMBIENT%sMUSIC_DISC_MALL%sMUSIC_DISC_STAL%sENTITY_ENDER_EYE_DEATH%sMUSIC_UNDER_WATER%sBLOCK_BELL_RESONATE%sENTITY_TURTLE_EGG_CRACK%sENTITY_EGG_THROW%sENTITY_WITHER_SPAWN%sENTITY_WOLF_STEP%sENTITY_PANDA_WORRIED_AMBIENT%sBLOCK_IRON_DOOR_OPEN%sENTITY_LLAMA_STEP%sENTITY_DROWNED_HURT_WATER%sENTITY_ZOMBIE_VILLAGER_AMBIENT%sENTITY_VILLAGER_DEATH%sENTITY_PARROT_IMITATE_PHANTOM%sENTITY_POLAR_BEAR_HURT%sBLOCK_SLIME_BLOCK_STEP%sENTITY_GUARDIAN_ATTACK%sENTITY_CHICKEN_STEP%sENTITY_ITEM_FRAME_PLACE%sBLOCK_HONEY_BLOCK_FALL%sBLOCK_ENDER_CHEST_OPEN%sENTITY_PHANTOM_BITE%sBLOCK_NOTE_BLOCK_BANJO%sENTITY_VILLAGER_WORK_CARTOGRAPHER%sBLOCK_BARREL_OPEN%sBLOCK_NOTE_BLOCK_HARP%sENTITY_TURTLE_HURT%sBLOCK_BAMBOO_HIT%sENTITY_PUFFER_FISH_DEATH%sENTITY_DOLPHIN_AMBIENT_WATER%sBLOCK_GRAVEL_PLACE%sENTITY_COD_DEATH%sBLOCK_TRIPWIRE_DETACH%sBLOCK_BEACON_DEACTIVATE%sBLOCK_STONE_BUTTON_CLICK_OFF%sENTITY_SQUID_DEATH%sBLOCK_BLASTFURNACE_FIRE_CRACKLE%sBLOCK_SCAFFOLDING_PLACE%sENTITY_PUFFER_FISH_STING%sENTITY_PILLAGER_HURT%sENTITY_PARROT_STEP%sENTITY_ZOMBIE_BREAK_WOODEN_DOOR%sENTITY_MAGMA_CUBE_SQUISH_SMALL%sBLOCK_BARREL_CLOSE%sENTITY_SALMON_AMBIENT%sENTITY_CAT_DEATH%sENTITY_VILLAGER_HURT%sENTITY_BEE_STING%sBLOCK_HONEY_BLOCK_SLIDE%sBLOCK_SNOW_HIT%sBLOCK_NOTE_BLOCK_HAT%sBLOCK_CHEST_LOCKED%sENTITY_SHULKER_AMBIENT%sENTITY_SALMON_FLOP%sENTITY_PLAYER_SPLASH%sENTITY_SPIDER_AMBIENT%sBLOCK_CAMPFIRE_CRACKLE%sBLOCK_WET_GRASS_BREAK%sENTITY_WOLF_DEATH%sENTITY_VILLAGER_WORK_ARMORER%sENTITY_ELDER_GUARDIAN_DEATH_LAND%sENTITY_SNOW_GOLEM_DEATH%sBLOCK_SLIME_BLOCK_BREAK%sENTITY_ENDER_DRAGON_HURT%sBLOCK_SCAFFOLDING_BREAK%sENTITY_SLIME_JUMP_SMALL%sENTITY_WITHER_SHOOT%sENTITY_EVOKER_PREPARE_SUMMON%sENTITY_DRAGON_FIREBALL_EXPLODE%sENTITY_MULE_HURT%sENTITY_WANDERING_TRADER_HURT%sENTITY_GUARDIAN_HURT_LAND%sBLOCK_STONE_PLACE%sENTITY_DROWNED_DEATH%sENTITY_SKELETON_HORSE_AMBIENT_WATER%sENTITY_SPIDER_HURT%sITEM_BUCKET_EMPTY%sBLOCK_HONEY_BLOCK_STEP%sENTITY_SHEEP_DEATH%sENTITY_TURTLE_HURT_BABY%sENTITY_VEX_CHARGE%sBLOCK_PORTAL_AMBIENT%sENTITY_PLAYER_HURT_DROWN%sITEM_NETHER_WART_PLANT%sAMBIENT_UNDERWATER_LOOP_ADDITIONS_ULTRA_RARE%sENTITY_RABBIT_ATTACK%sBLOCK_FIRE_EXTINGUISH%sENTITY_SKELETON_HURT%sBLOCK_GRINDSTONE_USE%sENTITY_PARROT_IMITATE_ZOMBIE%sENTITY_SKELETON_HORSE_SWIM%sBLOCK_STONE_BREAK%sENTITY_PHANTOM_HURT%sENTITY_PLAYER_LEVELUP%sENTITY_DROWNED_AMBIENT_WATER%sENTITY_CHICKEN_AMBIENT%sENTITY_VINDICATOR_CELEBRATE%sENTITY_ENDERMAN_STARE%sBLOCK_SNOW_BREAK%sBLOCK_BEACON_AMBIENT%sBLOCK_SHULKER_BOX_CLOSE%sBLOCK_NOTE_BLOCK_BASEDRUM%sMUSIC_DISC_CAT%sENTITY_ARROW_HIT%sENTITY_EVOKER_AMBIENT%sENTITY_BLAZE_BURN%sENTITY_VINDICATOR_HURT%sENTITY_SQUID_HURT%sENTITY_VILLAGER_WORK_FISHERMAN%sENTITY_HOSTILE_BIG_FALL%sENTITY_VILLAGER_WORK_FARMER%sBLOCK_NOTE_BLOCK_DIDGERIDOO%sBLOCK_FENCE_GATE_OPEN%sENTITY_ZOMBIE_ATTACK_IRON_DOOR%sENTITY_FIREWORK_ROCKET_SHOOT%sENTITY_WITCH_THROW%sITEM_CROSSBOW_LOADING_MIDDLE%sENTITY_PARROT_IMITATE_WITHER%sENTITY_COD_HURT%sBLOCK_SLIME_BLOCK_PLACE%sBLOCK_BUBBLE_COLUMN_UPWARDS_AMBIENT%sBLOCK_SLIME_BLOCK_FALL%sENTITY_GUARDIAN_AMBIENT_LAND%sENTITY_WOLF_HOWL%sITEM_HONEY_BOTTLE_DRINK%sENTITY_SILVERFISH_STEP%sBLOCK_LANTERN_FALL%sENTITY_BAT_TAKEOFF%sENTITY_IRON_GOLEM_DEATH%sBLOCK_NETHER_WART_BREAK%sENTITY_PARROT_IMITATE_GHAST%sBLOCK_STONE_HIT%sENTITY_PARROT_IMITATE_WITHER_SKELETON%sENTITY_ITEM_FRAME_BREAK%sENTITY_WITHER_HURT%sENTITY_CAT_BEG_FOR_FOOD%sBLOCK_BUBBLE_COLUMN_BUBBLE_POP%sENTITY_PLAYER_BREATH%sENTITY_PLAYER_ATTACK_KNOCKBACK%sENTITY_ITEM_FRAME_REMOVE_ITEM%sENTITY_MOOSHROOM_MILK]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5333</id>
	<key><![CDATA[Valid statistics are: DAMAGE_DEALT, DAMAGE_TAKEN, DEATHS, MOB_KILLS, PLAYER_KILLS, FISH_CAUGHT, ANIMALS_BRED, LEAVE_GAME, JUMP, DROP_COUNT, DROP, PICKUP, PLAY_ONE_MINUTE, WALK_ONE_CM, WALK_ON_WATER_ONE_CM, FALL_ONE_CM, SNEAK_TIME, CLIMB_ONE_CM, FLY_ONE_CM, WALK_UNDER_WATER_ONE_CM, MINECART_ONE_CM, BOAT_ONE_CM, PIG_ONE_CM, HORSE_ONE_CM, SPRINT_ONE_CM, CROUCH_ONE_CM, AVIATE_ONE_CM, MINE_BLOCK, USE_ITEM, BREAK_ITEM, CRAFT_ITEM, KILL_ENTITY, ENTITY_KILLED_BY, TIME_SINCE_DEATH, TALKED_TO_VILLAGER, TRADED_WITH_VILLAGER, CAKE_SLICES_EATEN, CAULDRON_FILLED, CAULDRON_USED, ARMOR_CLEANED, BANNER_CLEANED, BREWINGSTAND_INTERACTION, BEACON_INTERACTION, DROPPER_INSPECTED, HOPPER_INSPECTED, DISPENSER_INSPECTED, NOTEBLOCK_PLAYED, NOTEBLOCK_TUNED, FLOWER_POTTED, TRAPPED_CHEST_TRIGGERED, ENDERCHEST_OPENED, ITEM_ENCHANTED, RECORD_PLAYED, FURNACE_INTERACTION, CRAFTING_TABLE_INTERACTION, CHEST_OPENED, SLEEP_IN_BED, SHULKER_BOX_OPENED, TIME_SINCE_REST, SWIM_ONE_CM, DAMAGE_DEALT_ABSORBED, DAMAGE_DEALT_RESISTED, DAMAGE_BLOCKED_BY_SHIELD, DAMAGE_ABSORBED, DAMAGE_RESISTED, CLEAN_SHULKER_BOX, OPEN_BARREL, INTERACT_WITH_BLAST_FURNACE, INTERACT_WITH_SMOKER, INTERACT_WITH_LECTERN, INTERACT_WITH_CAMPFIRE, INTERACT_WITH_CARTOGRAPHY_TABLE, INTERACT_WITH_LOOM, INTERACT_WITH_STONECUTTER, BELL_RING, RAID_TRIGGER, RAID_WIN, INTERACT_WITH_ANVIL, or INTERACT_WITH_GRINDSTONE]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5334</id>
	<key><![CDATA[The type may be one of either AREA_EFFECT_CLOUD, ARMOR_STAND, ARROW, BAT, BEE, BLAZE, BOAT, CAT, CAVE_SPIDER, CHICKEN, COD, COW, CREEPER, DOLPHIN, DRAGON_FIREBALL, DROPPED_ITEM, DROWNED, DONKEY, EGG, ELDER_GUARDIAN, ENDERMAN, ENDERMITE, ENDER_CRYSTAL, ENDER_DRAGON, ENDER_EYE, ENDER_PEARL, EVOKER, EVOKER_FANGS, EXPERIENCE_ORB, FALLING_BLOCK, FIREBALL, FIREWORK, FISHING_HOOK, FOX, GHAST, GIANT, GUARDIAN, HORSE, HUSK, ILLUSIONER, IRON_GOLEM, ITEM_FRAME, LLAMA, LLAMA_SPIT, LEASH_HITCH, LIGHTNING, LINGERING_POTION, MAGMA_CUBE, MINECART, MINECART_CHEST, MINECART_COMMAND, MINECART_FURNACE, MINECART_HOPPER, MINECART_MOB_SPAWNER, MINECART_TNT, MULE, MUSHROOM_COW, OCELOT, PAINTING, PANDA, PARROT, PHANTOM, PIG, PIG_ZOMBIE, PILLAGER, PLAYER, POLAR_BEAR, PRIMED_TNT, PUFFERFISH, RABBIT, RAVAGER, SALMON, SHEEP, SILVERFISH, SKELETON, SHULKER, SHULKER_BULLET, SKELETON_HORSE, SLIME, SMALL_FIREBALL, SNOWBALL, SNOWMAN, SQUID, SPECTRAL_ARROW, SPIDER, SPLASH_POTION, STRAY, THROWN_EXP_BOTTLE, TIPPED_ARROW, TRADER_LLAMA, TRIDENT, TROPICAL_FISH, TURTLE, VEX, VILLAGER, VINDICATOR, WANDERING_TRADER, WITCH, WITHER, WITHER_SKELETON, WITHER_SKULL, WOLF, ZOMBIE, ZOMBIE_HORSE, ZOMBIE_VILLAGER, or UNKNOWN]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5335</id>
	<key><![CDATA[Entitytype can be one of AREA_EFFECT_CLOUD, ARMOR_STAND, ARROW, BAT, BEE, BLAZE, BOAT, CAT, CAVE_SPIDER, CHICKEN, COD, COW, CREEPER, DOLPHIN, DRAGON_FIREBALL, DROPPED_ITEM, DROWNED, DONKEY, EGG, ELDER_GUARDIAN, ENDERMAN, ENDERMITE, ENDER_CRYSTAL, ENDER_DRAGON, ENDER_EYE, ENDER_PEARL, EVOKER, EVOKER_FANGS, EXPERIENCE_ORB, FALLING_BLOCK, FIREBALL, FIREWORK, FOX, GHAST, GIANT, GUARDIAN, HORSE, HUSK, ILLUSIONER, IRON_GOLEM, ITEM_FRAME, LLAMA, LLAMA_SPIT, LEASH_HITCH, LIGHTNING, MAGMA_CUBE, MINECART, MINECART_CHEST, MINECART_COMMAND, MINECART_FURNACE, MINECART_HOPPER, MINECART_MOB_SPAWNER, MINECART_TNT, MULE, MUSHROOM_COW, OCELOT, PAINTING, PANDA, PARROT, PHANTOM, PIG, PIG_ZOMBIE, PILLAGER, POLAR_BEAR, PRIMED_TNT, PUFFERFISH, RABBIT, RAVAGER, SALMON, SHEEP, SILVERFISH, SKELETON, SHULKER, SHULKER_BULLET, SKELETON_HORSE, SLIME, SMALL_FIREBALL, SNOWBALL, SNOWMAN, SQUID, SPECTRAL_ARROW, SPIDER, SPLASH_POTION, STRAY, THROWN_EXP_BOTTLE, TRADER_LLAMA, TRIDENT, TROPICAL_FISH, TURTLE, VEX, VILLAGER, VINDICATOR, WANDERING_TRADER, WITCH, WITHER, WITHER_SKELETON, WITHER_SKULL, WOLF, ZOMBIE, ZOMBIE_HORSE or ZOMBIE_VILLAGER. FALLING_BLOCK will be always be sand with this function (see %s). DROPPED_ITEM will be dirt by default (see %s). A closure can be used as the last argument to modify the entity before adding it to the world. The entity's UUID is passed to the closure. FALLING_BLOCK does not support closures.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5336</id>
	<key><![CDATA[mobType can be one of: BAT, BEE, BLAZE, CAVESPIDER, CHICKEN, COW, CREEPER, DONKEY, ELDERGUARDIAN, ENDERDRAGON, ENDERMAN, ENDERMITE, EVOKER, GHAST, GIANT, GUARDIAN, HORSE, HUSK, ILLUSIONER, IRONGOLEM, LLAMA, MAGMACUBE, MOOSHROOM, MULE, MUSHROOMCOW, OCELOT, PARROT, PIG, PIGZOMBIE, POLARBEAR, RABBIT, SHEEP, SHULKER, SILVERFISH, SKELETON, SKELETONHORSE, SLIME, SNOWGOLEM, SNOWMAN, SPIDER, SPIDERJOCKEY, SQUID, STRAY, WITCH, WITHER, WITHERSKELETON, WOLF, VEX, VILLAGER, VINDICATOR, ZOMBIE, ZOMBIEHORSE, or ZOMBIEVILLAGER. Further, subtypes can be applied by specifying MOBTYPE:SUBTYPE, for example the sheep subtype can be any of the dye colors: WHITE, ORANGE, MAGENTA, LIGHT_BLUE, YELLOW, LIME, PINK, GRAY, LIGHT_GRAY, CYAN, PURPLE, BLUE, BROWN, GREEN, RED, or BLACK. COLOR defaults to white if not specified. For mobs with multiple subtypes, separate each type with a "-". Zombies can be any non-conflicting two of: BABY. Ocelots may be one of: BLACK_CAT, RED_CAT, SIAMESE_CAT, or WILD_OCELOT. Villagers can have a profession as a subtype: BUTCHER, FARMER, LIBRARIAN, NITWIT, ARMORER, CARTOGRAPHER, CLERIC, FISHERMAN, FLETCHER, LEATHERWORKER, MASON, NONE, SHEPHERD, TOOLSMITH, or WEAPONSMITH, defaulting to farmer if not specified. PigZombies' subtype represents their anger, and accepts an integer, where 0 is neutral and 400 is the normal response to being attacked. Defaults to 0. Similarly, Slime and MagmaCube size can be set by integer, otherwise will be a random natural size. If a material is specified as the subtype for Endermen, they will hold that material, otherwise they will hold nothing. Creepers can be set to POWERED. Wolves can be ANGRY or TAMED. Pigs can be SADDLED. Horses can have a color: BLACK, BROWN, CHESTNUT, CREAMY, DARK_BROWN, GRAY, or WHITE, and a pattern: NONE, SOCKS, WHITEFIELD, WHITE_DOTS, or BLACK_DOTS. If qty is larger than 10000, a RangeException will be thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5337</id>
	<key><![CDATA[Possible particle types: SMOKE_NORMAL, ENCHANTMENT_TABLE, REDSTONE, SNOW_SHOVEL, BUBBLE_COLUMN_UP, SPELL_MOB, CAMPFIRE_SIGNAL_SMOKE, BLOCK_DUST, FALLING_HONEY, SWEEP_ATTACK, WATER_SPLASH, LANDING_LAVA, SLIME, FALLING_LAVA, DRAGON_BREATH, CURRENT_DOWN, DRIPPING_HONEY, ITEM_CRACK, FALLING_DUST, SNEEZE, WATER_BUBBLE, FLASH, VILLAGER_ANGRY, HEART, LANDING_HONEY, END_ROD, FALLING_NECTAR, CRIT_MAGIC, SUSPENDED, WATER_DROP, SPELL, FALLING_WATER, SPELL_INSTANT, LAVA, VILLAGER_HAPPY, SQUID_INK, CRIT, CLOUD, BUBBLE_POP, COMPOSTER, NAUTILUS, EXPLOSION_LARGE, TOWN_AURA, SUSPENDED_DEPTH, CAMPFIRE_COSY_SMOKE, NOTE, SNOWBALL, SPELL_MOB_AMBIENT, DAMAGE_INDICATOR, SMOKE_LARGE, TOTEM, BARRIER, EXPLOSION_NORMAL, FLAME, SPIT, PORTAL, MOB_APPEARANCE, DOLPHIN, SPELL_WITCH, DRIP_WATER, EXPLOSION_HUGE, WATER_WAKE, UNKNOWN, FIREWORKS_SPARK, DRIP_LAVA, or BLOCK_CRACK.  Some particles have more specific keys and/or special behavior, but the common keys for the particle array are "count" (usually the number of particles to be spawned), "speed" (usually the velocity of the particle), "xoffset", "yoffset", and "zoffset" (usually the ranges from center within which the particle may be offset on that axis).  BLOCK_DUST, BLOCK_CRACK and FALLING_DUST particles can take a block type name parameter under the key "block" (default: STONE).  ITEM_CRACK particles can take an item array or name under the key "item" (default: STONE).  REDSTONE particles take an RGB color array (each 0 - 255) or name under the key "color" (default: RED).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5338</id>
	<key><![CDATA[type%s: %s&lt;Macro&gt;%sreason%s: %s&lt;Macro&gt; One of BEEHIVE, BREEDING, BUILD_IRONGOLEM, BUILD_SNOWMAN, BUILD_WITHER, CHUNK_GEN, CUSTOM, DEFAULT, EGG, JOCKEY, LIGHTNING, NATURAL, PATROL, RAID, REINFORCEMENTS, SHOULDER_ENTITY, SLIME_SPLIT, SPAWNER, SPAWNER_EGG, VILLAGE_DEFENSE, VILLAGE_INVASION, NETHER_PORTAL, DISPENSE_EGG, INFECTION, CURED, OCELOT_BABY, SILVERFISH_BLOCK, MOUNT, TRAP, ENDER_PEARL, DROWNED, SHEARED, or EXPLOSION]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5339</id>
	<key><![CDATA[Returns the block light level at a location. This counts block sources like torches and lava, disregarding light from the sky.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5340</id>
	<key><![CDATA[Returns the sky light level for a location. Disregards all block sources of light, where 15 is directly beneath the sky during the day.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5341</id>
	<key><![CDATA[location%s: the locationArray of this piston%sdirection%s: direction of travel%ssticky%s: true if the piston is sticky, false otherwise%saffectedBlocks%s: blocks pushed/pulled]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5342</id>
	<key><![CDATA[location%s: the locationArray of this piston%sdirection%s: direction of travel%ssticky%s: true if the piston is sticky, false otherwise%saffectedBlocks%s: blocks pushed/pulled%sretractedLocation%s: if the piston is sticky and attached to a block, where the attached block would end up]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5343</id>
	<key><![CDATA[Returns whether or not the block is locked if its lockable. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5344</id>
	<key><![CDATA[Sets the string lock for this block if its lockable. Set an empty string or %s to remove lock. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5345</id>
	<key><![CDATA[Returns the string lock for this block if its lockable. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5346</id>
	<key><![CDATA[Returns whether or not the block is lockable. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5347</id>
	<key><![CDATA[locationArray, string]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5348</id>
	<key><![CDATA[Locks prevent players from accessing the block's interface unless they are holding an item key with the same display name as the lock. Throws IllegalArgumentException if used on a block that isn't lockable.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5349</id>
	<key><![CDATA[Returns the string lock for this block if its lockable.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5350</id>
	<key><![CDATA[Returns whether or not the block is lockable.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5351</id>
	<key><![CDATA[Locks prevent players from accessing the block's interface unless they are holding an item key with the same display name as the lock.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5352</id>
	<key><![CDATA[Returns whether or not the block is locked if its lockable.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5353</id>
	<key><![CDATA[Sets the string lock for this block if its lockable. Set an empty string or %s to remove lock.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5354</id>
	<key><![CDATA[When using the first variation, expects an integer 0-3, which will set the direction the player faces using their existing pitch (up and down) but sets their yaw (left and right) to one of the cardinal directions, as follows: 0 - South, 1 - West, 2 - North, 3 - East, which corresponds to the directions given by F when viewed with F3. In the second variation, specific yaw and pitches can be provided. If the player is not specified, the current player is used. If just the player is specified, that player's yaw and pitch are returned as an array, or if no arguments are given, the current player's yaw and pitch are returned as an array. The function returns %s when setting the values. (Note that while this function looks like it has ambiguous arguments, players cannot be named numbers.) A note on numbers: The values returned by the getter will always be as such: pitch will always be a number between 90 and -90, with -90 being the player looking up, and 90 being the player looking down. Yaw will always be a number between 0 and 359.9~. When setting the facing, pitch must be a number between -90 and 90, and yaw may be any number. If the number given is not between 0 and 359.9~, it will be normalized first. 0 is due south, 90 is west, etc.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5355</id>
	<key><![CDATA[Returns the sha1 hash of the specified string. Note that sha1 is considered no more secure than md5, and should not be used in a security context. sha-256 should be used instead for storing sensitive data. It is a one way hashing algorithm. This function is aware of and compatible with secure_string.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5356</id>
	<key><![CDATA[MethodScript files, both ms and msa files should have UTF-8 encoding. A byte order mark (BOM) may or may not be present.  While other encodings may work, particularly ASCII and others, the source files will be parsed using UTF-8. In the future, other encodings may be supported, but there is currently no plans to add this support in the near term.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5357</id>
	<key><![CDATA[Source File Encoding]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5358</id>
	<key><![CDATA[Diamond Sponsors]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5359</id>
	<key><![CDATA[If you would like to help contribute to the development of MethodScript in a sustainable and continuous fashion, please see our Github sponsors campaign here: [%s %s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5360</id>
	<key><![CDATA[MrSnowGlobe]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5361</id>
	<key><![CDATA[A huge thanks to these sponsors for substantially contributing to the project.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5362</id>
	<key><![CDATA[player, potionEffect, %s[%sstrength%s]%s, %s[%sseconds%s]%s, %s[%sambient%s]%s, %s[%sparticles%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5363</id>
	<key><![CDATA[Adds one, or modifies an existing, potion effect on a mob. The potionEffect can be SLOWNESS, INVISIBILITY, SLOW_FALLING, BAD_OMEN, WEAKNESS, DOLPHINS_GRACE, INSTANT_DAMAGE, MINING_FATIGUE, SPEED, WITHER, LUCK, FIRE_RESISTANCE, WATER_BREATHING, GLOWING, ABSORPTION, HUNGER, BAD_LUCK, HERO_OF_THE_VILLAGE, REGENERATION, STRENGTH, BLINDNESS, LEVITATION, CONDUIT_POWER, JUMP_BOOST, POISON, NAUSEA, RESISTANCE, HEALTH_BOOST, NIGHT_VISION, INSTANT_HEALTH, HASTE, or SATURATION. It also accepts an integer corresponding to the effect id listed on the Minecraft wiki. Strength is an integer representing the power level of the effect, starting at 0. Seconds defaults to 30.0. To remove an effect, set the seconds to 0. If seconds is less than 0 or greater than 107374182 a RangeException is thrown. Ambient takes a boolean of whether the particles should be more transparent. Particles takes a boolean of whether the particles should be visible at all. The function returns whether or not the effect was modified.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5364</id>
	<key><![CDATA[entityUUID, potionEffect, %s[%sstrength%s]%s, %s[%sseconds%s]%s, %s[%sambient%s]%s, %s[%sparticles%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5365</id>
	<key><![CDATA[action%s: One of either left_click_block, right_click_block, left_click_air, or right_click_air. If left or right_click_air, neither facing nor location will be present.%sblock%s: The type of block they clicked, or %s if clicked air or if the block is now empty.%sitem%s: The item array the player used to click, or %s if not holding anything in that hand%splayer%s: The player associated with this event%sfacing%s: The (lowercase) face of the block they clicked. (One of NORTH, EAST, SOUTH, WEST, UP, DOWN, NORTH_EAST, NORTH_WEST, SOUTH_EAST, SOUTH_WEST, WEST_NORTH_WEST, NORTH_NORTH_WEST, NORTH_NORTH_EAST, EAST_NORTH_EAST, EAST_SOUTH_EAST, SOUTH_SOUTH_EAST, SOUTH_SOUTH_WEST, WEST_SOUTH_WEST, or SELF)%slocation%s: The (x, y, z, world) location of the block they clicked%shand%s: The hand used to click with, can be either main_hand or off_hand]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5366</id>
	<key><![CDATA[Returns an associative array containing the values of all existing gamerules for the given world. If the gameRule parameter is specified, the function only returns that one value instead of an array. The gameRule can be ANNOUNCEADVANCEMENTS, COMMANDBLOCKOUTPUT, DISABLEELYTRAMOVEMENTCHECK, DISABLERAIDS, DODAYLIGHTCYCLE, DOENTITYDROPS, DOFIRETICK, DOIMMEDIATERESPAWN, DOINSOMNIA, DOLIMITEDCRAFTING, DOMOBLOOT, DOMOBSPAWNING, DOPATROLSPAWNING, DOTILEDROPS, DOTRADERSPAWNING, DOWEATHERCYCLE, DROWNINGDAMAGE, FALLDAMAGE, FIREDAMAGE, KEEPINVENTORY, LOGADMINCOMMANDS, MAXCOMMANDCHAINLENGTH, MAXENTITYCRAMMING, MOBGRIEFING, NATURALREGENERATION, RANDOMTICKSPEED, REDUCEDDEBUGINFO, SENDCOMMANDFEEDBACK, SHOWDEATHMESSAGES, SPAWNRADIUS, or SPECTATORSGENERATECHUNKS.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5367</id>
	<key><![CDATA[Sets the value of the gamerule for the specified world. If world is not given the value is set for all worlds. Returns true if successful. gameRule can be ANNOUNCEADVANCEMENTS, COMMANDBLOCKOUTPUT, DISABLEELYTRAMOVEMENTCHECK, DISABLERAIDS, DODAYLIGHTCYCLE, DOENTITYDROPS, DOFIRETICK, DOIMMEDIATERESPAWN, DOINSOMNIA, DOLIMITEDCRAFTING, DOMOBLOOT, DOMOBSPAWNING, DOPATROLSPAWNING, DOTILEDROPS, DOTRADERSPAWNING, DOWEATHERCYCLE, DROWNINGDAMAGE, FALLDAMAGE, FIREDAMAGE, KEEPINVENTORY, LOGADMINCOMMANDS, MAXCOMMANDCHAINLENGTH, MAXENTITYCRAMMING, MOBGRIEFING, NATURALREGENERATION, RANDOMTICKSPEED, REDUCEDDEBUGINFO, SENDCOMMANDFEEDBACK, SHOWDEATHMESSAGES, SPAWNRADIUS, or SPECTATORSGENERATECHUNKS.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5368</id>
	<key><![CDATA[On Windows systems, you'll need to have launched your command prompt as Administrator. (To install on Windows Subsystem for Linux, follow the same instructions as for Unix.) A program ''mscript'' will be installed on your path, and a PowerShell Module will also be installed. Running ''mscript'' will launch the interpreter, running it with a file will run that file, and using ''mscript -- '' followed by a verb (such as help) will run the cmdline utilities.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5369</id>
	<key><![CDATA[On Unix systems, you'll need to run the command with sudo. The installer will install an mscript bash file in /usr/local/bin/mscript, which simply wraps the jar. Running ''mscript'' will launch the interpreter, running it with a file will run that file, and using ''mscript -- '' followed by a verb (such as help) will run the cmdline utilities.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5370</id>
	<key><![CDATA[Ian Burgwin (ihaveahax) - [%s %s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5371</id>
	<key><![CDATA[Sets the owner of the skull at the given location by name or uuid. Supplying %s will clear the skull owner, but due to limitations in Bukkit, clients will only see this change after reloading the block. If no world is provided and the function is executed by a player, the player&apos;s world is used. If the block at the given location isn&apos;t a skull, a RangeException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5372</id>
	<key><![CDATA[locationArray, owner]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5373</id>
	<key><![CDATA[Returns the owner name and uuid of the skull at the given location as an array in format: {name: NAME, uuid: UUID}, or %s if the skull does not have an owner. The value at the &apos;name&apos; key will be an empty string if the server does not know the player&apos;s name. If no world is provided and the function is executed by a player, the player&apos;s world is used. If the block at the given location isn&apos;t a skull, a RangeException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5374</id>
	<key><![CDATA[Returns the owner name and uuid of the skull at the given location as an array in format: {name: NAME, uuid: UUID}, or %s if the skull does not have an owner. The value at the 'name' key will be an empty string if the server does not know the player's name. If no world is provided and the function is executed by a player, the player's world is used. If the block at the given location isn't a skull, a RangeException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5375</id>
	<key><![CDATA[Sets the owner of the skull at the given location by name or uuid. Supplying %s will clear the skull owner, but due to limitations in Bukkit, clients will only see this change after reloading the block. If no world is provided and the function is executed by a player, the player's world is used. If the block at the given location isn't a skull, a RangeException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5376</id>
	<key><![CDATA[Ian Burgwin (ihaveahax) - [%s %s]%s %sJessassin]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5377</id>
	<key><![CDATA[Jason Unger%s %sVergilePrime]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5378</id>
	<key><![CDATA[Jason Unger%s %sVergilPrime]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5379</id>
	<key><![CDATA[thgilfodrol - [%s %s] %s %sLilDirt]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5380</id>
	<key><![CDATA[Returns true if all the arguments are equal. Operator syntax is also supported: @a]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5381</id>
	<key><![CDATA[One of the following methods: POST, GET, HEAD, OPTIONS, PUT, DELETE, TRACE, PATCH. If %s, it will use GET if there are no params, or POST if there are.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5382</id>
	<key><![CDATA[With braces/case/default. Note the lack of fallthrough, even without a break(), except where cases are directly back to back.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5383</id>
	<key><![CDATA[Counts the number of occurrences in the subject.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5384</id>
	<key><![CDATA[Writes a file to the file system. This method only works from the cmdline, if not in cmdline, a SecurityException is thrown. Because of this, there is no check against the base-dir path. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5385</id>
	<key><![CDATA[Spawns the specified number of entities of the given type at the given location. Returns an array of entity UUIDs of what is spawned. Qty defaults to 1 and location defaults to the location of the commandsender, if it is a block or player. If the commandsender is console, location must be supplied. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5386</id>
	<key><![CDATA[Returns information about the runtime in a usable format. Depending on the information returned, it may be usable directly, or it may be more of a referential format. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5387</id>
	<key><![CDATA[Enables performance logging. The allow-profiling option must be set to true in your preferences file, and play-dirty mode must be active. If allow-profiling is set to false, a SecurityException is thrown. The debug filters are used by the performance logger, if you choose to filter through the events. See the documentation for more details on performance logging.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5388</id>
	<key><![CDATA[Sets a task to run every so often. This works similarly to set_timeout, except the task will automatically re-register itself to run again. Note that the resolution of the time is in ms, however, the server will only have a resolution of up to 50 ms, meaning that a time of 1-50ms is essentially the same as 50ms. The initial delay defaults to the same thing as timeInMS, that is, there will be a pause between registration and initial firing. However, this can be set to 0 (or some other number) to adjust how long of a delay there is before it begins.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5389</id>
	<key><![CDATA[Finds the numeric position of the first occurrence of needle in haystack. haystack is the string to search in, and needle is the string to search with. Returns the position of the needle (starting with 0) or -1 if the string is not found at all.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5390</id>
	<key><![CDATA[Attempts to clear all registered commands on the server. Vanilla and default Spigot functions are not affected, but all plugins commands are.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5391</id>
	<key><![CDATA[Replaces any occurrences of pattern with the replacement in subject. Back references are allowed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5392</id>
	<key><![CDATA[&quot;Super Cancels&quot; an event. This only will work if play-dirty is set to true. If an event is super cancelled, not only is the cancelled flag set to true, the event stops propagating down, so no other plugins (as in other server plugins, not just CH scripts) will receive the event at all  (other than monitor level plugins). This is useful for overriding event handlers for plugins that don&apos;t respect the cancelled flag. This function hooks into the play-dirty framework that injects custom event handlers into bukkit.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5393</id>
	<key><![CDATA[Returns true if the string needle is found anywhere within the string haystack (while ignoring case). This is functionally equivalent to string_position(to_lower(@haystack), to_lower(@needle)) | %sNo]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5394</id>
	<key><![CDATA[Returns true if the string needle is found anywhere within the string haystack. This is functionally equivalent to string_position(@haystack, @needle)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5395</id>
	<key><![CDATA[Fires when a player left or right clicks a block or the air. Note that this event may fire for the main hand, off hand, or twice, one for each hand, depending on the item priority and what is clicked. If you don't want multiple events, you can prefilter on hand. If you want to remove the item that is being used, you must also cancel the event.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5396</id>
	<key><![CDATA[You can actually reload these sub-modules individually if you want, by passing parameters to the command. There are two  modes, whitelist, or by default, blacklist. In blacklist mode, all modules get reloaded except the modules that are  blacklisted, which aren't reloaded. In whitelist mode, only the specified modules are reloaded. You use the underlined  letter to refer to that specific module. For instance, if you want to reload everything but leave the exported variables  and execution queue alone, you can run %s/recompile -ge%s. If you ONLY want to reload tasks, you can run %s/recompile --whitelist -t%s. Note that reloading individual modules isn't normally encouraged, because it can put your server in an inconsistent and unreproducible state if you aren't careful. Running  %s/recompile%s by itself (which reloads everything) is recommended. You can also run  %s/recompile -h%s for the usage instructions and long options list.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5397</id>
	<key><![CDATA[ivariable - An ivariable (or simply a variable) is a variable that can be defined and used from within the script.  Constant variables ($var), are assigned by the user at command runtime, and are technically constants as far as the  rest of the script is concerned. IVariables can be defined by the script writer and assigned various values that can  change throughout the script running. To define and use an ivariable, use the assign() function, or the = operator.  If an ivariable is used without first being defined, the value of the variable will be 0, 0.0, ,  false, or %s, depending on how it is used. Most functions use the value in the ivariable without caring that it is  an ivariable, but it is possible that a function requires that a certain argument be an ivariable, such as the for()  function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5398</id>
	<key><![CDATA[Pe%sr%ssistence-Config - Any changes to the persistence.ini file are reloaded]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5399</id>
	<key><![CDATA[To install MethodScript on your system, download the CommandHelper jar, and place it in a sensible location. If you are  already running a Minecraft server with CommandHelper installed, the jar file there will suffice, though you may wish to  place a copy of it elsewhere, as otherwise your persistence databases and settings will be combined. (Keep in mind that  using serialized persistence is NOT thread safe, and so you run the risk of corrupting your database by having two  instances of CH running at once, if they are both writing to the persistence db.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5400</id>
	<key><![CDATA[It is also worth noting that when using the auto keyword explicitly, this can open the door to failure to catch errors at compile time, as demonstrated in the above example with the auto keyword usage. Generally speaking, well maintainable software should not need to use the auto keyword explicitly, though it is ok to take advantage of the cross casting features when using hardcoded instances of objects, such as in example 4 above.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5401</id>
	<key><![CDATA[THIS FEATURE IS NOT YET IMPLEMENTED. Refactoring allows you to transfer your data from one backend to the other. By  default, CommandHelper uses the SerializedPersistence backend, but say after running your server for a while, you  decide to switch to another backend type, perhaps MySQL. You can use the refactor tool to easily transfer all of your  data from the SerializedPersistence backend to the new MySQL backend, without any hassle, and without losing any data.  As new backend providers become available, this tool will be updated, so you are able to switch around as often as  desired.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5402</id>
	<key><![CDATA[The merge tool allows you to move entire databases around. It works by you specifying a source database, and a  destination database, and it moves ALL the keys over to the new database, without touching the source. If there are  key conflicts, it will prompt you for a decision, so it should be safe from accidental data loss. The merge tool isn't  necessarily a replacement for the import and export tools, because it doesn't work transparently; it will only operate  on entire databases at a time, as opposed to namespaces and such. However, it can be used as a crude method of importing  and exporting, and if your entire persistence network is contained in one database, it will work exactly like a full  import/export. -->]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5403</id>
	<key><![CDATA[The data manager is an interactive shell program that runs as a standalone program. Before using the data manager to  edit your data, you should first ensure that nothing else is using your persistence files (so, shut down your server).  The only exception to this is for locking databases, such as SQL based backends, there should be no issues with  read/write access, even if the server is running, and read access for all other backends.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5404</id>
	<key><![CDATA[The Service annotation can only be applied to a concrete class, though in some cases, is optional. The required case is when there is a Contract, at least one Service must implement that Contract. However, you may have Services without a Contract, and in many cases, even without the configuration, a class is usable as a Service. When it comes to using the DI framework (rather than configuring it), Services (explicitly declared or assumed) can be used as a Contract, so the following is valid:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5405</id>
	<key><![CDATA[When DI::construct is called on a class, the parameters are automatically constructed, using the rules defined in the configuration. Classes that have the default injectability are constructed using the %s@{Inject}%sable constructor. This process happens recursively, until all parameters required are constructed. In general, there should only be one call to DI::construct per entry point in your program. This helps ensure that your entire ecosystem is correctly configured to handle DI properly, though there are a few legitimate reasons to call this manually.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5406</id>
	<key><![CDATA[Once set up, this makes it possible to remove most/all uses of the '''new''' keyword in your code, which makes your code more flexible and easier to write. Every use of the '''new''' keyword adds a point of  '''[%s tight coupling]]''', which makes your program less flexible down the road. Instead, using dependency injection essentially allows you to delegate the creation of objects to a centralized place, allowing for easy and quick changes down the road. However, in order to make use of these features, the code you write must explicitly opt in to this system, using the built in dependency injection framework. Configuration will be covered below, but let's assume that we have already configured the system, in that case, we can use the following in our normal code to take advantage of it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5407</id>
	<key><![CDATA[However, a programmer shouldn't have to specify every last little detail when telling a program what to do. Reasonable defaults should be used, though they should always be able to be overridden. A good example of this is in day to day speech. When speaking with another human, if we give them a task, we often times leave off details that don't really matter. For instance, if I told you to go water the lawn, and there are two hoses in the garage, you're not going to need to come back and ask me which host to use, you would just select one. However, if one were broken, I would have to go out of my way to tell you to use the one on the left, but this is an exceptional circumstance, and I shouldn't have to explicitly tell you every detail in the typical case.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5408</id>
	<key><![CDATA[Besides making this more readable anyways, neither of these cases are ambiguous anymore, and an error can be raised if a loose parenthetical is used alongside an actual function, and it will only attempt to call the procedure if two loose parentheticals are next to each other.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5409</id>
	<key><![CDATA[Quite simply, they aren't yet needed. Take javascript for instance, it does not have them either. Javascript will however "insert" them for you wherever you have a newline. Eventually, MethodScript will require them in a very few cases, at which point they will be introduced. Additionally, it will be possible to detect when an ambiguous situation is present, and trigger a compile error, instead of using javascript's approach and inferring where the separators are needed. They will be required once execution of closures via () is added. Consider the following theoretical syntax:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5410</id>
	<key><![CDATA[The stack trace can help you trace back the actual error, as the error itself is not necessarily with the top line in the stacktrace, which is where the actual exception was thrown. Instead, it might be because you're passing in an invalid parameter to a proc, so it may be useful to step back a few items in the stack trace to see what's calling what. Several things are added to the stack trace, particularly procedure stack, but also closures and includes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5411</id>
	<key><![CDATA[Delays can be inserted into a queue as well. This delay will suspend the queue's operation momentarily, but will not  freeze the server, since the delay will be on the execution queue's thread, not the server thread. This is a separate  operation, and uses the %s function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5412</id>
	<key><![CDATA[Queueing up the operations should complete relatively fast, but the full task will take a while.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5413</id>
	<key><![CDATA[Null values are always considered false. All primitives, and some more complex objects implement the %s type, which allows them to return true if the value is '''trueish''', meaning that while the value itself is not a boolean, it has a true/false interpretation, and can explicitly be cast to a boolean with the %s function. This is a generic concept though, and so it's not possible to create a comprehensive list of things that are supported with this mechanism.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5414</id>
	<key><![CDATA[In the first stage of connection, the interpreter handshakes with the remote connection, and requests an initial capabilities list.  These capabilities are considered non-authoritative client side, but are used to minimize network connections that would fail. All capabilities may be claimed to be dynamic however, and the server is free to send meta information to adjust this list at any time. The client has the option in certain circumstances to ignore this list, so it is important to note that this is not a security mechanism. If a request does fail for capability reasons, that information is cached in these tables. This capability list doubles as a "permission" list.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5415</id>
	<key><![CDATA[So what is the Class Library? It is simply a folder in your project directory that contains several .ms files, which define classes. Your "default" class library is defined within the classLibrary/ folder in your installation, but each LocalPackage may have their own classLibrary folder as well. MSLP files will have their own class library bundled in as well. When an .ms file is defined within a class library, the rest of your code does not have to do anything extra to load them in; at compile time, they will all be loaded automatically, and added to the object definition table that is usable at runtime throughout the rest of your code. There can be no directly executable code within these file, however, and this is enforced by the compiler. There may be only one outer class definition per file, and the fully qualified class name will be the path of the class, starting at the root of the class library folder. For instance, if we have the following file structure:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5416</id>
	<key><![CDATA[Note that we are explicitely calling A's constructor with the call to super,  and A's method2. If there had been several parents, this could be used to  "un-override" a call, or otherwise explicitely selected a method that had been  overridden by multiple children. This is useful outside of diamond inheritance,  but is more often used when dealing with multiple inheritance. Note that in the  case of super() constructors, it is always an error to cause a child's  constructor to be invoked before the parent's constructor. Calling a parent's method is only valid inside the class, an overridden method is not callable from outside of the instance.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5417</id>
	<key><![CDATA[Using square braces allows for array accesses, and in combination with the %s=%s sign, setting sub-indices. If the array set appears on the right hand side of an assignment, or in a general statement without an assign, it is an array_get operation. If it appears on the left hand side of an assignment, it is an array_set operation. The brackets apply to the element just preceding, for instance with %s@var['index']%s, it is assumed that %s@var%s is an array or array like value. Empty braces, %s[]%s, when on the left hand side works as an array push, and when on the right hand side, or in a general statement without an assign, it is an array clone operation (which ultimately still uses array_get). Sub-strings within strings may be pulled out using the bracket notation as well, and slices are supported. %sarray(1, 2, 3)[1..2]%s returns an array with 2 elements in it, namely 2 and 3. %s'string'[0]%s returns 's', and %s'string'[0..1]%s returns 'st'.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5418</id>
	<key><![CDATA[When in strict mode, use of functional notation instead of operators triggers a compiler warning. This warning is suppressible, however.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5419</id>
	<key><![CDATA[This will cause the routines that are currently blocked to throw the exception, and future calls to rwait will immediately throw as well. This provides a convenient "out" for the routines, if an indeterminate amount of data is being processed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5420</id>
	<key><![CDATA[Writing readable code is a huge part of easily debugging potential problems. While technically the compiler can read your code no matter how it's formatted (so long as it is syntactically correct), the compiler isn't the only thing that needs to read it, humans do too. So making your code "pretty" is a big step in making maintainable, debuggable, and shareable code. Many code styles are equally readable, and so in many cases, it is pure preference how you choose to format your code, however, this style guide is what will be used by any standard compliant code formatting tools that may be written in the future, and so following these examples is good practice.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5421</id>
	<key><![CDATA[However, there may be legitimate reasons to allow side effects. This is allowed by using the allowSideEffects parameter of the @{TestSuite} annotation. This is false by default, but if set to true, then for that test suite only, none of the external restrictions are enforced (persistence network, read/write, http_request). Additionally, within the test suite, the state of the environment is not reset before each test, though @{BeforeTest} and @{AfterTest} are still run before and after the test. There is also a guarantee that tests will run in order, from top to bottom, and they will not run in parallel. In general, this has many drawbacks, however, and will considerably slow down your unit tests, so should be used sparingly, if ever. Generally, the better solution is to refactor your actual code and tests such that  the tests can run independently of each other.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5422</id>
	<key><![CDATA[In some cases, a more complex mechanism needs to be used, particularly when the item under test does not return a value, but interacts with a value passed in, most generally a closure. In that case, you can use thenDo to give it an action to do when it is called, rather than having it return a value. The closure sent to thenDo will receive the arguments that were passed in to the original function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5423</id>
	<key><![CDATA[Some functions cannot be run directly on the client side, because they need data from the server. In this case, many functions transparently will compile to applicable javascript, and handle both the server and client side code to do manage this process for you. For instance, let's assume we want to read information from the persistence data on the server. We can simply use async_get_value like normal (get_value isn't available in the javascript compiler), and the call will still work.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5424</id>
	<key><![CDATA[This may be a remote file accessed with an SCP style path. (See the [[%s|wiki article]] about SCP credentials for more information.) If the file is not found, or otherwise can't be read in, an IOException is thrown. If the file specified is not within base-dir (as specified in the preferences file), a SecurityException is thrown. (This is not applicable for remote files) The line endings for the string returned will always be \n, even if they originally were \r\n. This method will immediately return, and asynchronously read in the file, and finally send the contents to the callback once the task completes. The callback should have the following signature: closure(@contents, @exception){ &lt;code&gt; }. If @contents is %s, that indicates that an exception occurred, and @exception will not be %s, but instead have an exception array. Otherwise, @contents will contain the file's contents, and @exception will be %s. This method is useful to use in two cases, either you need a remote file via SCP, or a local file is big enough that you notice a delay when simply using the read() function. async_read is threadsafe.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5425</id>
	<key><![CDATA[size: The size of the phantom. Clamped to 0 - 64 (default: 0). Phantoms deal (6 + size) damage.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5426</id>
	<key><![CDATA[PHANTOM]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5427</id>
	<key><![CDATA[marqueeName is optional, but required if you wish to stop the marquee at any point. text is the text that the marquee should scroll, stringWidth is the width of the string you wish to receive, delayTime is the time between character scrolls, and callback is a closure that should receive a string which will be exactly stringWidth long. (The string will have been wrapped as needed if it is less than that size.) This is usually used in combination with signs, but in theory could be used with anything that uses text.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5428</id>
	<key><![CDATA[The highest number that can be represented as a float]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5429</id>
	<key><![CDATA[The highest number that can be represented as a double]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5430</id>
	<key><![CDATA[The highest number that can be represented as a long]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5431</id>
	<key><![CDATA[The highest number that can be represented as a byte]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5432</id>
	<key><![CDATA[The highest number that can be represented as a short]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5433</id>
	<key><![CDATA[A representation of an undefined number (Not a Number), per the IEEE 754 standard]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5434</id>
	<key><![CDATA[The highest number that can be represented as a integer]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5435</id>
	<key><![CDATA[Basic usage, with one parameter]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5436</id>
	<key><![CDATA[Returns information about the runtime in a usable format. Depending on the information returned, it may be usable directly, or it may be more of a referential format.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5437</id>
	<key><![CDATA[Demonstrates compatibility with string class]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5438</id>
	<key><![CDATA[Demonstrates common usage]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5439</id>
	<key><![CDATA[Spawns the specified number of entities of the given type at the given location. Returns an array of entity UUIDs of what is spawned. Qty defaults to 1 and location defaults to the location of the commandsender, if it is a block or player. If the commandsender is console, location must be supplied.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5440</id>
	<key><![CDATA[Entitytype can be one of AREA_EFFECT_CLOUD, ARMOR_STAND, ARROW, BAT, BEE, BLAZE, BOAT, CAT, CAVE_SPIDER, CHICKEN, COD, COW, CREEPER, DOLPHIN, DRAGON_FIREBALL, DROPPED_ITEM, DROWNED, DONKEY, EGG, ELDER_GUARDIAN, ENDERMAN, ENDERMITE, ENDER_CRYSTAL, ENDER_DRAGON, ENDER_EYE, ENDER_PEARL, EVOKER, EVOKER_FANGS, EXPERIENCE_ORB, FALLING_BLOCK, FIREBALL, FIREWORK, FOX, GHAST, GIANT, GUARDIAN, HORSE, HUSK, ILLUSIONER, IRON_GOLEM, ITEM_FRAME, LLAMA, LLAMA_SPIT, LEASH_HITCH, LIGHTNING, MAGMA_CUBE, MINECART, MINECART_CHEST, MINECART_COMMAND, MINECART_FURNACE, MINECART_HOPPER, MINECART_MOB_SPAWNER, MINECART_TNT, MULE, MUSHROOM_COW, OCELOT, PAINTING, PANDA, PARROT, PHANTOM, PIG, PIG_ZOMBIE, PILLAGER, POLAR_BEAR, PRIMED_TNT, PUFFERFISH, RABBIT, RAVAGER, SALMON, SHEEP, SILVERFISH, SKELETON, SHULKER, SHULKER_BULLET, SKELETON_HORSE, SLIME, SMALL_FIREBALL, SNOWBALL, SNOWMAN, SQUID, SPECTRAL_ARROW, SPIDER, SPLASH_POTION, STRAY, THROWN_EXP_BOTTLE, TRADER_LLAMA, TRIDENT, TROPICAL_FISH, TURTLE, VEX, VILLAGER, VINDICATOR, WANDERING_TRADER, WITCH, WITHER, WITHER_SKELETON, WITHER_SKULL, WOLF, ZOMBIE, ZOMBIE_HORSE or ZOMBIE_VILLAGER. FALLING_BLOCK will be SAND (can use %s instead). DROPPED_ITEM will be STONE (can use %s instead). If not FALLING_BLOCK or DROPPED_ITEM, a closure can be used as the last argument to modify the entity before adding it to the world. The entity's UUID is passed to the closure.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5441</id>
	<key><![CDATA[Returns true if the string needle is found anywhere within the string haystack. This is functionally equivalent to string_position(@haystack, @needle) != -1, but is generally clearer.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5442</id>
	<key><![CDATA[Returns true if the string needle is found anywhere within the string haystack (while ignoring case). This is functionally equivalent to string_position(to_lower(@haystack), to_lower(@needle)) != -1, but is generally clearer.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5443</id>
	<key><![CDATA["Super Cancels" an event. This only will work if play-dirty is set to true. If an event is super cancelled, not only is the cancelled flag set to true, the event stops propagating down, so no other plugins (as in other server plugins, not just CH scripts) will receive the event at all  (other than monitor level plugins). This is useful for overriding event handlers for plugins that don't respect the cancelled flag. This function hooks into the play-dirty framework that injects custom event handlers into bukkit.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5444</id>
	<key><![CDATA[Writes a file to the file system. This method only works from the cmdline, if not in cmdline, a SecurityException is thrown. Because of this, there is no check against the base-dir path.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5445</id>
	<key><![CDATA[- class="hiddenFunction"]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5446</id>
	<key><![CDATA[Returns the UUID of the current player or the specified player. This will attempt to find an offline player, but if that also fails, a PlayerOfflineException will be thrown. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5447</id>
	<key><![CDATA[It is not recommended to give this user input. If the player is offline and hasn't visited the server recently (so that they're not in the user cache), the server may block the main thread with an HTTP request to Mojang's servers.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5448</id>
	<key><![CDATA[ArrayHandling%sBasicLogic%sBossBar%sBukkitMetadata%sByteArrays%sClipboard%sCmdline%sCommands%sCompiler%sControlFlow%sCrypto%sDataHandling%sDataTransformations%sDebug%sEchoes%sEnchantments%sEntityManagement%sEnvironment%sEventBinding%sExceptions%sExecutionQueue%sExtensionMeta%sFileHandling%sInventoryManagement%sItemMeta%sMarquee%sMath%sMeta%sMinecraft%sMobManagement%sOAuth%sOS%sObjectManagement%sPerformance%sPermissions%sPersistence%sPlayerManagement%sPluginMeta%sRecipes%sReflection%sRegex%sResourceManager%sSQL%sSandbox%sScheduling%sScoreboards%sStatistics%sStringHandling%sTaskHandling%sThreading%sTrades%sWeather%sWeb%sWorld%sXGUI%sCmdline]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5449</id>
	<key><![CDATA[Returns the specified value from this procedure or closure. It cannot be called outside a procedure or closure. The function itself does not return a value as such, as it is a terminal function, and prevents further execution within the calling code. Instead it causes the host procedure or closure to return the specified value, and ends termination. (There are exceptions to this rule, see the docs on try/catch, particularly the finally clause for example).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5450</id>
	<key><![CDATA[dir]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5451</id>
	<key><![CDATA[The absolute path to the directory that the current file is in]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5452</id>
	<key><![CDATA[location%s: %s&lt;Location Match&gt;%splayer%s: %s&lt;String Match&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5453</id>
	<key><![CDATA[Fires when a player steps on a pressure plate or other interactable block.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5454</id>
	<key><![CDATA[location%s: The location of the block%sactivated%s: (deprecated)%splayer%s: The player associated with this event]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5455</id>
	<key><![CDATA[Waits for the thread with the given id to exit. By default, we wait potentially forever, but if maxWait is specified, we will only wait that many milliseconds. (Sending 0 for this value causes an infinite wait.) If the timeout occurs, an InterruptedException is thrown. If the id is unknown, an IllegalArgumentException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5456</id>
	<key><![CDATA[string id, int maxWait]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5457</id>
	<key><![CDATA[The core exception types are:  %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, %s, and]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5458</id>
	<key><![CDATA[The following items can be retrieved:{| |- ! param ! args ! returns/description |- | label |  | Return the label that the script is currently running under |- | command | | Returns the command that was used to fire off this script (if applicable) |- | varlist | [name] | Returns a list of currently in scope variables. If name is provided, the currently set value is instead returned. |- | line_num | | The current line number |- | file | | The absolute path to the current file |- | dir | | The absolute path to the directory that the current file is in |- | col | | The current column number |- | datasources | | An array of data source protocols available |- | enum | [enum name] | An array of enum names, or if one is provided, a list of all the values in that enum |- | keywords | [keyword name] | Lists the keywords, if no parameter is provided, otherwise provides the documentation for the specified keyword |- | telemetry_session | | The session id used in telemetry for the current session. This will return %s if telemetry is disabled. In general, this key is used to track individual sessions. If needed, this can be provided to the maintainers to associate your data with you. If you wish for your telemetry data to remain anonymous, do not provide this key to the maintainers. (People without access to the telemetry system cannot do anything with the key anyways.)|}]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5459</id>
	<key><![CDATA[Sets the number of immunity ticks a living entity has remaining.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5460</id>
	<key><![CDATA[Gets the number of immunity ticks a living entity has remaining. After being damaged, an entity is given 10 ticks of immunity from equal or lesser damage.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5461</id>
	<key><![CDATA[Sets the block at the location from a blockdata object. Blockdata can be an associative array or string format. If an array, a &apos;block&apos; key must exist with the block material. All the other keys must be a blockstate and its value.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5462</id>
	<key><![CDATA[location%s: %s&lt;Location Match&gt;%splayer%s: %s&lt;Macro&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5463</id>
	<key><![CDATA[The item array also serves as a map for what to compare. If included in the array, the values for the keys "display", "lore", "enchants", and "model" from the meta array, will be compared to the items in the inventory. More keys may be added in the future.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5464</id>
	<key><![CDATA[Sets the block at the location from a blockdata object. Blockdata can be an associative array or string format. If an array, a 'block' key must exist with the block material. All the other keys must be a blockstate and its value.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5465</id>
	<key><![CDATA[Gets if a player is sprinting or not.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5466</id>
	<key><![CDATA[Gets if a player is blocking or not.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5467</id>
	<key><![CDATA[Gets the flying state for the player.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5468</id>
	<key><![CDATA[Gets if a living entity is sleeping or not. Only some entity types can sleep.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5469</id>
	<key><![CDATA[Remove a certain recipe by its registered key. Returns whether the recipe was removed successfully or not.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5470</id>
	<key><![CDATA[recipe_key]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5471</id>
	<key><![CDATA[Remove a certain recipe by its registered key. Returns whether the recipe was removed successfully or not. (Minecraft 1.15.2 or higher)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5472</id>
	<key><![CDATA[player%s: %s&lt;String Match&gt;%sid%s: %s&lt;Macro&gt;%sdamager%s: %s&lt;Macro&gt;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5473</id>
	<key><![CDATA[player%s: The player being damaged%sdamager%s: The type of entity causing damage%samount%s: raw amount of damage caused%sfinalamount%s: health player will lose after modifiers%scause%s: the cause of damage%sdata%s: the attacking player's name or the shooter if damager is a projectile%sid%s: The entity UUID of the damager%slocation]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5474</id>
	<key><![CDATA[Default file options can be supplied on a per directory basis, by creating a file named %s.msfileoptions%s in any directory. Scripts in that directory as well as subdirectories will then use the defaults set in this file. If there are multiple .msfileoption files in the parent directory chain, they are read in from root to subfolder, using the value set in the lowest file. That is, if you have a file %s/.msfileoptions%s and %s/scripts/.msfileoptions%s, with options that are set in both files, %s/scripts/.msfileoptions%s will take precedence. In any case, the file options in the file itself always take precedence.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5475</id>
	<key><![CDATA[copyright]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5476</id>
	<key><![CDATA[The date this file was created. This value is not used by the compiler, but is perhaps useful information for future readers of the script. This value is accessible via %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5477</id>
	<key><![CDATA[A description of this file. This value is not used by the compiler, but is perhaps useful information for future readers of the script. This value is accessible via %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5478</id>
	<key><![CDATA[The copyright information for the file. This value is accessible via %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5479</id>
	<key><![CDATA[Suppresses the given compiler warnings for this file. The list should be comma separated, but can contain multiple types.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5480</id>
	<key><![CDATA[File options are a way to granularly control options for a single file. Some file options affect the compiler directly, others are simply used by the reflection mechanism to provide info during runtime, or for future readers of the code. Unrecognized file options are ignored, but are otherwise not an error, however, you should prefix all custom file options with "x-" to prevent future conflicts if new file options are introduced.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5481</id>
	<key><![CDATA[The author of this file. This value is not used by the system, but is available using %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5482</id>
	<key><![CDATA[The format of this file is the same as for file options directly in source code, except you leave off the beginning %s&lt;!%s and end %s&gt;%s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5483</id>
	<key><![CDATA[The license under which the code is released. This can be the full license text or just the name of the license, or perhaps a link to the full license file. Generally, proprietary code does not need a license. This value is accessible via %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5484</id>
	<key><![CDATA[license]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5485</id>
	<key><![CDATA[The file options must be defined at the top of the file, and can only be proceeded by comments, and start with %s&lt;!%s and end with %s&gt;%s. Newlines within the file options are acceptable. If, within the value, you need a literal &gt; or semicolon, you must escape it with \, so %s\&gt;%s or %s\;%s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5486</id>
	<key><![CDATA[The following items can be retrieved:{| |- ! param ! args ! returns/description |- | label |  | Return the label that the script is currently running under |- | command | | Returns the command that was used to fire off this script (if applicable) |- | varlist | [name] | Returns a list of currently in scope variables. If name is provided, the currently set value is instead returned. |- | line_num | | The current line number |- | file | | The absolute path to the current file |- | dir | | The absolute path to the directory that the current file is in |- | col | | The current column number |- | datasources | | An array of data source protocols available |- | enum | [enum name] | An array of enum names, or if one is provided, a list of all the values in that enum |- | keywords | [keyword name] | Lists the keywords, if no parameter is provided, otherwise provides the documentation for the specified keyword |- | telemetry_session | | The session id used in telemetry for the current session. This will return %s if telemetry is disabled. In general, this key is used to track individual sessions. If needed, this can be provided to the maintainers to associate your data with you. If you wish for your telemetry data to remain anonymous, do not provide this key to the maintainers. (People without access to the telemetry system cannot do anything with the key anyways.) |- | file_options_author | | Returns the author name, as set in the file options. Empty string is returned if it is not set.|- | file_options_created | | Returns the created date, as set in the file options. Empty string is returned if it is not set.|- | file_options_description | | Returns the file description, as set in the file options. Empty string is returned if it is not set.|- | file_options_copyright | | Returns the copyright information, as set in the file options. Empty string is returned if it is not set.|- | file_options_license | | Returns the code license, as set in the file options. Empty string is returned if it is not set.|}]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5487</id>
	<key><![CDATA[Works like include, but takes a directory, and includes all files within the directory. Recursive defaults to false, but if true, recurses down into all subdirectories as well. As an implementation note, this function is fully resolved at compile time, thus the inputs must be hardcoded. The directories are scanned at compile time, and replaced with individual includes for each .ms file found.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5488</id>
	<key><![CDATA[directory, %s[%srecursive%s]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5489</id>
	<key><![CDATA[file_options_copyright]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5490</id>
	<key><![CDATA[Returns the author name, as set in the file options. Empty string is returned if it is not set.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5491</id>
	<key><![CDATA[telemetry_session]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5492</id>
	<key><![CDATA[file_options_description]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5493</id>
	<key><![CDATA[file_options_license]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5494</id>
	<key><![CDATA[Returns the file description, as set in the file options. Empty string is returned if it is not set.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5495</id>
	<key><![CDATA[Returns the created date, as set in the file options. Empty string is returned if it is not set.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5496</id>
	<key><![CDATA[Returns the code license, as set in the file options. Empty string is returned if it is not set.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5497</id>
	<key><![CDATA[file_options_author]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5498</id>
	<key><![CDATA[The session id used in telemetry for the current session. This will return %s if telemetry is disabled. In general, this key is used to track individual sessions. If needed, this can be provided to the maintainers to associate your data with you. If you wish for your telemetry data to remain anonymous, do not provide this key to the maintainers. (People without access to the telemetry system cannot do anything with the key anyways.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5499</id>
	<key><![CDATA[file_options_created]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5500</id>
	<key><![CDATA[Returns the copyright information, as set in the file options. Empty string is returned if it is not set.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5501</id>
	<key><![CDATA[Returns a ClassType object for the given fully qualified class name. If the given class doesn&apos;t exist, a NotFoundException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5502</id>
	<key><![CDATA[Returns information about the given ClassType. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5503</id>
	<key><![CDATA[string name]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5504</id>
	<key><![CDATA[Often times you may find yourself with a unique set of predefined constants, for instance, compass directions NORTH, SOUTH, EAST, and WEST, or days of the week. Additionally, you may have a set of these enums, which can be represented as a bit mask. For these two situations, you should use the ''enum'' and ''mask'' types, respectively.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5505</id>
	<key><![CDATA[An enum is a specially declared class, which follows certain extra rules, but otherwise behaves just like a normal class. It may have data members and methods, just like any other class. The exceptions are that the class is effectively final (it cannot be extended by other classes/enums), and the constructor, if provided, must be private. The default constructor for enum values are private as well. Essentially, there must be no way to instantiate the enum object outside of the context of the enum itself, and it can't be overridden. To declare a simple enum, use the following syntax:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5506</id>
	<key><![CDATA["Client" - refers to a Federated client. All MethodScript processes can simultaneously be both a server and a client.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5507</id>
	<key><![CDATA["MethodScript process" - refers to the process that is running a MethodScript interpreter. This might be a server that is hosting the MethodScript process, a cmdline process, or some other system.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5508</id>
	<key><![CDATA["Federation Protocol" - the protocol via with Federated Systems communicate. All Federated Systems must use standard TCP Sockets, though they are allowed to fall back to other communication systems if the server and client can agree on the communication medium. For those interested in implementing the protocol, or generally learning more about the specifics of the protocol, see the  of the protocol.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5509</id>
	<key><![CDATA[Assuming the HELLO and version check are successful, the client will write the string "GET PORT", then another string, the server name it is requesting the port of. The server will respond with the string "OK", then the integer port number, if it found the server, or the string "ERROR" and then another string, which is the error message, if it could not. Then the connection is closed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5510</id>
	<key><![CDATA[Each slave server should regularly check that the master port is bound to, and if not, it should spin up a master server in addition to the slave server it is already running. This can be done in the heartbeat thread for the slave server. Each slave server is responsible for picking a random unused port (usually between  and ), and then registering that information with the file system. In standard MethodScript servers, this will be the Persistence Network's registry, using the "federation.**" namespace. It is assumed that the administrator will keep all server instances pointed to the same registry. The registry contains information about each slave server, including the server name, the slave port it is listening on, and a "last_updated" timestamp, which if expires, %ss the entry. The heartbeat thread, in addition to checking for the master server, should update this timestamp on a regular basis.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5511</id>
	<key><![CDATA[To facilitate easier parsing of the text, some segments have been modified to remove information that should definitely not be localized. For instance, urls, code, template markers, and other strings of that nature. In place of those symbols, '''%s''' has been added instead. THESE MUST BE LEFT IN PLACE. It should generally be obvious where it should go, often times these are within brackets, or surrounding a single word, etc. There are often time other symbols, such as html escapes, brackets, and other symbols that should be left intact in the translation, unless it's obviously supposed to be changed. There are also other cases where it's impossible to automatically determine whether or not to exclude a particular word from a translation, depending on the context. For instance, function names an other references to code should never be localized, as function names may only be in English. You must use common sense when doing the localization, and ensure that you don't change things that must be there for site functionality or may confuse the reader. In some cases, the entire segment is correct without any translation, for instance segments that are just the name of a function. In this case, do not copy the english over, instead, switch to general mode and mark it as untranslatable. This will cause it to use the English in all locales, but also remove it from the list of "missing translations". Unfortunately, segments that contain strings that shouldn't be translated are not going to be eligible for automatic translation, and must be manually translated, ensuring that the untranslatable parts are left intact.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5512</id>
	<key><![CDATA[Before running the site-deploy tool, in your site-deploy.ini file, set production-translations to "%s". Run the site-deploy tool like normal, with the latest version of the codebase. You can either download the latest release, or build it yourself, but to a%s missing segments, it must be based on the latest release build.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5513</id>
	<key><![CDATA[To this end, a Localization (or L10n) framework has been put in place to facilitate bilingual localizers to help translate the documentation into languages other than English! Much care has been put into ensuring the accuracy of the documentation, and the language of it is no exception. This document describes the l10n framework, which is important to understand if you wish to contribute l10ns.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5514</id>
	<key><![CDATA[Eventually, it is the hope that MethodScript be made into a generic framework that allows for any application to easily implement it's own functions that can be applied to whatever domain is being used. Many of the functions are completely independent of Minecraft, and could be included in a "core" that is distributed, and each application can define their own API. With the built in documentation features, it would be easy to expand (and keep the documentation up-to-date and useful).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5515</id>
	<key><![CDATA['''Full blown debugger''' (VSC plugin is the end goal, though cmdline tools (gdb style) will be implemented first, to secure the raw functionality. This depends on Networking, because the debugger must support remotes first, which will also cover local debugging)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5516</id>
	<key><![CDATA[In addition, MethodScript borrows strong points from other languages, which in addition to making it easier to learn for people who have exposure to other languages, also helps it to stand on the shoulders of giants, and is able to "start from scratch" and get rid of features that aren't desirable with other languages, while not having to worry about losing backwards compatibility.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5517</id>
	<key><![CDATA[This is a [%s valid question]. What does MethodScript offer that other scripting languages don't? Simplicity. This has several benefits, and drawbacks that we must consider. In general, MethodScript is much easier to learn than other languages. In essence, everything is a function, including common control structures. This makes many concepts easier to learn, and makes for easily embeddable scripts. This is demonstrated by MethodScripts being embedded in the aliases.msa file. Each script is run separately from each other, and is embedded inside a simpler format, which facilitates easier integration into existing paradigms. Secondly, as a scripting language, it is easy to transmit in plain text, which makes it perfect for simple configuration and customization. Finally, it has many built in features that simplify development, such as the include() function. With everything, there are drawbacks though. Since it is not strongly typed, this makes it easier to use, but harder to maintain. It is not possible to easily refactor dynamic elements. Though it will be pseudo object oriented, it is somewhat added on top, it wasn't initially designed with this in mind. Though the design of the object oriented features should be properly designed, they are being designed inside the existing constraints of the non-object oriented features.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5518</id>
	<key><![CDATA[This page serves as a general guide for the features I intend on implementing. Note that I reserve the right to modify, rearrange, add, remove, eat, or delete this list or any parts of it at any given time, with or without notice to you or your lawyers. :D However, more than likely, if there is a feature on this list, I plan to add it at some point, but it may get shuffled around some in the process. Items shown in '''bold''' are major tasks, and their completion would likely bump the major or minor version number (and will take longer), while other features would probably only bump the supplemental version number, unless several were released at once. Sub bullets must wait on their parent task being completed before they could be done. Adding more raw functions to allow more hooks into the game itself or functions to simplify common programming tasks are continually being added. Also note that these tasks are not in any particular order, though the main bullet points are roughly in order.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5519</id>
	<key><![CDATA[Finally, unlike JavaScript, MethodScript's documentation is a priority, and documentation is created from the authoritative source. The website's goal is to provide comprehensive documentation and examples, which helps promote understanding.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5520</id>
	<key><![CDATA[In general, it is recommended to simply use the MethodScriptVSC extension for Visual Studio Code, as that is the only officially supported syntax highlighter. These self-generated syntax highlighters are supported on a community basis.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5521</id>
	<key><![CDATA[See the page about the [[%s|MethodScriptVSC]].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5522</id>
	<key><![CDATA[The MethodScript jar comes packaged with a syntax highlighter generator for several different text editors. The syntax files can be updated with data from your specific jar, so it is guaranteed to be up to date. To run the tool, run]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5523</id>
	<key><![CDATA[There is a special type called %sauto%s, which essentially means "don't use the typing system on this value." In fact, values that are declared without a type are actually declared as type %sauto%s! These two declarations are exactly the same:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5524</id>
	<key><![CDATA[Helper Functions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5525</id>
	<key><![CDATA[This casting is not automatic for typed variables, you must explicitely provide the cast to do the conversion. However, this is not true for values of type %sauto%s, whether explicitely typed as such or implicitely typed due to no type being provided. Consider the same code as above but with @s being auto:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5526</id>
	<key><![CDATA[In this example, if the value exported to 'username' had been set as something other than a string, we would fail on line 2. Perhaps accidentally, we had stored an array to the value, in that case, the user would be messaged the whole array. This can prevent us from continuing with the code after we have gotten into an unexpected state. Once these type errors are moved into the compiler, it makes even more sense, because then we would be able to catch these errors even faster, and not require the code to ever be run before we found the error.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5527</id>
	<key><![CDATA[Declarations within Expressions]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5528</id>
	<key><![CDATA[auto%s Type and %smixed%s Type]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5529</id>
	<key><![CDATA[We are actually doing two separate operations in this one line, we are ''declaring'' a new variable, %s@s%s, and stating that it is of type %sstring%s. Secondly, we are assigning the string %s"string"%s to the variable. This seems a bit silly at first, since it seems like we're duplicating information, after all, we can clearly see that it's a string being assigned. However, consider later code that then uses @s, and perhaps tries to re-assign the value.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5530</id>
	<key><![CDATA[This can help prevent future errors in your code, by preventing use of a value that isn't intended. Sometimes this can help catch bugs that would otherwise be extremely difficult to catch otherwise. A clearer example of this will be shown later.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5531</id>
	<key><![CDATA[Each defined type is actually a subclass of one or more ''parent types'', (known as ''superclasses'') with the exception of the root type, %smixed%s, which has no superclasses. For any given type, it is always allowed to replace it with a subtype of that class with no error. Consider the following:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5532</id>
	<key><![CDATA[Null is a special value which can be assigned to all types. Also, note that ''forward declarations'', that is, where you define a value but don't set it, default to %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5533</id>
	<key><![CDATA[In both these cases, we have declared the type on the input and output. We have stated that the procedure _myProc must return a value of type string, and accept an input parameter of type int. Likewise, we have stated that the closure must return a value of type int, and takes an input of type string. (Incidentally, we have also defined the variable @c, which must be of type closure.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5534</id>
	<key><![CDATA[Currently, the following is possible, but is officially considered "undefined behavior", meaning that it is subject to change or removal in future versions:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5535</id>
	<key><![CDATA[Caveats]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5536</id>
	<key><![CDATA[When dealing with types, it's useful to note some various helper functions.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5537</id>
	<key><![CDATA[However, this functionality is not yet implemented, meaning the code will cause an error, despite it intended to be valid code. We currently get %s: @i is of type %s, but a value of type %s was assigned to it.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5538</id>
	<key><![CDATA[Note that some casts will be invalid anyways. If there's simply no way for a value to be an instance of the particular type, that cast won't be allowed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5539</id>
	<key><![CDATA[Subclasses]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5540</id>
	<key><![CDATA[Specifically for procedures and closures, it may be that they do not return a value at all. These are said to ''return %s'', meaning that they don't have a return type. You can explicitely declare this with the %s type.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5541</id>
	<key><![CDATA[In the meantime, to work around this, you must explicitely cast the value using one of the various manual cast methods that each primitive has. In this case, %s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5542</id>
	<key><![CDATA[Initially, one might wonder the difference between using %sauto%s and %smixed%s. Using mixed still follows the type system, and requires manual casting to convert values.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5543</id>
	<key><![CDATA[Similar to %s we can simply find out the current concrete type.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5544</id>
	<key><![CDATA[Effectively, %sauto%s types are assumed to be the correct type no matter how they're being used. Types stored in %smixed%s must first be cast to the correct type. Both approaches have merit, and so it depends on what you're doing as to what mechanism you should use.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5545</id>
	<key><![CDATA[returns the ClassType object, which we can then use to gather data about a particular type:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5546</id>
	<key><![CDATA[Casting is the act of bypassing various compiler checks when dealing with subclasses. This bypasses some of the type safety, but is required in some cases. Consider the following code from one of the examples above.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5547</id>
	<key><![CDATA[If you would like to read more about how this feature is intended to work, see the design document [[%s|here]].]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5548</id>
	<key><![CDATA[MethodScript is an optionally strongly typed language. This means that variables and procedure/closure input and outputs declare the '''type''' that they are, and only values of that type are allowed to be assigned to that variable, or returned by the procedure/closure. It is optionally strongly typed, because - outside of strict mode - it is not required that you provide a type.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5549</id>
	<key><![CDATA[This becomes much clearer when we start adding types everywhere. Consider the following example:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5550</id>
	<key><![CDATA[The simplest example is this:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5551</id>
	<key><![CDATA[This is valid because %sint%s is a subtype of %snumber%s. We can discover the superclasses for a given type a number of ways, but we can use %s to get this information. We can get the full superclass chain with the following code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5552</id>
	<key><![CDATA[Cross casting is a runtime conversion of values from one type to another. Currently, cross casting is implemented opaquely in primitive objects, but is not "exposed" to the end user in a formal way. Consider the following code:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5553</id>
	<key><![CDATA[This will continue to work even after this feature is implemented, so there is no code migration risk by doing it this way. It's also worth noting that literals in code will be considered auto for the purposes of cross casting, so things like this will also eventually work:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5554</id>
	<key><![CDATA[There are unfortunately a few loose ends that are caveats at this stage of implementation, which are planned to be implemented, but aren't complete yet.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5555</id>
	<key><![CDATA[tells you if the ''concrete type'' of a value is of a certain type. This is a runtime operation, so it has nothing to do with the type that the variable was declared with, but the type that the value itself is right now.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5556</id>
	<key><![CDATA[Procedure and Closure Typing]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5557</id>
	<key><![CDATA[The reason this works is because currently, the type system is ''type hinting'', not strong typing. Since the type system is implemented at runtime, rather than at compile time, we don't look at the second line of code until after the first line is run. In this case, we see that @m is in fact a string, and so we allow it to be assigned to @s.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5558</id>
	<key><![CDATA[In this case, we are comparing a string and an integer to each other, and find that they are in fact equal. Why is this? This is due to cross casting. We effectively convert the string value to an integer, then compare it. Formally speaking, this is due to ''cross casting''. Eventually, string will be formally declared as cross castable to integers, and vice versa. This means that when we try to cast, we will make a runtime conversion to the expected value.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5559</id>
	<key><![CDATA[Eventually, this will be corrected, and will be an error. However, @m actually does contain a string, so how would we make this work? Through an act called ''casting''. When we ''cast'' a value, we tell the compiler that we are positive that the current value is of the given type. We may have determined this through clever use of instanceof or simply hardcoded a particular value, but we're essentially telling the compiler to trust us, and don't cause an error. The syntax will be:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5560</id>
	<key><![CDATA[Variable Typing]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5561</id>
	<key><![CDATA[Casting]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5562</id>
	<key><![CDATA[Type]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5563</id>
	<key><![CDATA[Putting it together]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5564</id>
	<key><![CDATA[We can prove this by using the %s function:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5565</id>
	<key><![CDATA[This is easier to read in the future anyways.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5566</id>
	<key><![CDATA[Values that are of type auto bypass the compilation checks, though they may still cause errors at runtime.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5567</id>
	<key><![CDATA[Now, we would get the error: "%s: @s is of type %s, but a value of type %s was assigned to it."]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5568</id>
	<key><![CDATA[Casting upward is not allowed, because subclasses are always a valid instance of a superclass.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5569</id>
	<key><![CDATA[Do not rely on this behavior, as assignments are intended to be separate statements. Instead, rewrite the code to the following:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5570</id>
	<key><![CDATA[Both the inputs and output of both procedures and closures can be typed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5571</id>
	<key><![CDATA[Next, we want to test to ensure that a connection can be made to the server. Take note of the port listed in webserver.ini. By default, this is 16438, though if you changed this, use the new value in place. On Windows, open a web browser, and go to "%s". (On Linux, run curl "%s) If everything is working, you should get a 404. Since we have not created any scripts, this is expected, but it means that the server is up and accepting connections. If you get a connection refused error, restart the server in --foreground mode, and check the server startup logs to see if there is an error.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5572</id>
	<key><![CDATA[Returns a ClassType object for the given fully qualified class name. If the given class doesn't exist, a NotFoundException is thrown.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5573</id>
	<key><![CDATA[The package that the class lives in.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5574</id>
	<key><![CDATA[fqcn]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5575</id>
	<key><![CDATA[isNative]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5576</id>
	<key><![CDATA[superclasses]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5577</id>
	<key><![CDATA[docs]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5578</id>
	<key><![CDATA[True if this is a class defined in native code.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5579</id>
	<key><![CDATA[The following information is returned:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5580</id>
	<key><![CDATA[interfaces]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5581</id>
	<key><![CDATA[package]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5582</id>
	<key><![CDATA[An array of classes that this type inherits from. With the exception of the root mixed type, this will never be empty.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5583</id>
	<key><![CDATA[The Fully Qualified Class Name, that is, the name that unambiguously identifies this class.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5584</id>
	<key><![CDATA[Returns information about the given ClassType.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5585</id>
	<key><![CDATA[An array of interfaces that this type implements, may be empty.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5586</id>
	<key><![CDATA[The simple name of the class.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5587</id>
	<key><![CDATA[The documentation for the type.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5588</id>
	<key><![CDATA[sender, %s[%slabel%s]%s, script]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5589</id>
	<key><![CDATA[Executes the given closure in the context of a given player or ~console. A closure that runs player(), for instance, would return the specified player&apos;s name. If %s is given, it will execute with the current sender context instead of the closure&apos;s. The label argument sets the permission label that this closure will use. If %s is given, the closure&apos;s label will be used, like with execute().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5590</id>
	<key><![CDATA[sender, label, %s[%svalues...%s]%s, closure]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5591</id>
	<key><![CDATA[Executes the given closure in the context of a given player or ~console. A closure that runs player(), for instance, would return the specified player's name. If %s is given, it will execute with the current sender context instead of the closure's. The label argument sets the permission label that this closure will use. If %s is given, the closure's label will be used, like with execute().]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5592</id>
	<key><![CDATA[Binds some functionality to an event, so that when said event occurs, the event handler will fire. Returns the id of this event, so it can be unregistered later, if need be. See more on the page detailing [[Events]]. The options array can contain &quot;id&quot; and &quot;priority&quot;, where priority is one of: LOWEST, LOW, NORMAL, HIGH, HIGHEST, or MONITOR. The prefilters vary from event to event.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5593</id>
	<key><![CDATA[Binds some functionality to an event, so that when said event occurs, the event handler will fire. Returns the id of this event, so it can be unregistered later, if need be. See more on the page detailing [[Events]]. The options array can contain "id" and "priority", where priority is one of: LOWEST, LOW, NORMAL, HIGH, HIGHEST, or MONITOR. The prefilters vary from event to event.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5594</id>
	<key><![CDATA[http_request&lpar;&apos;%s;, closure&lpar;@response&rpar;&lcub; 	msg&lpar;@response&lsqb;&apos;body&apos;&rsqb;&rpar;; &rcub;&rpar;;%s Copy Code%s1%s&nbsp;&nbsp;&nbsp;%s&lpar;%s&apos;%s;%s, %s&lpar;%s@response%s&rpar;&lcub;%s2%s&nbsp;&nbsp;&nbsp;&nbsp;&nbsp;%s&lpar;%s@response%s&lsqb;%s&apos;body&apos;%s&rsqb;&rpar;;%s3%s&nbsp;&nbsp;&nbsp;&rcub;&rpar;;]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5595</id>
	<key><![CDATA[With ClassType references]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5596</id>
	<key><![CDATA[Via typeof()]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5597</id>
	<key><![CDATA[When the type was added.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5598</id>
	<key><![CDATA[Note that docs, package, since, and isNative are in an object in an array. If the given type represent a type union, there will be more than one object in this array. (Note that type unions aren't supported yet.)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5599</id>
	<key><![CDATA[since]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5600</id>
	<key><![CDATA[Plays the specified effect at the given location for all players within the radius (or 64 by default). The effect can be one of the following: DRAGON_BREATH, END_GATEWAY_SPAWN, ENDER_SIGNAL, MOBSPAWNER_FLAMES, POTION_BREAK, SMOKE, VILLAGER_PLANT_GROW, ANVIL_BREAK, ANVIL_LAND, ANVIL_USE, BAT_TAKEOFF, BLAZE_SHOOT, BOW_FIRE, BREWING_STAND_BREW, CHORUS_FLOWER_DEATH, CHORUS_FLOWER_GROW, CLICK1, CLICK2, DOOR_CLOSE, DOOR_TOGGLE, ENDERDRAGON_GROWL, ENDERDRAGON_SHOOT, ENDEREYE_LAUNCH, EXTINGUISH, FENCE_GATE_CLOSE, FENCE_GATE_TOGGLE, FIREWORK_SHOOT, GHAST_SHOOT, GHAST_SHRIEK, IRON_DOOR_CLOSE, IRON_DOOR_TOGGLE, IRON_TRAPDOOR_CLOSE, IRON_TRAPDOOR_TOGGLE, PORTAL_TRAVEL, RECORD_PLAY, STEP_SOUND, TRAPDOOR_CLOSE, TRAPDOOR_TOGGLE, ZOMBIE_CHEW_WOODEN_DOOR, ZOMBIE_CHEW_IRON_DOOR, ZOMBIE_DESTROY_DOOR, WITHER_BREAK_BLOCK, WITHER_SHOOT, ZOMBIE_CONVERTED_VILLAGER, or ZOMBIE_INFECT. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5601</id>
	<key><![CDATA[Plays the specified effect at the given location for all players within the radius (or 64 by default). The effect can be one of the following: DRAGON_BREATH, END_GATEWAY_SPAWN, ENDER_SIGNAL, MOBSPAWNER_FLAMES, POTION_BREAK, SMOKE, VILLAGER_PLANT_GROW, ANVIL_BREAK, ANVIL_LAND, ANVIL_USE, BAT_TAKEOFF, BLAZE_SHOOT, BOW_FIRE, BREWING_STAND_BREW, CHORUS_FLOWER_DEATH, CHORUS_FLOWER_GROW, CLICK1, CLICK2, DOOR_CLOSE, DOOR_TOGGLE, ENDERDRAGON_GROWL, ENDERDRAGON_SHOOT, ENDEREYE_LAUNCH, EXTINGUISH, FENCE_GATE_CLOSE, FENCE_GATE_TOGGLE, FIREWORK_SHOOT, GHAST_SHOOT, GHAST_SHRIEK, IRON_DOOR_CLOSE, IRON_DOOR_TOGGLE, IRON_TRAPDOOR_CLOSE, IRON_TRAPDOOR_TOGGLE, PORTAL_TRAVEL, RECORD_PLAY, STEP_SOUND, TRAPDOOR_CLOSE, TRAPDOOR_TOGGLE, ZOMBIE_CHEW_WOODEN_DOOR, ZOMBIE_CHEW_IRON_DOOR, ZOMBIE_DESTROY_DOOR, WITHER_BREAK_BLOCK, WITHER_SHOOT, ZOMBIE_CONVERTED_VILLAGER, or ZOMBIE_INFECT.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5602</id>
	<key><![CDATA[Additional data can be supplied with the syntax EFFECT:DATA.%sThe STEP_SOUND takes a block material name.%sRECORD_PLAY takes a record material name.%sSMOKE takes a facing, one of NORTH, EAST, SOUTH, WEST, UP, DOWN, NORTH_EAST, NORTH_WEST, SOUTH_EAST, SOUTH_WEST, WEST_NORTH_WEST, NORTH_NORTH_WEST, NORTH_NORTH_EAST, EAST_NORTH_EAST, EAST_SOUTH_EAST, SOUTH_SOUTH_EAST, SOUTH_SOUTH_WEST, WEST_SOUTH_WEST, or SELF%sPOTION_BREAK takes an int (represents color).%sVILLAGER_PLANT_GROW takes an int of the number of particles (requires a plant at location).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5603</id>
	<key><![CDATA[ZOMBIE, HUSK, DROWNED]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5604</id>
	<key><![CDATA[Returns an array of command arrays in the format register_command expects or %s if no commands could be found. The command arrays will not include executors or tabcompleters. This does not include MethodScript aliases, as they are not registered commands.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5605</id>
	<key><![CDATA[Registers a command to the server&apos;s command list, or updates an existing one. Options is an associative array that can have the following keys: description, usage, permission, noPermMsg, aliases, tabcompleter, and/or executor. The &apos;noPermMsg&apos; argument is the message displayed when the user doesn&apos;t have the permission specified in &apos;permission&apos;. The &apos;usage&apos; is the message shown when the &apos;executor&apos; returns false. The &apos;executor&apos; is the closure run when the command is executed, and can return true or false (by default is treated as true). The &apos;tabcompleter&apos; is the closure run when a user hits tab while the command is entered and ready for args. It is meant to return an array of completions, but if not the tab_complete_command event will be fired, and the completions of that event will be sent to the user. Both executor and tabcompleter closures are passed the following information in this order: alias used, name of the sender, array of arguments used, array of command info.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5606</id>
	<key><![CDATA[Unregisters a command from the server&apos;s command list. Commands from other plugins can be unregistered using this function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5607</id>
	<key><![CDATA[Registers a command to the server's command list, or updates an existing one. Options is an associative array that can have the following keys: description, usage, permission, noPermMsg, aliases, tabcompleter, and/or executor. The 'noPermMsg' argument is the message displayed when the user doesn't have the permission specified in 'permission'. The 'usage' is the message shown when the 'executor' returns false. The 'executor' is the closure run when the command is executed, and can return true or false (by default is treated as true). The 'tabcompleter' is the closure run when a user hits tab while the command is entered and ready for args. It is meant to return an array of completions, but if not the tab_complete_command event will be fired, and the completions of that event will be sent to the user. Both executor and tabcompleter closures are passed the following information in this order: alias used, name of the sender, array of arguments used, array of command info.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5608</id>
	<key><![CDATA[Unregisters a command from the server's command list. Commands from other plugins can be unregistered using this function.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5609</id>
	<key><![CDATA[world%s: The world in which the tree has grown.%stype%s: The tree type, can be one of TREE, BIG_TREE, REDWOOD, TALL_REDWOOD, BIRCH, JUNGLE, SMALL_JUNGLE, JUNGLE_BUSH, RED_MUSHROOM, BROWN_MUSHROOM, SWAMP, ACACIA, DARK_OAK, COCOA_TREE, MEGA_REDWOOD, TALL_BIRCH, or CHORUS_PLANT%sblocks%s: An array containing all locations of grown blocks.%slocation%s: The location of the sapling.%sbonemeal%s: If the tree has grown due to a bonemeal or not.%splayer%s: The player who used the bonemeal, or %s if no bonemeal was used.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5610</id>
	<key><![CDATA[Username and password are optional in on premise SQL Server on Windows (as opposed to databases in Azure, where it is mandatory). Windows Authentication can be used instead, however, it requires extra server setup. To do so, simply run the %sinstall-mssql-auth%s from the command line.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5611</id>
	<key><![CDATA[instance]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5612</id>
	<key><![CDATA[MSSQL (SQL Server)]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5613</id>
	<key><![CDATA[The host you are connecting to. If not specified, "localhost" is assumed. If the database is in Azure, you may instead use "azureHost", and simply provide the host name (.database.windows.net will be appended for you).]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5614</id>
	<key><![CDATA[In addition to these specially handled parameters, any of the valid parameters listed [%s here] can also be added, and they are simply passed on as is.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5615</id>
	<key><![CDATA[MSSQL requires a separate SQL Server to be running, either remotely or locally. For more information about setting up SQL Server, look for more information on the Microsoft website:]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5616</id>
	<key><![CDATA[The SQL Server must be configured to allow TCP/IP connections, which is disabled by default. The JDBC driver cannot connect using Shared Memory, which is the only transport enabled by default. To enable TCP/IP connections, open the "SQL Server Configuration Manager" which is installed along with SQL Server. Expand the "SQL Server Network Configuration" tab on the left, and select the SQL Server instance you're trying to connect. Enable the "TCP/IP" protocol. You need to then restart the SQL Server. Click on the "SQL Server Services" tab, and then right click and restart on the server.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5617</id>
	<key><![CDATA[The instance of SQL Server on the host. By default, empty.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5618</id>
	<key><![CDATA[The port you are connecting to. If not specified, 1433 is assumed.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5619</id>
	<key><![CDATA[Then, to use this authentication, simply add %s"integratedSecurity": true%s to your code, or %s&lt;integratedSecurity&gt;true&lt;/integratedSecurity&gt;%s to your profile.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5620</id>
	<key><![CDATA[to%screationradius%ssearchradius%screationallowed]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5621</id>
	<key><![CDATA[id%s: The UUID of entity%stype%s: The type of entity%sfrom%s: The location the entity is coming from%sto%s: The location the entity is going to. Returns %s when using nether portal and  "allow-nether" in server.properties is set to false or when using end portal and  "allow-end" in bukkit.yml is set to false.%ssearchradius%s: The search radius for finding an available portal.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5622</id>
	<key><![CDATA[player%s: The player that teleport%sfrom%s: The location the player is coming from%sto%s: The location the player is coming to. Returns %s when using nether portal and "allow-nether" in server.properties is set to false or when using end portal and "allow-end" in bukkit.yml is set to false.%stype%s: the type of portal occurring%screationallowed%s: If a new portal can be created.%screationradius%s: Gets the maximum radius from the given location to create a portal.%ssearchradius%s: Gets the search radius for finding an available portal.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5623</id>
	<key><![CDATA[to%ssearchradius]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5624</id>
	<key><![CDATA[Returns the color modifier given a color name. If the given color name isn&apos;t valid, white is used instead. The list of valid colors is: BLACK, DARK_BLUE, DARK_GREEN, DARK_AQUA, DARK_RED, DARK_PURPLE, GOLD, GRAY, DARK_GRAY, BLUE, GREEN, AQUA, RED, LIGHT_PURPLE, YELLOW, WHITE, RANDOM, BOLD, STRIKETHROUGH, UNDERLINE, ITALIC, or PLAIN_WHITE, in addition the integers 0-15 will work, or the hex numbers from 0-F, and k, l, m, n, o, and r, which represent styles. Unlike manually putting in the color symbol, using this function will return the platform&apos;s color code, so if you are wanting to keep your scripts platform independent, it is a much better idea to use this function as opposed to hard coding your own color codes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5625</id>
	<key><![CDATA[Plays the specified effect at the given location for all players within the radius (or 64 by default). The effect can be one of the following: DRAGON_BREATH, END_GATEWAY_SPAWN, ENDER_SIGNAL, INSTANT_POTION_BREAK, MOBSPAWNER_FLAMES, POTION_BREAK, SMOKE, VILLAGER_PLANT_GROW, ANVIL_BREAK, ANVIL_LAND, ANVIL_USE, BAT_TAKEOFF, BLAZE_SHOOT, BOW_FIRE, BREWING_STAND_BREW, CHORUS_FLOWER_DEATH, CHORUS_FLOWER_GROW, CLICK1, CLICK2, DOOR_CLOSE, DOOR_TOGGLE, ENDERDRAGON_GROWL, ENDERDRAGON_SHOOT, ENDEREYE_LAUNCH, EXTINGUISH, FENCE_GATE_CLOSE, FENCE_GATE_TOGGLE, FIREWORK_SHOOT, GHAST_SHOOT, GHAST_SHRIEK, IRON_DOOR_CLOSE, IRON_DOOR_TOGGLE, IRON_TRAPDOOR_CLOSE, IRON_TRAPDOOR_TOGGLE, PORTAL_TRAVEL, RECORD_PLAY, STEP_SOUND, TRAPDOOR_CLOSE, TRAPDOOR_TOGGLE, ZOMBIE_CHEW_WOODEN_DOOR, ZOMBIE_CHEW_IRON_DOOR, ZOMBIE_DESTROY_DOOR, WITHER_BREAK_BLOCK, WITHER_SHOOT, ZOMBIE_CONVERTED_VILLAGER, or ZOMBIE_INFECT. [[%s|See more...]]]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5626</id>
	<key><![CDATA[Returns the color modifier given a color name. If the given color name isn't valid, white is used instead. The list of valid colors is: BLACK, DARK_BLUE, DARK_GREEN, DARK_AQUA, DARK_RED, DARK_PURPLE, GOLD, GRAY, DARK_GRAY, BLUE, GREEN, AQUA, RED, LIGHT_PURPLE, YELLOW, WHITE, RANDOM, BOLD, STRIKETHROUGH, UNDERLINE, ITALIC, or PLAIN_WHITE, in addition the integers 0-15 will work, or the hex numbers from 0-F, and k, l, m, n, o, and r, which represent styles. Unlike manually putting in the color symbol, using this function will return the platform's color code, so if you are wanting to keep your scripts platform independent, it is a much better idea to use this function as opposed to hard coding your own color codes.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
<translationEntry>
	<id>5627</id>
	<key><![CDATA[Plays the specified effect at the given location for all players within the radius (or 64 by default). The effect can be one of the following: DRAGON_BREATH, END_GATEWAY_SPAWN, ENDER_SIGNAL, INSTANT_POTION_BREAK, MOBSPAWNER_FLAMES, POTION_BREAK, SMOKE, VILLAGER_PLANT_GROW, ANVIL_BREAK, ANVIL_LAND, ANVIL_USE, BAT_TAKEOFF, BLAZE_SHOOT, BOW_FIRE, BREWING_STAND_BREW, CHORUS_FLOWER_DEATH, CHORUS_FLOWER_GROW, CLICK1, CLICK2, DOOR_CLOSE, DOOR_TOGGLE, ENDERDRAGON_GROWL, ENDERDRAGON_SHOOT, ENDEREYE_LAUNCH, EXTINGUISH, FENCE_GATE_CLOSE, FENCE_GATE_TOGGLE, FIREWORK_SHOOT, GHAST_SHOOT, GHAST_SHRIEK, IRON_DOOR_CLOSE, IRON_DOOR_TOGGLE, IRON_TRAPDOOR_CLOSE, IRON_TRAPDOOR_TOGGLE, PORTAL_TRAVEL, RECORD_PLAY, STEP_SOUND, TRAPDOOR_CLOSE, TRAPDOOR_TOGGLE, ZOMBIE_CHEW_WOODEN_DOOR, ZOMBIE_CHEW_IRON_DOOR, ZOMBIE_DESTROY_DOOR, WITHER_BREAK_BLOCK, WITHER_SHOOT, ZOMBIE_CONVERTED_VILLAGER, or ZOMBIE_INFECT.]]></key>
	<eligibleForMachineTranslation>null</eligibleForMachineTranslation>
	<comment></comment>
	<untranslatable>false</untranslatable>
	<suspectSegment>false</suspectSegment>
</translationEntry>
</summary>
