<translations>
<comment></comment>
<translationBlock>
	<id>nb-1715</id>
	<key><![CDATA[Find a bug in this page? %sEdit this page yourself, then submit a pull request.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-2698</id>
	<key><![CDATA[Example]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3178</id>
	<key><![CDATA[These functions will allow you to validate that the data entered is in fact of the specified  type, or can be cast to the specified type.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3179</id>
	<key><![CDATA[Non-Exception data validation]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3180</id>
	<key><![CDATA[Both the spelling and capitalization are important when using the name of an exception. The  proper format is displayed in the header of each section.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3181</id>
	<key><![CDATA[Exception Types]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3182</id>
	<key><![CDATA[If an exception is passed all the way to the root of the script, and the interpreter has to  catch the exception, the script will terminate, and the default message will be logged to  console, and displayed to the user. In most cases, this may be enough. Also, in general,  exceptions have been massively improved, all exceptions give a much more detailed error  message, and also provide a line number to assist in debugging your scripts. Also note  that if debug-mode is on, ALL exceptions that are thrown will log to the console, even if  they are caught. This can help debug a potential problem with your script. The API has been  updated to include a list of possible exceptions that can be thrown by a function, and a  list of what the exception types are, and what might cause them to be thrown are listed below.  Please note that it is entirely possible that an exception being thrown was not noted in the  API -- this is a bug in the documentation. Please report it so that it can be corrected. Also  note that it is possible for the try function itself to throw an exception, if the arguments  are not of the proper type. Though it is possible to further catch those exceptions, it  probably means that your code is poorly designed.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3183</id>
	<key><![CDATA[Exceptions are thrown by various functions at runtime. Since MScript is not yet strongly typed,  it is not possible to catch all errors at compile time. Due to this, it is useful to be able  to programmatically determine if a function failed. To this end, since version 3.1.2,  MScript has the %s function. This function takes 3 or 4 arguments:]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3184</id>
	<key><![CDATA[among others.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3185</id>
	<key><![CDATA[If you are familiar with other programming languages' try-catch mechanisms, then this  construct will be familiar. The code at %stry_code%s is run normally. If any  function in the code causes an exception to be thrown, execution will halt, and program  flow will start at %scatch_code%s. The exception thrown will be stored in  %sivar%s, so that you can programmatically examine the cause of the exception.  Many times, you are only interested in a certain type of exception. This is where the optional  %sinterested_types%s variable comes in. If omitted, all exceptions are caught.  If provided, it may be a single string, or an array of strings, where the provided values  are one or more of the exception types listed below. There are a select few errors that can  be caused by runtime issues which cannot be caught, but by far, most runtime issues can be  caught in a try function. In addition, you can trigger an exception being thrown with the  %s function.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3186</id>
	<key><![CDATA[When accepting user input, it is important to verify that their input is valid. Using  exceptions allows you to easily catch errors in their input.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3187</id>
	<key><![CDATA[In addition to exception handling in 3.1.2, several functions have been added that allow you  to validate data without using the try-catch framework. Make note of the existence of the  following functions:]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3188</id>
	<key><![CDATA[throw%s accepts any valid exception type listed below, as well as a message.  The line number will automatically be added. This exception is then passed up the chain,  just as if any other function had thrown the exception. If the exception type is %s,  this exception is uncatchable, however, it is best practice to use the %s  function if you intend on killing a script.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-5152</id>
	<key><![CDATA[About]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-5153</id>
	<key><![CDATA[Home]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-5154</id>
	<key><![CDATA[Privacy Policy]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-5155</id>
	<key><![CDATA[Sponsors]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-5156</id>
	<key><![CDATA[Help]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-5157</id>
	<key><![CDATA[Team. All rights reserved.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-5158</id>
	<key><![CDATA[Docs]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
</translations>
