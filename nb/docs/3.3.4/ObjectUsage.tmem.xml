<translations>
<comment></comment>
<translationBlock>
	<id>nb-1007</id>
	<key><![CDATA[ClassType]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-1715</id>
	<key><![CDATA[Find a bug in this page? %sEdit this page yourself, then submit a pull request.]]></key>
	<comment></comment>
	<translation><![CDATA[Finne en feil på denne siden? %sRediger denne siden selv, og send deretter inn en Pull Request.]]></translation>
	<auto><![CDATA[Finne en feil på denne siden? %sRediger denne siden selv, og send deretter inn en pull-forespørsel.]]></auto>
</translationBlock>
<translationBlock>
	<id>nb-3161</id>
	<key><![CDATA[Reflective access]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3162</id>
	<key><![CDATA[It is possible to access elements in a class using reflection. This mechanism bypasses the compiler, however, and should generally not be used, unless working with objects more generally. To access a method or field reflectively, use the -> operator.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3163</id>
	<key><![CDATA[Creating an object and using an existing one are two different topics, and are thus given separate treatments. This article discusses the usage of objects, rather than how they are created, for that discussion, see [Classes].]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3164</id>
	<key><![CDATA[Just like with instances, the value on the left may be a variable, though the variable must be holding a ClassType for this to work.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3165</id>
	<key><![CDATA[When using ->, this works similarly to using the dot operator, but the value in the string @method is resolved at runtime. The value returned by ''@myObject-&gt;@method'' is typed as auto, thus bypassing any compile time checks that could otherwise have been done, so in general, this should be a%sed where possible. The value on the right hand side of -> must be a string, or this is a compile error. Since the return value is auto, any further chaining would also be auto, i.e. ''@myObject-&gt;@method().toLowerCase()'' would work if @method were "toString", but could not be caught at compile time if there were an error. In cases where the method or field can't be found, an ElementNotFoundException is thrown. Using this mechanism also disregards the access restrictions on the element, though the security manager is first consulted, and a SecurityException is thrown.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3166</id>
	<key><![CDATA[Both of these examples call the method "toString", which is defined in the int class. The first example calls it directly on an instance of the object, the second calls it on the variable, which in this case contains an instance of the int value 10.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3167</id>
	<key><![CDATA[Fields are accessed the same way, but without the () at the end. Methods can be chained as well, the return value on the first is used in the second, and so on.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3168</id>
	<key><![CDATA[Static Elements]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3169</id>
	<key><![CDATA[In this example, we specifically define ''@i'' as ''ClassType&lt;int&gt;'', which is the precise type of ''int''. This is the equivalent of the previous example, without auto typing. While this is possible, there are not many cases where this is useful, because the only thing that can be assigned in this value is ''int'', so it would be easier to use that value directly. However, the generic parameter can be less restricted and still correct, which may lead to more useful scenarios.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3170</id>
	<key><![CDATA[In this example, the intermediate string is directly used again. This is the same as writing:]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3171</id>
	<key><![CDATA[Static elements of a class are things that are associated with the class itself, not the instances (if any) of the class. The general principals work more or less the same, but there is slightly different syntax to access the methods or fields,  is used instead, and the value on the left hand side must be a ClassType value.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3172</id>
	<key><![CDATA[In this example, @i could be any subclass of MySuperclass (or MySuperclass itself). Assuming MySuperclass defines a method named StaticMethod, then this becomes useful if MySubclass may or may not override that static method.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3173</id>
	<key><![CDATA[Using [Generics] and ClassType variables, it is possible to do more interesting things with static methods. Taking the previous example, using ClassType instead, let's take a look at a different example.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3174</id>
	<key><![CDATA[An instance of an object is some concrete instance of a Class definition. You can think of a Class as a blueprint, and an instance as the building itself. Many buildings can be built from the same blueprint, and each will have their own slightly different properties, of which can also change over time. Manipulation of one of these instances will not affect the others. A variable contains an instance of some class, though it can change as well. A variable with a type, for instance  can only contain an int, though that int can start out as 5, and be changed to 8 later. While this is a simple example, it is important to understand that there is a difference between what is currently stored in a variable, and what an instance is. Normally, when using an instance, you will not need to understand static members, which are elements (fields or methods) that are shared across all instances of that particular object, as so in this section, we will only discuss objects that do not have static methods. In order to access an instance method or field, we use the dot operator (period, '.'). This is a binary operator, meaning that there must be something on both the right and left of the operator. The thing on the left is the instance that we are wanting to operate on, and the right is the name of the method or field that we want to access. The left hand side may be either an object itself, or a variable containing some instance.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3175</id>
	<key><![CDATA[This feature is not strictly useful though, and for more strict programming styles, this is not recommended as such. However, the ClassType definition can accept a constrained type, which is discussed in the next section.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3176</id>
	<key><![CDATA[It is worth pointing out that ClassTypes are themselves instances, and have instance methods, thus the need for different operators for accessing instance methods vs static methods. To access the instance methods defined in ClassType itself, use the . operator.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-3177</id>
	<key><![CDATA[Using instances]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-5152</id>
	<key><![CDATA[About]]></key>
	<comment></comment>
	<translation></translation>
	<auto><![CDATA[Om]]></auto>
</translationBlock>
<translationBlock>
	<id>nb-5153</id>
	<key><![CDATA[Home]]></key>
	<comment></comment>
	<translation><![CDATA[Hjem]]></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-5154</id>
	<key><![CDATA[Privacy Policy]]></key>
	<comment></comment>
	<translation></translation>
	<auto><![CDATA[Personvern]]></auto>
</translationBlock>
<translationBlock>
	<id>nb-5155</id>
	<key><![CDATA[Sponsors]]></key>
	<comment></comment>
	<translation></translation>
	<auto><![CDATA[Sponsorer]]></auto>
</translationBlock>
<translationBlock>
	<id>nb-5156</id>
	<key><![CDATA[Help]]></key>
	<comment></comment>
	<translation><![CDATA[Hjelp]]></translation>
	<auto><![CDATA[hjelp]]></auto>
</translationBlock>
<translationBlock>
	<id>nb-5157</id>
	<key><![CDATA[Team. All rights reserved.]]></key>
	<comment></comment>
	<translation></translation>
	<auto><![CDATA[Team. Alle rettigheter reservert.]]></auto>
</translationBlock>
<translationBlock>
	<id>nb-5158</id>
	<key><![CDATA[Docs]]></key>
	<comment></comment>
	<translation></translation>
	<auto><![CDATA[Dokumenter]]></auto>
</translationBlock>
</translations>
