<translations>
<comment></comment>
<translationBlock>
	<id>nb-189</id>
	<key><![CDATA[number]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-920</id>
	<key><![CDATA[mixed]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-1276</id>
	<key><![CDATA[int]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-1715</id>
	<key><![CDATA[Find a bug in this page? %sEdit this page yourself, then submit a pull request.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-2061</id>
	<key><![CDATA[An array is a "collection" of other data types.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-2062</id>
	<key><![CDATA[A boolean is a true/false value.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-2063</id>
	<key><![CDATA[auto]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-2064</id>
	<key><![CDATA[TODO: Add inheritance tree image]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-2065</id>
	<key><![CDATA[A byte array wraps a native byte array object, to allow for more efficient byte array manipulations, and to allow for translation to external processes that communicate at the lowest level.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-2066</id>
	<key><![CDATA[primitive]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-2067</id>
	<key><![CDATA[A string is created in code with quotes, either single quotes or double quotes. 'string', for example.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-2068</id>
	<key><![CDATA[Inheritance Tree]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-2069</id>
	<key><![CDATA[The primitive class defines all data types that can be "typed in" directly into code, so 'string', 5, 3.1415.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-2070</id>
	<key><![CDATA[The number class is the super class for all data types that support numeric operations.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-2071</id>
	<key><![CDATA[A map is a "dictionary" of string to mixed mappings.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-2072</id>
	<key><![CDATA[The auto type isn't a type per se, it works as a bridge between scripting language and compiled language. If a type is marked as auto, casting is not required, and it will attempt to cast to the correct data type at runtime, and only throw an exception then. This is discouraged from normal use, except in the case of receiving user input, or very small one time scripts. Additionally, string constants and numeric constants work as if they are declared as auto. Variables declared as auto are eligible to use the cross-casting system.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-2073</id>
	<key><![CDATA[MethodScript has several "built in" types. They work just like user definable types, but it is worth mentioning them specifically, since they form the basis of all objects.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-2074</id>
	<key><![CDATA[A double is a floating point number.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-2075</id>
	<key><![CDATA[An int is a integral number.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-2076</id>
	<key><![CDATA[An Object is the superclass of all user defined types, and is the first type in the hierarchy that requires instantiation with the "new" keyword.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-2077</id>
	<key><![CDATA[Object]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-2078</id>
	<key><![CDATA[map]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>nb-2079</id>
	<key><![CDATA[Mixed is the root of all possible types. It is an interface, which defines a very few methods, which are common to all objects, built in and user defined types.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
</translations>
