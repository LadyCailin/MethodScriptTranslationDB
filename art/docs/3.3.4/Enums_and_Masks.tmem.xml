<translations>
<comment></comment>
<translationBlock>
	<id>art-1715</id>
	<key><![CDATA[Find a bug in this page? %sEdit this page yourself, then submit a pull request.]]></key>
	<comment></comment>
	<translation></translation>
	<auto><![CDATA[Fînd å büg în thîs pågə? %sEdît thîs pågə ʎøürsəlf, thən sübmît å püll rəqüəst.]]></auto>
</translationBlock>
<translationBlock>
	<id>art-2665</id>
	<key><![CDATA[The above code will cause a compile time error, indicating that the SUNDAY enum was not provided for. This provides for better error checking, in the case where each enum should have definite handling code, and is subject to new enum values being added in the future, instead of a generic handler that throws a runtime exception.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>art-2666</id>
	<key><![CDATA[The default implementation of mask() looks like this:]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>art-2667</id>
	<key><![CDATA[Often times you may find yourself with a unique set of predefined constants, for instance,  compass directions NORTH, SOUTH, EAST, and WEST, or days of the week. Additionally, you may have a set of these enums, which can be represented as a bit mask. For these two situations, you should use the ''enum'' and ''mask'' types, respectively.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>art-2668</id>
	<key><![CDATA[However, you may override this to return a different value, depending on the circumstances. Do note however, that overriding this method incurs a performance penalty, because you could dynamically change the mask values, when fromInt is called, it will not cache the mask values for your enum, like it will for the default.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>art-2669</id>
	<key><![CDATA[Use of enum constants sometimes have special type inference. If the compiler can definitely determine the enum to use, the class name can be left off. So, if the procedure _func() is defined as such: %sproc _func(Compass @direction, ...)%s Then both %s_func(Compass::NORTH)%s and %s_func(NORTH)%s are acceptable. This is only possible when the declared type is a concrete enum type, and not the Enum or mixed superclasses. Additionally, auto string types are cross castable to an enum, so %s_func('NORTH')%s is also valid.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>art-2670</id>
	<key><![CDATA[Often times, you have a switch statement, which you need to be sure to update, if a new value is added. For this, you may use the %s function. This function requires that all enum constants have a case, and no default may be used.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>art-2671</id>
	<key><![CDATA[All enums inherit a few static methods from the enum superclass as well, the most important being valueOf() and values(). valueOf() converts a string to the corresponding enum, and values() returns an array of all enum values in the enum.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>art-2672</id>
	<key><![CDATA[An enum is a specially declared class, which follows certain extra rules, but otherwise behaves just like a normal class. It may have data members and methods, just like any other class. The exceptions are that the class is effectively final (it cannot be extended by other classes/enums),  and the constructor, if provided, must be private. The default constructor for enum values are private as well. Essentially, there must be no way to instantiate the enum object outside of the context of the enum itself, and it can't be overridden. To declare a simple enum, use the following syntax:]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>art-2673</id>
	<key><![CDATA[The enum values are considered as if they are %spublic static final Day%s members of the class Day. Therefore, you cannot have member variables with the same name as the enum. To use the enum value, you would use it the same as any other static member:]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>art-2674</id>
	<key><![CDATA[Enum Types]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>art-2675</id>
	<key><![CDATA[Mask implements Set, so all the operations available with a Set are also available to the Mask, but of note are two extra methods, toInt(), and the static fromInt().]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>art-2676</id>
	<key><![CDATA[An enum mask is used when you could have a set of enums. The Mask class provides methods for converting a set of enums to an integer, and vice versa. Enums that have 64 or less enums may be used as a mask. The default integer mask value of each enum is based on the ordinal value, 2 ** ordinal. However, this default may be changed by overriding the mask() method, and returning whatever integer value you like. It is worth noting that changing existing enum order (besides simply renaming them) causes any old integer masks to be incompatible with the new versions. To use a mask, you must use Mask's static method create(), and provide the enum class, if it can't be inferred.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>art-2677</id>
	<key><![CDATA[To see if an enum value is in the mask, use contains().]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>art-2678</id>
	<key><![CDATA[You may also have more complicated enum class definitions, and you may implement interfaces as well. If a constructor is provided, it must be private, but otherwise is acceptable. The special constructor syntax is demonstrated in the example below as well. As you can see, each parameter is passed in separately for each enum, so getInfo() for each one would return different data.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>art-2679</id>
	<key><![CDATA[Note that there is no "@" symbol here, even though they in some ways act like a member variable. By convention, the names of enum values are all caps, with words separated by underscores, but this is not enforced. Enums can be %s'd over, as such:]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>art-2680</id>
	<key><![CDATA[Mask Types]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>art-5152</id>
	<key><![CDATA[About]]></key>
	<comment></comment>
	<translation></translation>
	<auto><![CDATA[Abøüt]]></auto>
</translationBlock>
<translationBlock>
	<id>art-5153</id>
	<key><![CDATA[Home]]></key>
	<comment></comment>
	<translation></translation>
	<auto><![CDATA[Hømə]]></auto>
</translationBlock>
<translationBlock>
	<id>art-5154</id>
	<key><![CDATA[Privacy Policy]]></key>
	<comment></comment>
	<translation></translation>
	<auto><![CDATA[Prîvåcʎ Pølîcʎ]]></auto>
</translationBlock>
<translationBlock>
	<id>art-5155</id>
	<key><![CDATA[Sponsors]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>art-5156</id>
	<key><![CDATA[Help]]></key>
	<comment></comment>
	<translation></translation>
	<auto><![CDATA[Həlp]]></auto>
</translationBlock>
<translationBlock>
	<id>art-5157</id>
	<key><![CDATA[Team. All rights reserved.]]></key>
	<comment></comment>
	<translation></translation>
	<auto><![CDATA[Təåm. All rîghts rəsərvəd.]]></auto>
</translationBlock>
<translationBlock>
	<id>art-5158</id>
	<key><![CDATA[Docs]]></key>
	<comment></comment>
	<translation></translation>
	<auto><![CDATA[Døcs]]></auto>
</translationBlock>
<translationBlock>
	<id>art-5504</id>
	<key><![CDATA[Often times you may find yourself with a unique set of predefined constants, for instance, compass directions NORTH, SOUTH, EAST, and WEST, or days of the week. Additionally, you may have a set of these enums, which can be represented as a bit mask. For these two situations, you should use the ''enum'' and ''mask'' types, respectively.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>art-5505</id>
	<key><![CDATA[An enum is a specially declared class, which follows certain extra rules, but otherwise behaves just like a normal class. It may have data members and methods, just like any other class. The exceptions are that the class is effectively final (it cannot be extended by other classes/enums), and the constructor, if provided, must be private. The default constructor for enum values are private as well. Essentially, there must be no way to instantiate the enum object outside of the context of the enum itself, and it can't be overridden. To declare a simple enum, use the following syntax:]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
</translations>
