<translations>
<comment></comment>
<translationBlock>
	<id>ko-1715</id>
	<key><![CDATA[Find a bug in this page? %sEdit this page yourself, then submit a pull request.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-3375</id>
	<key><![CDATA['''Networking''']]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-3377</id>
	<key><![CDATA['''Mob Control''']]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-3378</id>
	<key><![CDATA['''Javadoc for Procedures''' (Smart comments. There now exists a class in the pure utilities that is capable of parsing this into a usable format)]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-3379</id>
	<key><![CDATA['''Framework to allow remote programs to connect to the server and execute scripts''' (with security built in)]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-3381</id>
	<key><![CDATA[Raw sockets]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-3382</id>
	<key><![CDATA[Self creating documentation]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-3385</id>
	<key><![CDATA[[[%s|'''Object Oriented Design''']]]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-3386</id>
	<key><![CDATA['''Long Term''']]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-3388</id>
	<key><![CDATA['''Low Level Packet Handling''']]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-3389</id>
	<key><![CDATA['''Serialization of compiled scripts''' (That is, the ability to write out the compiled scripts to file system, allowing the scripts to bypass compilation at startup. This would speed up startup time significantly, but this feature must be done right, too many other build systems get this wrong, and it causes more problems than it's worth sometimes)]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-3392</id>
	<key><![CDATA[''Why choose MethodScript over Javascript? Or PHP? Or AwesomeScript? Or ThatOtherScript?'']]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-3393</id>
	<key><![CDATA[File system functionality (This will only happen after completion of a "virtual filesystem", to allow for strict sandboxing of scripts)]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-3395</id>
	<key><![CDATA['''Web Server that serves up the automatically created documentation''' (with options for limiting access)]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-3396</id>
	<key><![CDATA['''SSP version of CommandHelper''']]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-3397</id>
	<key><![CDATA['''External Task Manager''' (This will likely go along with the Netbeans plugin)]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-3398</id>
	<key><![CDATA['''MethodScript STL''' (Also depends on the debugger and multithreading. I'm not gonna start writing complex MScript code without a good way to find errors in it.)]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-5152</id>
	<key><![CDATA[About]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-5153</id>
	<key><![CDATA[Home]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-5154</id>
	<key><![CDATA[Privacy Policy]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-5155</id>
	<key><![CDATA[Sponsors]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-5156</id>
	<key><![CDATA[Help]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-5157</id>
	<key><![CDATA[Team. All rights reserved.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-5158</id>
	<key><![CDATA[Docs]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-5514</id>
	<key><![CDATA[Eventually, it is the hope that MethodScript be made into a generic framework that allows for any application to easily implement it's own functions that can be applied to whatever domain is being used. Many of the functions are completely independent of Minecraft, and could be included in a "core" that is distributed, and each application can define their own API. With the built in documentation features, it would be easy to expand (and keep the documentation up-to-date and useful).]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-5515</id>
	<key><![CDATA['''Full blown debugger''' (VSC plugin is the end goal, though cmdline tools (gdb style) will be implemented first, to secure the raw functionality. This depends on Networking, because the debugger must support remotes first, which will also cover local debugging)]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-5516</id>
	<key><![CDATA[In addition, MethodScript borrows strong points from other languages, which in addition to making it easier to learn for people who have exposure to other languages, also helps it to stand on the shoulders of giants, and is able to "start from scratch" and get rid of features that aren't desirable with other languages, while not having to worry about losing backwards compatibility.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-5517</id>
	<key><![CDATA[This is a [%s valid question]. What does MethodScript offer that other scripting languages don't? Simplicity. This has several benefits, and drawbacks that we must consider. In general, MethodScript is much easier to learn than other languages. In essence, everything is a function, including common control structures. This makes many concepts easier to learn, and makes for easily embeddable scripts. This is demonstrated by MethodScripts being embedded in the aliases.msa file. Each script is run separately from each other, and is embedded inside a simpler format, which facilitates easier integration into existing paradigms. Secondly, as a scripting language, it is easy to transmit in plain text, which makes it perfect for simple configuration and customization. Finally, it has many built in features that simplify development, such as the include() function. With everything, there are drawbacks though. Since it is not strongly typed, this makes it easier to use, but harder to maintain. It is not possible to easily refactor dynamic elements. Though it will be pseudo object oriented, it is somewhat added on top, it wasn't initially designed with this in mind. Though the design of the object oriented features should be properly designed, they are being designed inside the existing constraints of the non-object oriented features.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-5518</id>
	<key><![CDATA[This page serves as a general guide for the features I intend on implementing. Note that I reserve the right to modify, rearrange, add, remove, eat, or delete this list or any parts of it at any given time, with or without notice to you or your lawyers. :D However, more than likely, if there is a feature on this list, I plan to add it at some point, but it may get shuffled around some in the process. Items shown in '''bold''' are major tasks, and their completion would likely bump the major or minor version number (and will take longer), while other features would probably only bump the supplemental version number, unless several were released at once. Sub bullets must wait on their parent task being completed before they could be done. Adding more raw functions to allow more hooks into the game itself or functions to simplify common programming tasks are continually being added. Also note that these tasks are not in any particular order, though the main bullet points are roughly in order.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
<translationBlock>
	<id>ko-5519</id>
	<key><![CDATA[Finally, unlike JavaScript, MethodScript's documentation is a priority, and documentation is created from the authoritative source. The website's goal is to provide comprehensive documentation and examples, which helps promote understanding.]]></key>
	<comment></comment>
	<translation></translation>
	<auto></auto>
</translationBlock>
</translations>
